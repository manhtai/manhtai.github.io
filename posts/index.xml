<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Go slowly</title>
    <link>https://manhtai.github.io/posts/</link>
    <description>Recent content in Posts on Go slowly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Jul 2022 15:59:47 +0700</lastBuildDate>
    
        <atom:link href="https://manhtai.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shell fuzzy search using fzf on Fish</title>
      <link>https://manhtai.github.io/posts/shell-fuzzy-search-using-fzf-on-fish/</link>
      <pubDate>Fri, 08 Jul 2022 15:59:47 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/shell-fuzzy-search-using-fzf-on-fish/</guid>
      <description>&lt;p&gt;I mostly use an IDE for coding these days, but vim keybindings mode will be on
and the terminal window with a proper shell must always be opened.&lt;/p&gt;
&lt;p&gt;I wouldn&amp;rsquo;t want to code without CLI, and Fish shell with fzf fuzzy search
brought it up to another level. In combination with many fancy things that
are developed for the CLI recently, which make me very excited. Another
reason to believe that CLI will live on forever!&lt;/p&gt;
&lt;p&gt;Now for my new setup with Fish and fzf.&lt;/p&gt;
&lt;p&gt;1, &lt;a href=&#34;https://github.com/fish-shell/fish-shell&#34;&gt;Fish&lt;/a&gt; first&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install fish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2, Then &lt;a href=&#34;https://github.com/jorgebucaran/fisher&#34;&gt;fisher&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;curl -sL https://git.io/fisher | source &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; fisher install jorgebucaran/fisher
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3, Then &lt;a href=&#34;https://github.com/PatrickF1/fzf.fish&#34;&gt;fzf.fish&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;fisher install PatrickF1/fzf.fish
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;4, And multiple &lt;a href=&#34;https://github.com/sharkdp/bat&#34;&gt;fancy&lt;/a&gt; &lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;small&lt;/a&gt; &lt;a href=&#34;https://github.com/Peltoche/lsd&#34;&gt;stuff&lt;/a&gt;s&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;cargo install bat fd-find lsd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;5, Then config some key bindings&lt;/p&gt;
&lt;p&gt;Mine are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Ctrl + T&lt;/code&gt;: Search directories&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + K&lt;/code&gt;: Search processes&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + R&lt;/code&gt;: Search history (default)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ctrl + V&lt;/code&gt;: search variables (default)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;fzf_configure_bindings --directory=\ct --processes=\ck
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Enjoy the magic of CLI!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bye Feedly! Hi NetNewsWire!</title>
      <link>https://manhtai.github.io/posts/bye-feedly-hi-netnewswire/</link>
      <pubDate>Sun, 03 Jul 2022 08:46:51 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/bye-feedly-hi-netnewswire/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve read news from RSS feeds since forever. After Google discontinued Google
Reader, I&amp;rsquo;ve switched to Feedly and use it happily ever since. Until now.&lt;/p&gt;
&lt;p&gt;I just discover the NetNewsWire RSS reader app which is both on macOS and iOS,
and data can be synchronized using iCloud. Offline-first and cloud-sync is the
best duo ever. That&amp;rsquo;s the main reason I love using Logseq, Apple Mail, Apple
Photos, and some more of Apple products. &amp;ldquo;Your data only exists on our cloud&amp;rdquo;
doesn&amp;rsquo;t convince me to stay with cloud products anymore.&lt;/p&gt;
&lt;p&gt;The migration is quite seamlessly, you just need to export &lt;code&gt;.opml&lt;/code&gt; file from
Feedly and then import it to NetNewsWire using iCloud account. Then you&amp;rsquo;re
set.&lt;/p&gt;
&lt;p&gt;Good riddance, Feedly, and thanks for all the fish!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade Postgres major version with near-zero-downtime</title>
      <link>https://manhtai.github.io/posts/upgrade-postgres-major-version-with-near-zero-downtime/</link>
      <pubDate>Mon, 20 Jun 2022 07:32:27 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/upgrade-postgres-major-version-with-near-zero-downtime/</guid>
      <description>&lt;p&gt;Our system have a typical facing API and some workers which do jobs on the
background. All of them have read/write access to the Postgres instance. Our
instance is not very big, but when we try to upgrade using AWS console on the
clone, it takes more than 20 minutes and that&amp;rsquo;s not acceptable.
Hence we were looking elsewhere, and find &lt;a href=&#34;https://aws.amazon.com/blogs/database/achieving-minimum-downtime-for-major-version-upgrades-in-amazon-aurora-for-postgresql-using-aws-dms/&#34;&gt;a solution&lt;/a&gt; from AWS using DMS.
It worked out pretty well for us.&lt;/p&gt;
&lt;h2 id=&#34;step-by-step&#34;&gt;Step by step&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Clone a new instance from our current database, truncate all tables and
upgrade the new database to the latest version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full load and then CDC sync between the old database and the new one.
Monitor the latency as well as table statistics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stop all writing tasks (API &amp;amp; workers) to old database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stop DMS job.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Switch database connection to the new one and restart all writing tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify, then clean up old resources.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;catches&#34;&gt;Catches&lt;/h2&gt;
&lt;p&gt;Current DMS engine (3.4.6) has some problems with some column types. But we
can resolve them quickly thanks to clear error logs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;varchar&lt;/code&gt; (without n), we have to convert it to &lt;code&gt;text&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jsonb not null&lt;/code&gt;, we have to make it nullable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But in overall the upgrade process is smooth, we still got some downtime but
it&amp;rsquo;s insignificant.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Handle Unicode in Golang and Javascript</title>
      <link>https://manhtai.github.io/posts/golang-vs-javascript-unicode/</link>
      <pubDate>Tue, 17 May 2022 16:51:30 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/golang-vs-javascript-unicode/</guid>
      <description>&lt;p&gt;Currently I&amp;rsquo;m working on some basic security stuffs between server side written
in Golang and client side written in, well, Javascript.&lt;/p&gt;
&lt;h2 id=&#34;code-point&#34;&gt;Code point&lt;/h2&gt;
&lt;p&gt;A character is not the same as a code point.&lt;/p&gt;
&lt;p&gt;The Unicode standard uses the term &amp;ldquo;code point&amp;rdquo; to refer to the item represented
by a single value. A character may be represented by a number of different
sequences of code points, and therefore different sequences of UTF-8 bytes.&lt;/p&gt;
&lt;p&gt;In Go, a code point is called &lt;code&gt;rune&lt;/code&gt;, when using &lt;code&gt;range&lt;/code&gt; on a string, it will
result in a rune at a time. Read more about strings in Go &lt;a href=&#34;https://go.dev/blog/strings&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In Javascript, when using &lt;code&gt;String.prototype.split()&lt;/code&gt;, it will result in a UTF-16
code unit. To separate the text into code points, use &lt;code&gt;for..of&lt;/code&gt; or &lt;code&gt;Array.from&lt;/code&gt;
instead. Read more about string split in Javascript &lt;a href=&#34;https://stackoverflow.com/questions/4547609&#34;&gt;here&lt;/a&gt;. To get UTF-16
code unit, use &lt;code&gt;String.prototype.charCodeAt()&lt;/code&gt;, to get code point, use
&lt;code&gt;String.prototype.codePointAt()&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;escape-unicode-characters&#34;&gt;Escape Unicode characters&lt;/h2&gt;
&lt;p&gt;When working with Unicode strings in cryptography, we wouldn&amp;rsquo;t want to deal
with vary size code point in Unicode characters. To make our life easier,
escape them first, and then working on ASCII.&lt;/p&gt;
&lt;p&gt;In Golang, we have &lt;code&gt;url.QueryEscape()&lt;/code&gt; and in Javascript, we got
&lt;code&gt;encodeURIComponent()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;url.QueryEscape()&lt;/code&gt; escapes the string so it can be safely placed inside a
URL query.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;encodeURIComponent()&lt;/code&gt; function encodes a URI by replacing each instance
of certain characters by one, two, three, or four escape sequences representing
the UTF-8 encoding of the character.&lt;/p&gt;
&lt;p&gt;So in theory, &lt;code&gt;encodeURIComponent()&lt;/code&gt; and &lt;code&gt;QueryEscape()&lt;/code&gt; should be the same,
but in practice, they are not. Both of them try to follow &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc3986&#34;&gt;RFC 3986&lt;/a&gt; until
they don&amp;rsquo;t. Depend on what you are working on, they might behave the same on
the same kind of string. So you can use &lt;code&gt;QueryEscape()&lt;/code&gt; on server side and
&lt;code&gt;decodeURIComponent()&lt;/code&gt; on client side with a high level of confidence.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Postgres: Update object items on JSONB array</title>
      <link>https://manhtai.github.io/posts/postgres-update-object-item-on-jsonb-array/</link>
      <pubDate>Mon, 25 Apr 2022 17:12:38 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/postgres-update-object-item-on-jsonb-array/</guid>
      <description>&lt;h2 id=&#34;problem&#34;&gt;Problem:&lt;/h2&gt;
&lt;p&gt;We have a table with a JSONB array column &lt;code&gt;data&lt;/code&gt; which contains many objects:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
  {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dog&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dog-1&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cat&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cat-1&amp;#34;&lt;/span&gt;}
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How do we change the name field from &lt;code&gt;&amp;quot;type&amp;quot;&lt;/code&gt; into &lt;code&gt;&amp;quot;kind&amp;quot;&lt;/code&gt; and keep all related data?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s assume table &lt;code&gt;animals&lt;/code&gt; has 2 columns: &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;answer&#34;&gt;Answer:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; animals
&lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; (
         &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; id,
                jsonb_agg(
                        jsonb_build_object(
                                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;, elem &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;,
                                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kind&amp;#39;&lt;/span&gt;, elem &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;
                            )
                    ) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt;
         &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; animals,
              jsonb_array_elements(&lt;span style=&#34;color:#66d9ef&#34;&gt;CASE&lt;/span&gt; jsonb_typeof(&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;WHEN&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;array&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;THEN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[]&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; elem
         &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kind&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;
         &lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; animals.id
     ) &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; animals.id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;.id;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Redshift for customer-facing apps</title>
      <link>https://manhtai.github.io/posts/redshift-as-a-database-for-customer-facing-app/</link>
      <pubDate>Wed, 02 Mar 2022 19:08:23 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/redshift-as-a-database-for-customer-facing-app/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/redshift/&#34;&gt;Redshift&lt;/a&gt; is an OLAP database from AWS, so for data warehouse purpose, it&amp;rsquo;s
a viable option. The question is, can we use it as an OLTP database for
customer-facing applications?&lt;/p&gt;
&lt;p&gt;Short answer: No, for generic OLTP use case, and Yes for specific functions,
such as analytics or building dashboards. The reasons are, firstly, analytic
jobs usually do aggregation on a large chunk of data which would run very slow
on row-based OLTP databases, and secondly, analytic features are usually the
low traffic parts on the system. Those requirements align very well with
Redshift features.&lt;/p&gt;
&lt;h2 id=&#34;1-concurrency-connections&#34;&gt;1. Concurrency connections&lt;/h2&gt;
&lt;p&gt;As of now, Redshift &lt;a href=&#34;https://docs.aws.amazon.com/redshift/latest/dg/cm-c-defining-query-queues.html#cm-c-defining-query-queues-concurrency-level&#34;&gt;supports&lt;/a&gt; up to 50 concurrency connections by default.
Although we can get &lt;a href=&#34;https://docs.aws.amazon.com/redshift/latest/dg/concurrency-scaling.html&#34;&gt;concurrency scaling&lt;/a&gt; feature by paying more, we need
to keep the query latency in the 1-5 seconds range to be usable. Let&amp;rsquo;s say we
get an average of 1 second per query, then we can serve up to 50 requests per
second (RPS), if the analytic APIs only serve 10 RPS, then we&amp;rsquo;re good to go.&lt;/p&gt;
&lt;h2 id=&#34;2-query-latency&#34;&gt;2. Query latency&lt;/h2&gt;
&lt;p&gt;The catch now is how will we keep our query latency to only seconds, or
even better, sub-second? Redshift is very powerful, but for a huge amount of
data, it must be tuned correctly for fast queries.&lt;/p&gt;
&lt;p&gt;Enter the Redshift&amp;rsquo;s DIST key and SORT key couple!&lt;/p&gt;
&lt;p&gt;Since Redshift is a columnar database and is designed to keep a massive
volume, it doesn&amp;rsquo;t have indexes as normal database, it only has 2 kinds of
key for distributing and sorting data into desired locations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;DIST key: for distributing data between compute nodes. It will affect
joins and aggregations performance. We should choose a high cardinality
column for this key.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SORT key: for sorting data on disk. It will affect your &amp;ldquo;where&amp;rdquo; performance.
There are 2 types of sort key: COMPOUND and INTERLEAVED, but we can only
choose only one of them for the table sort key.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Refer to AWS best practice for designing table &lt;a href=&#34;https://docs.aws.amazon.com/redshift/latest/dg/c_designing-tables-best-practices.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;3-benchmark&#34;&gt;3. Benchmark&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;ve done some benchmarks using &lt;a href=&#34;https://k6.io/&#34;&gt;k6&lt;/a&gt; on our toy APIs that use Redshift
ra3.xlplus (4 vCPU, 32 GB RAM, 3 compute nodes) with ~1TB of data in each
table, as the main database and the results are as good as promised: if you
keep your query latency to 1 second, you get 50 RPS, if it goes down to 500
ms, you get 100 RPS.&lt;/p&gt;
&lt;p&gt;The math works out!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Logseq journal: On this day</title>
      <link>https://manhtai.github.io/posts/logseq-journal-on-this-day/</link>
      <pubDate>Fri, 25 Feb 2022 12:12:00 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/logseq-journal-on-this-day/</guid>
      <description>&lt;p&gt;Recently I &lt;a href=&#34;https://manhtai.github.io/posts/bye-google-hi-apple&#34;&gt;moved&lt;/a&gt; my journals to &lt;a href=&#34;https://github.com/logseq/logseq&#34;&gt;Logseq&lt;/a&gt; and I like it very much.
I use it almost everyday now. Core features are good, and the plugins market
place surpasses my expectation.&lt;/p&gt;
&lt;p&gt;Oh and I&amp;rsquo;ve written journals for the last 6 years, sometimes I want to know on
this day of some years before, what was happenning and what was I thinking. Lo
and behold, Logseq has advanced queries feature for just that!&lt;/p&gt;
&lt;p&gt;Create new page and paste this content into it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#+BEGIN_QUERY
{:title &amp;quot;On this day some years before&amp;quot;
 :query [:find (pull ?b [*])
       :in $ ?today
       :where
       [?b :block/page ?p]
       [?p :page/journal-day ?d]
       [(str ?d) ?ds]
       [(subs ?ds 4 8) ?md1]
       [(str ?today) ?td]
       [(subs ?td 4 8) ?md2]
       [(= ?md1 ?md2)]
       [(&amp;lt; ?d ?today)]
]
:inputs [:today]}
#+END_QUERY
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Logseq use &lt;a href=&#34;https://github.com/tonsky/datascript&#34;&gt;Datascript&lt;/a&gt; for database and &lt;a href=&#34;http://www.learndatalogtoday.org&#34;&gt;Datalog&lt;/a&gt; for query engine.
What I&amp;rsquo;ve done above can be translated to normal language as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scan all pages, in each page, get the journal date attribute.&lt;/li&gt;
&lt;li&gt;Convert that attribute to string, you will get something like &amp;ldquo;20220225&amp;rdquo;
which is in &amp;ldquo;yyyyMMdd&amp;rdquo; format.&lt;/li&gt;
&lt;li&gt;Take just the &amp;ldquo;MMdd&amp;rdquo; part, and compare that part with today&amp;rsquo;s &amp;ldquo;MMdd&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;Return all blocks that match today&amp;rsquo;s and having the date less than today.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Bye Google! Hi Apple!</title>
      <link>https://manhtai.github.io/posts/bye-google-hi-apple/</link>
      <pubDate>Fri, 21 Jan 2022 22:37:48 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/bye-google-hi-apple/</guid>
      <description>&lt;p&gt;Since Google &lt;a href=&#34;https://support.google.com/a/answer/2855120&#34;&gt;no longer provides&lt;/a&gt; G Suite free edition
as from May 2022, I start to migrate all my data from Google
to Apple today.&lt;/p&gt;
&lt;p&gt;My most used Google services are Mail, Keep and Photos. The
fact that you can &lt;a href=&#34;https://support.google.com/accounts/answer/3024190&#34;&gt;take out&lt;/a&gt; all your Google data makes it
very easy to move into Apple services. After downloading all
your data to your local machine, the next steps are:&lt;/p&gt;
&lt;h2 id=&#34;1-migrate-emails-from-gmail-to-apple-mail&#34;&gt;1. Migrate emails from Gmail to Apple Mail&lt;/h2&gt;
&lt;p&gt;I use some custom domain emails, so naturally I now use custom
domain for emails in iCloud for that purpose. The &lt;a href=&#34;https://support.apple.com/en-us/HT212514&#34;&gt;instruction&lt;/a&gt;
is straight forward.&lt;/p&gt;
&lt;p&gt;To import old emails, I use Mail Mac app to import &lt;code&gt;mbox&lt;/code&gt; file
which was exported from Google. It will default import emails to your
local Mac, you need to drag and drop it into iCloud tab in order to
sync with other devices.&lt;/p&gt;
&lt;h2 id=&#34;2-migrate-notes-from-google-keep-to-icloud-drive&#34;&gt;2. Migrate notes from Google Keep to iCloud Drive&lt;/h2&gt;
&lt;p&gt;Initially I intend to use Apple Notes to replace Google Keep, but
it is not a trivial process. Along the way I discover &lt;a href=&#34;https://logseq.com/&#34;&gt;Logseq&lt;/a&gt; and
immediately feel in love with that.&lt;/p&gt;
&lt;p&gt;I use Google Keep mostly to write journals, and Logseq is more than
that, it is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Personal_knowledge_management&#34;&gt;personal knowledge management system&lt;/a&gt; (PKMS), just
like a second brain of yours. The Logseq desktop app is brilliant but
it doesn&amp;rsquo;t have a mobile app yet. Fortunately, we can make &lt;a href=&#34;https://obsidian.md/&#34;&gt;Obsidian&lt;/a&gt;
mobile app to play nice with it, all sync up using iCloud drive!&lt;/p&gt;
&lt;p&gt;By the way Obsidian itself is another PKMS, I just don&amp;rsquo;t like the way
Obsidian desktop works.&lt;/p&gt;
&lt;h2 id=&#34;3-migrate-photos-from-google-photos-to-apple-photos&#34;&gt;3. Migrate photos from Google Photos to Apple Photos&lt;/h2&gt;
&lt;p&gt;I use Apple Photos Mac app to import photos from exported photos folders
from Google, and then wait for it to sync up to iCloud.&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s it! I&amp;rsquo;ve thought I could never live on the net without Google,
turn out it&amp;rsquo;s not that hard.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Auto SSL for custom domains at scale</title>
      <link>https://manhtai.github.io/posts/auto-ssl-for-custom-domains-at-scale/</link>
      <pubDate>Mon, 10 Jan 2022 21:07:10 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/auto-ssl-for-custom-domains-at-scale/</guid>
      <description>&lt;p&gt;Up to some scale, your &lt;a href=&#34;https://en.wikipedia.org/wiki/Software_as_a_service&#34;&gt;SaaS&lt;/a&gt; will have to support white-label
customers with their custom domains. And enabling &lt;a href=&#34;https://en.wikipedia.org/wiki/Transport_Layer_Security&#34;&gt;SSL&lt;/a&gt; (TLS now
actually) for them is a must. How to automate this process and
support a large number of custom domains at scale? Behold for
Caddy will come and save your day!&lt;/p&gt;
&lt;h2 id=&#34;1-what-is-caddy&#34;&gt;1. What is Caddy?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://caddyserver.com/&#34;&gt;Caddy&lt;/a&gt; is an open-source web server with automatic HTTPS written in Go.
Besides automatic HTTPS, it can also do HTTPS on demand and scale
horizontally when using a shared storage system for certificates. Popular
choices are Redis, Consul, S3 or DynamoDB.&lt;/p&gt;
&lt;h2 id=&#34;2-how-do-caddy-work&#34;&gt;2. How do Caddy work?&lt;/h2&gt;
&lt;p&gt;Our request flow will look like this:&lt;/p&gt;
&lt;p&gt;Client (browsers) =&amp;gt; Caddy server (auto &amp;amp; on-demand SSL) =&amp;gt; Your proxy server (forward requests based on custom domains) =&amp;gt; Your target server (do the real work)&lt;/p&gt;
&lt;p&gt;Simple enough, eh? On localhost, Caddyfile looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://

tls internal {
	on_demand
}

reverse_proxy 127.0.0.1:8080
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Our proxy server looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http/httputil&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/url&amp;#34;&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;remotes&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{
		&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost&amp;#34;&lt;/span&gt;:          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://www.google.com&amp;#34;&lt;/span&gt;,
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {
		&lt;span style=&#34;color:#a6e22e&#34;&gt;rawURL&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;remotes&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Host&lt;/span&gt;]
		&lt;span style=&#34;color:#a6e22e&#34;&gt;remote&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Parse&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rawURL&lt;/span&gt;)
		&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
			panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
		}

		&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Header&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;Set&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;User-Custom-Domain&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Host&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Host&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;remote&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Host&lt;/span&gt;

		&lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;httputil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewSingleHostReverseProxy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;remote&lt;/span&gt;)
		&lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)
	}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandleFunc&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;)

	&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListenAndServe&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;)
	&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
		panic(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
	}
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The target server here is google.com.&lt;/p&gt;
&lt;p&gt;Now when you visit https://localhost, it will show google.com website. Google
just got another custom domain from us with SSL!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Partial update nullable fields in Go</title>
      <link>https://manhtai.github.io/posts/golang-partial-update-nullable-fields/</link>
      <pubDate>Wed, 05 Jan 2022 19:19:55 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/golang-partial-update-nullable-fields/</guid>
      <description>&lt;p&gt;Using pointers and SELECT before UPDATE, we &lt;a href=&#34;https://manhtai.github.io/posts/golang-update-partially-and-return-fully/&#34;&gt;solved&lt;/a&gt; the partial
update problem, but leave out a minor detail: how do we set nullable
fields to NULL when the pointer will be &lt;code&gt;nil&lt;/code&gt; whether we set it to
&lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; (i.e. not send the field at all)?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Answer&lt;/strong&gt;: Use blank value as null value!&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say we got a struct like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Student&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;OnboardedAt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;1-for-null-string&#34;&gt;1. For null string&lt;/h2&gt;
&lt;p&gt;To set the &lt;code&gt;Name&lt;/code&gt; field to NULL, set it to an empty string and update
the field to NULL when that condition is satisfied. Simple enough.&lt;/p&gt;
&lt;h2 id=&#34;2-for-null-time&#34;&gt;2. For null time&lt;/h2&gt;
&lt;p&gt;To set &lt;code&gt;OnboardedAt&lt;/code&gt; field to NULL, set it to empty string, and your
code will&amp;hellip; panic! Because an empty string is not a valid time. It&amp;rsquo;s
a little bit tricky here because time doesn&amp;rsquo;t have a &amp;ldquo;blank&amp;rdquo; value,
but fortunately, it has a zero one.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s create a custom blank time instead:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BlankTime&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BlankTime&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;UnmarshalJSON&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; string(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`&amp;#34;&amp;#34;`&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;zero&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;{}
        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;BlankTime&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;zero&lt;/span&gt;}
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;tt&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Parse&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`&amp;#34;`&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RFC3339&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;`&amp;#34;`&lt;/span&gt;, string(&lt;span style=&#34;color:#a6e22e&#34;&gt;b&lt;/span&gt;))
    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;n&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;BlankTime&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;tt&lt;/span&gt;}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And rewrite our struct:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Student&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;OnboardedAt&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BlankTime&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now whenever we set the time field to an empty string, it will
get a zero value, do a check to set NULL for your time field.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Update partially and return fully in Go</title>
      <link>https://manhtai.github.io/posts/golang-update-partially-and-return-fully/</link>
      <pubDate>Fri, 31 Dec 2021 20:25:07 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/golang-update-partially-and-return-fully/</guid>
      <description>&lt;p&gt;In typical CRUD applications, it&amp;rsquo;s common these days that your update
APIs work properly on objects in a partial way. You should not enforcing
the client to send the whole object to update just a field anymore. And with
Postgres &lt;code&gt;returning&lt;/code&gt; clause, we can return all object data despite being
updated only some of them.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say you have to update a Student object, we will define all its fields
as pointers so when the client doesn&amp;rsquo;t send up anything, it will be nil:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Student&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;Age&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We must use pointers here because otherwise, we can&amp;rsquo;t differ default zero values
with not-set values that are sent from the client. To update the record, we
come up with two answers.&lt;/p&gt;
&lt;h2 id=&#34;1-case-when-with-returning&#34;&gt;1. CASE WHEN&amp;hellip; with RETURNING&lt;/h2&gt;
&lt;p&gt;In the database interface, we will choose the fields that need to update and
return all object data when done, we use &lt;code&gt;pgx&lt;/code&gt; and &lt;code&gt;scany&lt;/code&gt; package here for
executing query and scanning data back to Go struct:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/jackc/pgx/v4&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/georgysavva/scany/pgxscan&amp;#34;&lt;/span&gt;
)


&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pgx&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Connect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Background&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DATABASE_URL&amp;#34;&lt;/span&gt;))

      &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      UPDATE students
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      SET
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          name = CASE WHEN $1 = true THEN $2 ELSE name END,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          age = CASE WHEN $3 = true THEN $4 ELSE age END
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      RETURNING
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          name, age`&lt;/span&gt;

      &lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Query&lt;/span&gt;(
         &lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;,
         &lt;span style=&#34;color:#a6e22e&#34;&gt;student&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;student&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;,
         &lt;span style=&#34;color:#a6e22e&#34;&gt;student&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Age&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;student&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Age&lt;/span&gt;
      )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()

      &lt;span style=&#34;color:#a6e22e&#34;&gt;stud&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Student&lt;/span&gt;{}

      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;() {
          &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;pgxscan&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ScanRow&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stud&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt;)
      }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This solution looks OK, but we can&amp;rsquo;t validate the object with all fields
available at the same time before updating into the database. Hence the
second approach.&lt;/p&gt;
&lt;h2 id=&#34;2-select-first-update-later&#34;&gt;2. SELECT first, UPDATE later&lt;/h2&gt;
&lt;p&gt;No code is needed to explain this method. First you retrieve the object from
the database, then change those fields that need updating (non-nil fields),
do whatever validation required, and then write the whole object back.&lt;/p&gt;
&lt;p&gt;Despite we must always do a SELECT before an UPDATE, this should be the
preferred solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2021 in Review</title>
      <link>https://manhtai.github.io/posts/2021-in-review/</link>
      <pubDate>Sun, 05 Dec 2021 09:42:52 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/2021-in-review/</guid>
      <description>&lt;p&gt;Another year has come to an end, and now is the time to reflect,
and then start anew. I&amp;rsquo;ve made it to the fourth year in a &lt;a href=&#34;https://manhtai.github.io/tags/end-year/&#34;&gt;row&lt;/a&gt;
and here are some biggest marks this year.&lt;/p&gt;
&lt;h2 id=&#34;i-write-journals-almost-every-day&#34;&gt;I write journals almost every day&lt;/h2&gt;
&lt;p&gt;I have written journals since 2016, blogs long before that, but only
once in a while. After reading &amp;ldquo;Educated&amp;rdquo; by Tara Westover, I&amp;rsquo;ve
committed to taking notes of everyday stories to capture the memories
and organize my thoughts. And who knows, someday I might write a memoir
myself!&lt;/p&gt;
&lt;h2 id=&#34;i-read-more-non-technical-books&#34;&gt;I read more non-technical books&lt;/h2&gt;
&lt;p&gt;Good books are contagious, they make me want to read even more good
books. I mostly read memoirs/biography this year. Now I&amp;rsquo;m going past
the first thirty-year period of my life, I&amp;rsquo;m curious about how people
are living or have lived their lives. I might have searched for some
insights and motivation to live the rest of mine.&lt;/p&gt;
&lt;h2 id=&#34;i-changed-job-and-moved-to-a-new-city&#34;&gt;I changed job and moved to a new city&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s time for a change, back to what I have longed for, which is to
run alongside the beach, drink a cup of coffee, eat a loaf of bread
and start a new day. I also bought a mountain bike, and ride up to
the mountain in the city each morning. The road is solid, the view is
impressive, and the feeling when riding downhill with both hands in
the sky is doped (don&amp;rsquo;t try that yourself though). Because of that,
despite the COVID situation, I work out more, mostly running and biking.&lt;/p&gt;
&lt;p&gt;The new job is satisfying. The team is small and excellent at the same
time. Nothing I would ask for more.&lt;/p&gt;
&lt;h2 id=&#34;i-earned-my-first-dollars-online&#34;&gt;I earned my first dollars online&lt;/h2&gt;
&lt;p&gt;It feels good, but I have a long way to go before becoming a true indie
hacker. Building side projects is fun, it has become my recurring action
now and then.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve learned an attitude some times ago, which states that when your
habit has become a routine to improve yourself, your improvement over
time is inevitable. I guess that&amp;rsquo;s my life&amp;rsquo;s orientation for now.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s hope for another year of improvement!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Restart Golang Goroutines</title>
      <link>https://manhtai.github.io/posts/restart-golang-goroutines/</link>
      <pubDate>Fri, 12 Nov 2021 10:48:34 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/restart-golang-goroutines/</guid>
      <description>&lt;p&gt;In some cases such as &lt;a href=&#34;https://manhtai.github.io/posts/distribute-workload-in-ecs-tasks&#34;&gt;distributing the workload between ECS tasks&lt;/a&gt;, we need to
restart our workers, which are Goroutines in our case, base on the number of
ECS tasks to reassign partitions to the Goroutines on the same task.&lt;/p&gt;
&lt;p&gt;Suppose we got 100 database partitions, if we had 1 ECS task, then all the
workers on that task will be responsible for all 100 partitions. But when we
scale the service to 20 ECS tasks, each task will be responsible for only
5 partitions, hence we need to restart the Goroutines and assign them
5 partitions only.&lt;/p&gt;
&lt;p&gt;How would we do that? Here it is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;worker&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;run&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;) {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;partitions&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// Partition worker
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;partitionWorker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;partitions&lt;/span&gt;)

	&lt;span style=&#34;color:#75715e&#34;&gt;// Variable to cancel context
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;partCtx&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Context&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;partCancel&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WithCancel&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt;)

	&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; {
		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;parts&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;partitions&lt;/span&gt;:
			&lt;span style=&#34;color:#a6e22e&#34;&gt;partCancel&lt;/span&gt;()
			&lt;span style=&#34;color:#a6e22e&#34;&gt;partCtx&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;partCancel&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WithCancel&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TODO&lt;/span&gt;())
			&lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;jobWorker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;start&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;partCtx&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;parts&lt;/span&gt;)

		&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Done&lt;/span&gt;():
			&lt;span style=&#34;color:#a6e22e&#34;&gt;partCancel&lt;/span&gt;()
			&lt;span style=&#34;color:#75715e&#34;&gt;// Wait for jobWorker to finish
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;			&lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sleep&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;)
			&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
		}
	}
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;partitionWorker&lt;/code&gt; is in charge of determining the partitions that the current
ECS tasks need to work on, see the guide on how to do it &lt;a href=&#34;https://manhtai.github.io/posts/distribute-workload-in-ecs-tasks&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;jobWorker&lt;/code&gt; is the one that does the heavy lifting on specific partitions
and will be restarted whenever the partitions change.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Benchmark Postgres Index Performance</title>
      <link>https://manhtai.github.io/posts/benchmark-postgres-index-performance/</link>
      <pubDate>Tue, 02 Nov 2021 14:42:35 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/benchmark-postgres-index-performance/</guid>
      <description>&lt;h2 id=&#34;the-question&#34;&gt;The question&lt;/h2&gt;
&lt;p&gt;We had a table contains 150.000 rows and 6 text columns. We do some &lt;code&gt;select&lt;/code&gt;
query using exact match by each of the columns. 150k rows is not too much for
indexing all the 6 columns, right? Let&amp;rsquo;s do a benchmark!&lt;/p&gt;
&lt;h2 id=&#34;the-benchmark&#34;&gt;The benchmark&lt;/h2&gt;
&lt;h3 id=&#34;1-create-table&#34;&gt;1. Create table&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; bench &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;
    md5(random()::text) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; a,
    md5(random()::text) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; b,
    md5(random()::text) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;,
    md5(random()::text) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; d,
    md5(random()::text) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; e,
    md5(random()::text) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; f
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;
    generate_series(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;150000&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-select-without-index&#34;&gt;2. Select without index&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select * from bench where a = &amp;#39;a&amp;#39; and b = &amp;#39;b&amp;#39; and c = &amp;#39;c&amp;#39; and d = &amp;#39;d&amp;#39; and e = &amp;#39;e&amp;#39; order by f limit 1;&amp;#34;&lt;/span&gt; | pgbench -d postgres -t &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; -P &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -f -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;latency average = 23.562 ms
latency stddev = 0.946 ms
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3-create-index&#34;&gt;3. Create index&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;index&lt;/span&gt; bench_a &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; bench(a);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The way you choose indexes here depends on the cardinality or uniqueness of the data.
We use random data here so one index is enough, and it will perform almost exactly as
when you index all 6 columns!&lt;/p&gt;
&lt;h3 id=&#34;4-select-with-index&#34;&gt;4. Select with index&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select * from bench where a = &amp;#39;a&amp;#39; and b = &amp;#39;b&amp;#39; and c = &amp;#39;c&amp;#39; and d = &amp;#39;d&amp;#39; and e = &amp;#39;e&amp;#39; order by f limit 1;&amp;#34;&lt;/span&gt; | pgbench -d postgres -t &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; -P &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -f -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;latency average = 0.357 ms
latency stddev = 0.354 ms
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;the-answer&#34;&gt;The answer&amp;hellip;&lt;/h2&gt;
&lt;p&gt;&amp;hellip;is yes. Indexing makes your queries 66 times faster!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Get plain JSON from MongoDB in Go</title>
      <link>https://manhtai.github.io/posts/get-plain-json-from-mongodb-in-go/</link>
      <pubDate>Tue, 24 Aug 2021 11:36:35 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/get-plain-json-from-mongodb-in-go/</guid>
      <description>&lt;p&gt;When reading data from MongoDB using Go, we encounter a struct with a JSON
generic field that may be an object or an array, which itself may contain nested
objects or arrays.&lt;/p&gt;
&lt;p&gt;We only need the plain JSON in this case because we already got the parsing
code to convert the generic JSON object to specific structs.&lt;/p&gt;
&lt;p&gt;To hold unprocessed BSON, we declare our field &lt;code&gt;bson.RawValue&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bson&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RawValue&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`bson:&amp;#34;data&amp;#34;`&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To parse &lt;code&gt;Data&lt;/code&gt; field, we just need to use a trial:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bson&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;M&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bson&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;object&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unmarshal&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;object&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unmarshal&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)
        &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This should work, but it results in all &lt;code&gt;bson.M&lt;/code&gt; objects becoming &lt;code&gt;Key&lt;/code&gt;
and &lt;code&gt;Value&lt;/code&gt; object like this one:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;Value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;instead of this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is the behavior of default Mongo decoder registry, so we have to register
a new entry for &lt;code&gt;bson.M{}&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rb&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bson&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewRegistryBuilder&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;rb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RegisterTypeMapEntry&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bsontype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;EmbeddedDocument&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;reflect&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TypeOf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bson&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;M&lt;/span&gt;{}))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;final-working-version&#34;&gt;Final working version:&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rb&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bson&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewRegistryBuilder&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;rb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;RegisterTypeMapEntry&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bsontype&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;EmbeddedDocument&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;reflect&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TypeOf&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bson&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;M&lt;/span&gt;{}))
&lt;span style=&#34;color:#a6e22e&#34;&gt;reg&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rb&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Build&lt;/span&gt;()

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bson&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;M&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bson&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;A&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;object&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;UnmarshalWithRegistry&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;reg&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;m&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;e&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;object&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Data&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;UnmarshalWithRegistry&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;reg&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;)
        &lt;span style=&#34;color:#a6e22e&#34;&gt;d&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;a&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Distribute workload between ECS tasks</title>
      <link>https://manhtai.github.io/posts/distribute-workload-in-ecs-tasks/</link>
      <pubDate>Thu, 19 Aug 2021 14:04:41 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/distribute-workload-in-ecs-tasks/</guid>
      <description>&lt;p&gt;If your ECS tasks are receiving traffic from a load balancer then the workload
will be equally distributed between them. How about when we are using ECS
tasks as a worker farm to handle long running jobs? And say, we want some
workers to work on some partitions of the data but not all of them? Then each
ECS task must know their identity and the number of tasks that belong to the
same service as well.&lt;/p&gt;
&lt;h2 id=&#34;1-get-task-arn&#34;&gt;1. Get task ARN&lt;/h2&gt;
&lt;p&gt;With &lt;code&gt;${ECS_CONTAINER_METADATA_URI_V4}/task&lt;/code&gt; endpoint, we can get the task ARN
and metadata about its cluster and family. The docs are &lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-metadata-endpoint-v4.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;After sending a GET request from our container, we got:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;Cluster&amp;quot;: &amp;quot;default&amp;quot;,
    &amp;quot;TaskARN&amp;quot;: &amp;quot;arn:aws:ecs:us-west-2:111122223333:task/default/158d1c8083dd49d6b527399fd6414f5c&amp;quot;,
    &amp;quot;Family&amp;quot;: &amp;quot;curltest&amp;quot;,
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This request doesn&amp;rsquo;t require any authentication at all, as long as we send it
from our ECS task.&lt;/p&gt;
&lt;h2 id=&#34;2-list-all-tasks-in-the-same-service&#34;&gt;2. List all tasks in the same service&lt;/h2&gt;
&lt;p&gt;With &lt;code&gt;Cluster&lt;/code&gt; and &lt;code&gt;Family&lt;/code&gt; of a task, we can list all running tasks in
a service using ECS API, in this example we will use Go SDK though:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;list&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ecsClient&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListTasks&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;TODO&lt;/span&gt;(), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ecs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListTasksInput&lt;/span&gt;{
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Cluster&lt;/span&gt;:       &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Family&lt;/span&gt;:        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;curltest&amp;#34;&lt;/span&gt;,
	&lt;span style=&#34;color:#a6e22e&#34;&gt;DesiredStatus&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;types&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DesiredStatusRunning&lt;/span&gt;,
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;list.TaskArns&lt;/code&gt; contains all ARN of tasks in the service, including the task
making the request. This request does require authentication nevertheless.&lt;/p&gt;
&lt;h2 id=&#34;3-distribute-the-workload&#34;&gt;3. Distribute the workload&lt;/h2&gt;
&lt;p&gt;Now we know how many tasks we got, the problem becomes &lt;a href=&#34;https://manhtai.github.io/posts/restart-golang-goroutines&#34;&gt;easy&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Some first lessons in Go</title>
      <link>https://manhtai.github.io/posts/first-lessons-in-go/</link>
      <pubDate>Tue, 17 Aug 2021 10:02:17 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/first-lessons-in-go/</guid>
      <description>&lt;p&gt;Recently I switched to a job in which I am working mostly with the Go
language. Besides knowing the tiny set of syntax and the old-style
language flow, I&amp;rsquo;ve learned some first lessons when writing Go.&lt;/p&gt;
&lt;h2 id=&#34;1-composition-and-interfaces-are-everywhere&#34;&gt;1. Composition and interfaces are everywhere&lt;/h2&gt;
&lt;p&gt;We use composition because we should prefer composition over
inheritance and also because Go doesn&amp;rsquo;t have inheritance at all!&lt;/p&gt;
&lt;p&gt;Go does have interfaces instead, and we use them to make our code more
abstract and easier to test. The thing I don&amp;rsquo;t really like about them
is conforming to an interface is implicit, so we need help from our
IDE to know exactly which interfaces our structs are implementing.&lt;/p&gt;
&lt;h2 id=&#34;2-using-goroutines-is-not-a-trivial-task&#34;&gt;2. Using Goroutines is not a trivial task&lt;/h2&gt;
&lt;p&gt;The most important lesson I&amp;rsquo;ve learned is never firing up an arbitrary
number of Goroutines. You should limit them by using a fan-out pattern
with a determined set of workers instead.&lt;/p&gt;
&lt;p&gt;The second lesson is when not working, the Goroutines should not
consume any CPU resource, if they are, something must be wrong.&lt;/p&gt;
&lt;h2 id=&#34;3-go-is-not-thread-safe-by-default&#34;&gt;3. Go is not thread-safe by default&lt;/h2&gt;
&lt;p&gt;Go is fast, it can do many things at once, but we must be careful with
it or some nasty data result will come up and you don&amp;rsquo;t know why.&lt;/p&gt;
&lt;p&gt;This brings us to the last lesson.&lt;/p&gt;
&lt;h2 id=&#34;4-stress-testing-benchmarking-and-profiling-help&#34;&gt;4. Stress testing, benchmarking, and profiling help&lt;/h2&gt;
&lt;p&gt;Go is shipped with default benchmarking &amp;amp; profiling tools and even more
excellent community libraries to do the job. Learn to use them properly,
and never skip the stress test phase before launching your app.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;Go is fun, easy to get started, run fast, and have a small footprint,
but it won&amp;rsquo;t keep you from shooting yourself in the foot. So enjoy
writing the code, but never put 100% faith in them :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Go pprof for detecting wasted Goroutines</title>
      <link>https://manhtai.github.io/posts/go-pprof-for-detecting-wasted-goroutine/</link>
      <pubDate>Wed, 11 Aug 2021 21:12:57 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/go-pprof-for-detecting-wasted-goroutine/</guid>
      <description>&lt;h2 id=&#34;i-setup-pprof&#34;&gt;I. Setup &lt;code&gt;pprof&lt;/code&gt;&lt;/h2&gt;
&lt;h3 id=&#34;step-1-setup-the-server&#34;&gt;Step 1: Setup the server&lt;/h3&gt;
&lt;p&gt;Despite what kind of your Golang app is, add those lines of code to the
&lt;code&gt;main.go&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Add this
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;net/http/pprof&amp;#34;&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {

    &lt;span style=&#34;color:#75715e&#34;&gt;// Add this to run pprof server
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListenAndServe&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost:9999&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;))
    }()

    &lt;span style=&#34;color:#75715e&#34;&gt;// The rest is your normal code...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;step-2-visualize-the-data&#34;&gt;Step 2: Visualize the data&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# Install Google pprof visual tool&lt;/span&gt;
go get -u github.com/google/pprof

&lt;span style=&#34;color:#75715e&#34;&gt;# Visualize CPU profile for 5 seconds&lt;/span&gt;
pprof -http :9998 &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;http://:9999/debug/pprof/profile?seconds=5&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;pprof&lt;/code&gt; command will open an interactive web at http://localhost:9998 for
you to poke around.&lt;/p&gt;
&lt;h2 id=&#34;ii-look-at-the-graph&#34;&gt;II. Look at the graph&lt;/h2&gt;
&lt;p&gt;When doing nothing, our app results in this graph (part of it):&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://manhtai.github.io/profile1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Now something must be wrong with one of our &lt;code&gt;for-select&lt;/code&gt; code because we
are paying CPU time for the app to do nothing. Turn out it was a
&lt;code&gt;default: continue&lt;/code&gt; bug in a &lt;code&gt;for-select&lt;/code&gt; block.&lt;/p&gt;
&lt;p&gt;After the fix, we get:&lt;/p&gt;
&lt;p&gt;[blank]&lt;/p&gt;
&lt;p&gt;Yes, we got nothing, because when idling the app shouldn&amp;rsquo;t do anything,
hence must consume nothing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Electron with React: How to open a native dialog</title>
      <link>https://manhtai.github.io/posts/electron-react-open-native-dialog/</link>
      <pubDate>Sat, 24 Jul 2021 11:00:04 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/electron-react-open-native-dialog/</guid>
      <description>&lt;p&gt;Recently I&amp;rsquo;m building a desktop app for developers who are working with
plain text: &lt;a href=&#34;https://github.com/plainbelt/plainbelt&#34;&gt;PlainBelt&lt;/a&gt;. It uses Electron with React &lt;a href=&#34;https://github.com/electron-react-boilerplate/electron-react-boilerplate&#34;&gt;boilerplate&lt;/a&gt;
(ERB), and the old mighty &lt;strong&gt;remote&lt;/strong&gt; module &lt;a href=&#34;https://github.com/electron/electron/issues/21408&#34;&gt;won&amp;rsquo;t work&lt;/a&gt; anymore.&lt;/p&gt;
&lt;p&gt;So how can we open a native dialog without the &lt;strong&gt;remote&lt;/strong&gt; module?&lt;/p&gt;
&lt;h3 id=&#34;register-event-handler-on-the-main-process&#34;&gt;Register event handler on the Main process&lt;/h3&gt;
&lt;p&gt;In ERB, the Main filename happens to be &lt;code&gt;main.dev.ts&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ipcMain&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;open-file&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;_event&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;IpcMainInvokeEvent&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;filters&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;FileFilter&lt;/span&gt;[]) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dialog&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;showOpenDialog&lt;/span&gt;({
      &lt;span style=&#34;color:#a6e22e&#34;&gt;properties&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;openFile&amp;#39;&lt;/span&gt;],
      &lt;span style=&#34;color:#a6e22e&#34;&gt;filters&lt;/span&gt;,
    });

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buffer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;promisify&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readFile&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;filePaths&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
      &lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buffer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;();
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;;
  }
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function will open a native dialog with options that you define on
&lt;code&gt;filters&lt;/code&gt; and return an object that contains a list of file paths.
We just read the first file content and return it to the renderer.&lt;/p&gt;
&lt;h3 id=&#34;invoke-from-renderer-process&#34;&gt;Invoke from Renderer process&lt;/h3&gt;
&lt;p&gt;From a React component, we can invoke the registered handler in Main:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;setContent&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useState&lt;/span&gt;()

  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleOpen&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filters&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [{ &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Text Files&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;extensions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;txt&amp;#39;&lt;/span&gt;] }];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ipcRenderer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;invoke&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;open-file&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;filters&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;setContent&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;);
  };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We get the content back, now do whatever you want with it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Design DynamoDB Tables</title>
      <link>https://manhtai.github.io/posts/design-dynamodb-tables/</link>
      <pubDate>Mon, 05 Jul 2021 16:27:58 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/design-dynamodb-tables/</guid>
      <description>&lt;h2 id=&#34;primary-key--indexes&#34;&gt;Primary key &amp;amp; Indexes&lt;/h2&gt;
&lt;p&gt;DynamoDB is a NoSQL database, so in theory, you can store all kinds of
objects. The catch is you can specify the key to partition the data, so
you can scale out your applications horizontally, in proportion to the
numbers of partitions.&lt;/p&gt;
&lt;p&gt;There are two kinds of primary keys in a DynamoDB table, of which you
can only choose to implement one:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hash key only&lt;/strong&gt;: The hash key is also the partition key, which must
be globally unique.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hash key with a range key combination&lt;/strong&gt;: The hash key is the
partition key, which is not required to be unique, but the combination,
i.e. the primary key must be.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whichever kind of primary key you choose, the scalability is the same.
To make it works, make sure your hash keys are distributed equally in all
partitions.&lt;/p&gt;
&lt;p&gt;Besides the primary key, DynamoDB supports global secondary indexes and local
secondary indexes, so you can make your queries run fast in other dimensions
also.&lt;/p&gt;
&lt;h2 id=&#34;an-example-in-go&#34;&gt;An example in Go&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/guregu/dynamo/&#34;&gt;dynamo&lt;/a&gt; is a Golang library that makes it extremely easy to define the primary
key and indexes.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s define a &lt;code&gt;Job&lt;/code&gt; table with a primary key as the combination of &lt;code&gt;ShardId&lt;/code&gt;
and &lt;code&gt;Token&lt;/code&gt;, in which &lt;code&gt;ShardId&lt;/code&gt; is a hash key, and &lt;code&gt;Token&lt;/code&gt; is a range key:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Job&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ShardId&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;               &lt;span style=&#34;color:#e6db74&#34;&gt;`dynamo:&amp;#34;shard_id,hash&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Token&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;`dynamo:&amp;#34;date_token,range&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;`dynamo:&amp;#34;name&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;CreatedAt&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;         &lt;span style=&#34;color:#e6db74&#34;&gt;`dynamo:&amp;#34;created_at&amp;#34;`&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now to create the table, we init a DynamoDB session and create the table:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewSession&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewConfig&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dynamo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CreateTable&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Job`&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Job&lt;/span&gt;{}).&lt;span style=&#34;color:#a6e22e&#34;&gt;Run&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To query the jobs in a specific shard:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jobs&lt;/span&gt; []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Job&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Table&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Job`&lt;/span&gt;).
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shard_id&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;shardId&lt;/span&gt;).
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Filter&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;token&amp;#39; &amp;lt; ?&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;tokenId&lt;/span&gt;).
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Limit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;).
    &lt;span style=&#34;color:#a6e22e&#34;&gt;All&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jobs&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Maintain Ecto many-to-many associations in Phoenix template</title>
      <link>https://manhtai.github.io/posts/ecto-many-to-many-assoc/</link>
      <pubDate>Sun, 30 May 2021 10:54:27 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/ecto-many-to-many-assoc/</guid>
      <description>&lt;p&gt;While building Today collection feature for &lt;a href=&#34;https://github.com/memoetapp/memoet&#34;&gt;Memoet&lt;/a&gt;, I encounter a
many-to-many relation problem in Ecto: how to edit the relationship using
only Phoenix template form.&lt;/p&gt;
&lt;h2 id=&#34;the-models&#34;&gt;The models&lt;/h2&gt;
&lt;p&gt;We got a Deck model, which contains many notes of the same topic, as follow:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;schema &amp;quot;decks&amp;quot; do
  field(:name, :string)
  has_many(:notes, Note)

  timestamps()
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we create a new Collection model, which will contains many decks for us to
learn all notes in those decks at once, aka cross-deck learning:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;schema &amp;quot;collections&amp;quot; do
  field(:name, :string)

  timestamps()
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now a collection will contains many decks, and a deck may belong to many
collections, so that is a typical many-to-many relation. We define a mediate
model for that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;schema &amp;quot;decks_collections&amp;quot; do
  belongs_to(:collection, Collection)
  belongs_to(:deck, Deck)

  timestamps()
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We will work mostly from the collection onward, i.e. adding decks from one
collection, not adding collections to one deck, so we only need to add the
association to Collection model:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;schema &amp;quot;collections&amp;quot; do
  field(:name, :string)

  has_many(:decks_collections, DeckCollection, on_replace: :delete)
  has_many(:decks, through: [:decks_collections, :deck], on_replace: :delete)

  timestamps()
end

def changeset(col_or_changeset, attrs) do
  col_or_changeset
  |&amp;gt; cast(attrs, [:name])
  |&amp;gt; cast_assoc(:decks_collections)
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;cast_assoc&lt;/code&gt; in the &lt;code&gt;changeset&lt;/code&gt; function is responsible for creating new or
updating the old relations when in need. And we use &lt;code&gt;has_many&lt;/code&gt; with
&lt;code&gt;on_replace: :delete&lt;/code&gt; to replace all relations at once for that matter.&lt;/p&gt;
&lt;p&gt;If you want to add collections to a deck, define similar associations in the
Deck model.&lt;/p&gt;
&lt;p&gt;The models are all looking good now.&lt;/p&gt;
&lt;h2 id=&#34;the-template&#34;&gt;The template&lt;/h2&gt;
&lt;p&gt;To display current decks in one collection and allow users to edit the
relations, we need two lists of decks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All available decks which can be added to a collection&lt;/li&gt;
&lt;li&gt;All decks which currently belongs to a collection&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;all_decks = Deck
            |&amp;gt; Repo.all()
col_decks = collection.decks
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And in the collection&amp;rsquo;s edit template, we display the relation using checkbox
inputs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;%= for deck &amp;lt;- @all_decks do %&amp;gt;
  &amp;lt;label
    &amp;lt;input
      &amp;lt;%= if Deck.member?(@col_decks, deck), do: &amp;quot;checked&amp;quot; %&amp;gt;
      name=&amp;quot;collection[deck_ids][]&amp;quot;
      type=&amp;quot;checkbox&amp;quot;
      value=&amp;quot;&amp;lt;%= deck.id %&amp;gt;&amp;quot;
    &amp;gt;
    &amp;lt;%= deck.name %&amp;gt;
  &amp;lt;/label&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Data for &lt;code&gt;collection[deck_ids][]&lt;/code&gt; name will become &lt;code&gt;%{&amp;quot;collection&amp;quot; =&amp;gt; %{&amp;quot;deck_ids&amp;quot; =&amp;gt; [1, 2, 3]}}&lt;/code&gt; when passing to controller. And we got the deck IDs we need to keep only
these decks in the collection. So in our controller, we got:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def update(conn, %{&amp;quot;collection&amp;quot; =&amp;gt; collection_data, &amp;quot;id&amp;quot; =&amp;gt; collection_id} = _params) do
  decks_collections =
    case collection_data do
      %{&amp;quot;deck_ids&amp;quot; =&amp;gt; deck_ids} -&amp;gt;
        deck_ids
        |&amp;gt; Enum.map(fn deck_id -&amp;gt;
          %{
            &amp;quot;deck_id&amp;quot; =&amp;gt; deck_id,
            &amp;quot;collection_id&amp;quot; =&amp;gt; collection_id,
          }
        end)

      _ -&amp;gt;
        []
    end

  params = %{
    &amp;quot;decks_collections&amp;quot; =&amp;gt; decks_collections
  }

  Collection
  |&amp;gt; Repo.get!(collection_id)
  |&amp;gt; Collection.changeset(params)
  |&amp;gt; Repo.update()
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When we pass &lt;code&gt;%{&amp;quot;decks_collections&amp;quot; =&amp;gt; [%{&amp;quot;deck_id&amp;quot; =&amp;gt; 1, &amp;quot;collection_id&amp;quot; =&amp;gt; 1}]}&lt;/code&gt; to
&lt;code&gt;changeset&lt;/code&gt; function, Ecto will handle all the hard works for us, following
the rules we have defined before in our models.&lt;/p&gt;
&lt;h2 id=&#34;the-end&#34;&gt;The end&lt;/h2&gt;
&lt;p&gt;That&amp;rsquo;s it. All is done without a single line of JavaScript. Visit
&lt;a href=&#34;https://memoet.manhtai.com&#34;&gt;memoet.manhtai.com&lt;/a&gt; and see the Today collection for yourself!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>From Python to Rust, then Elixir</title>
      <link>https://manhtai.github.io/posts/from-python-to-rust-then-elixir/</link>
      <pubDate>Sat, 15 May 2021 09:42:52 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/from-python-to-rust-then-elixir/</guid>
      <description>&lt;p&gt;Recently I made &lt;a href=&#34;https://github.com/memoetapp/memoet&#34;&gt;an app&lt;/a&gt; to prepare for some kind of test I have to take.
I would have use &lt;a href=&#34;https://apps.ankiweb.net/&#34;&gt;Anki&lt;/a&gt; for this purpose but I don&amp;rsquo;t want to spend too much
time learing how to make an Anki package again. Instead, I spent much more
time to create a new alternative, but at least I&amp;rsquo;ve learned some things new.&lt;/p&gt;
&lt;h2 id=&#34;1-porting-ankis-supermemo2-from-python-to-rust&#34;&gt;1. Porting Anki&amp;rsquo;s SuperMemo2 from Python to Rust&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m not confident enough to launch my own spaced repetition algorithm yet so
I decided to use &lt;a href=&#34;https://www.supermemo.com/archives1990-2015/english/ol/sm2&#34;&gt;SuperMemo2&lt;/a&gt; in a version implemented by Anki desktop app.
The Python code is on &lt;a href=&#34;https://github.com/ankitects/anki/blob/6e954e82a5/pylib/anki/scheduler/v2.py&#34;&gt;one scheduler&lt;/a&gt; file and &lt;a href=&#34;https://github.com/ankitects/anki/blob/6e954e82a5/pylib/tests/test_schedv2.py&#34;&gt;one test&lt;/a&gt; file.&lt;/p&gt;
&lt;p&gt;First thing first, we define an interface which is the core of the algorithm:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;pub&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;trait&lt;/span&gt; Sched {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;next_interval&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self, card: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Card&lt;/span&gt;, choice: &lt;span style=&#34;color:#a6e22e&#34;&gt;Choice&lt;/span&gt;) -&amp;gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;i64&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;answer_card&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;self, card: &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mut&lt;/span&gt; Card, choice: &lt;span style=&#34;color:#a6e22e&#34;&gt;Choice&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;Card&lt;/code&gt; contains SuperMemo2&amp;rsquo;s parameters such as queue name, due time, lapses.
&lt;code&gt;Choice&lt;/code&gt; is an enum correspond to the answer we make, from &lt;strong&gt;Forgot&lt;/strong&gt; to &lt;strong&gt;Easy&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;next_interval&lt;/code&gt; shows estimated time to recall the card if we make a choice,
&lt;code&gt;answer_card&lt;/code&gt; is the real action when we make that choice.&lt;/p&gt;
&lt;p&gt;The next following steps are to translate Python functions to Rust methods one by
one. It is quite a smooth process, I feel like I am just adding type annotations
to Python code instead of writing new Rust code. The result is &lt;a href=&#34;https://github.com/memoetapp/memoet/blob/master/native/sm2/src/srs/scheduler.rs&#34;&gt;a new Rust&lt;/a&gt;
file, look quite the same as the old Python one.&lt;/p&gt;
&lt;h2 id=&#34;2-expose-rust-api-to-elixir-phoenix-app&#34;&gt;2. Expose Rust API to Elixir Phoenix app&lt;/h2&gt;
&lt;p&gt;After having myself a spaced repetition package, I need to bring it to life.
To tell the truth, I chose Rust to port to because I know I can import it from
almost anywhere through &lt;a href=&#34;https://doc.rust-lang.org/1.2.0/book/rust-inside-other-languages.html&#34;&gt;Foreign Function Interface&lt;/a&gt; (FFI).&lt;/p&gt;
&lt;p&gt;For no &lt;a href=&#34;https://www.erlang-solutions.com/blog/why-elixir-is-the-programming-language-you-should-learn-in-2020/&#34;&gt;specific reasons&lt;/a&gt;, let&amp;rsquo;s make an Elixir app!&lt;/p&gt;
&lt;p&gt;We use &lt;a href=&#34;https://github.com/rusterlium/rustler&#34;&gt;Rustler&lt;/a&gt; to build the bridge between Rust code and Erlang NIFs. The
setup is quite simple. After some times, we get a new Elixir module with the
APIs we need:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;defmodule Memoet.SRS.Sm2 do
  @moduledoc &amp;quot;&amp;quot;&amp;quot;
  Sm2 API, calling Rust code
  When your NIF is loaded, it will override those functions below.
  &amp;quot;&amp;quot;&amp;quot;

  use Rustler, otp_app: :memoet, crate: &amp;quot;sm2&amp;quot;
  alias Memoet.SRS.{Config, Scheduler, Card, Choices}

  @spec new(Config.t(), integer(), integer()) :: Scheduler.t()
  def new(_config, _day_cut_off, _day_today), do: error()

  @spec next_interval(Card.t(), Scheduler.t(), Choices.t()) :: integer()
  def next_interval(_card, _scheduler, _choice), do: error()

  @spec answer_card(Card.t(), Scheduler.t(), Choices.t()) :: Card.t()
  def answer_card(_card, _scheduler, _choice), do: error()
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Another way would work is to compile Rust code to Wasm, and then import it from
anywhere support Wasm runtime.&lt;/p&gt;
&lt;h2 id=&#34;3-summary&#34;&gt;3. Summary&lt;/h2&gt;
&lt;p&gt;Rust is reducing the gap between languages. Maintaining the core logic in Rust
if possible should be considered as a wise choice.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Java RSA SHA512 sign &amp; verify</title>
      <link>https://manhtai.github.io/posts/java-rsa-encrypt-decrypt/</link>
      <pubDate>Fri, 14 May 2021 20:51:28 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/java-rsa-encrypt-decrypt/</guid>
      <description>&lt;p&gt;Idea: Generate a pool of signatures to sign &amp;amp; verify concurrently.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.nio.charset.StandardCharsets&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.nio.file.Files&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.nio.file.Paths&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.security.KeyFactory&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.security.PrivateKey&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.security.PublicKey&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.security.Signature&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.security.spec.PKCS8EncodedKeySpec&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.security.spec.X509EncodedKeySpec&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; java.util.Base64&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;


&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RSASignAndVerify&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; POOL &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;2 &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; 6&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Signature&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; signSignatures &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Signature&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;POOL&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;final&lt;/span&gt; Signature&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; verifySignatures &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; Signature&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;POOL&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;RSASignAndVerify&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String publicKeyPath&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String privateKeyPath&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            KeyFactory kf &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; KeyFactory&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;RSA&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

            PrivateKey privateKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; kf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;generatePrivate&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PKCS8EncodedKeySpec&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;executorAuthUtil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;loadPem&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                            Files&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newInputStream&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Paths&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;privateKeyPath&lt;span style=&#34;color:#f92672&#34;&gt;)))));&lt;/span&gt;

            PublicKey publicKey &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; kf&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;generatePublic&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                    &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; X509EncodedKeySpec&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;executorAuthUtil&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;loadPem&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                            Files&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newInputStream&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Paths&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;publicKeyPath&lt;span style=&#34;color:#f92672&#34;&gt;)))));&lt;/span&gt;

            &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; signSignatures&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;length&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                signSignatures&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Signature&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SHA512WithRSA&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                verifySignatures&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Signature&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getInstance&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;SHA512WithRSA&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                signSignatures&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;initSign&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;privateKey&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                verifySignatures&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;i&lt;span style=&#34;color:#f92672&#34;&gt;].&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;initVerify&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;publicKey&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            log&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;error&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Init signature error&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; e&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;


    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Signature &lt;span style=&#34;color:#a6e22e&#34;&gt;getSignSignature&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; POOL&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; signSignatures&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;idx&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; Signature &lt;span style=&#34;color:#a6e22e&#34;&gt;getVerifySignature&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Thread&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;currentThread&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; POOL&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; verifySignatures&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;idx&lt;span style=&#34;color:#f92672&#34;&gt;];&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;sign&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Signature signature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getSignSignature&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;signature&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                signature&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                var sign &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; String&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getEncoder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;encode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;signature&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sign&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()));&lt;/span&gt;
                userNotification&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setSign&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sign&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;verify&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; String sign&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        Signature signature &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; getVerifySignature&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;signature&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                signature&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                var sign &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Base64&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;getDecoder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;decode&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sign&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; signature&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;verify&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;sign&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>NodeJS worker patterns</title>
      <link>https://manhtai.github.io/posts/nodejs-worker-patterns/</link>
      <pubDate>Thu, 13 May 2021 19:45:08 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/nodejs-worker-patterns/</guid>
      <description>&lt;p&gt;Sometimes we just need to run a separated worker to process long running jobs in
NodeJS, what are our options?&lt;/p&gt;
&lt;p&gt;First step is to put the heavy actions into a queue. The second step is to run
a poller to pull out the messages and execute theme one by one.&lt;/p&gt;
&lt;p&gt;What can we do to max out those worker performance?&lt;/p&gt;
&lt;h3 id=&#34;1-fork-a-child-process&#34;&gt;1, Fork a child process&lt;/h3&gt;
&lt;p&gt;NodeJS &lt;a href=&#34;https://nodejs.org/api/child_process.html&#34;&gt;supports&lt;/a&gt; spinning off a new child process from the main one.
It&amp;rsquo;s too expensive so we shouldn&amp;rsquo;t use it. It sure has uses on its own though.&lt;/p&gt;
&lt;h3 id=&#34;2-fire-up-worker-threads&#34;&gt;2, Fire up Worker threads&lt;/h3&gt;
&lt;p&gt;From Node 10, &lt;code&gt;worker_threads&lt;/code&gt; is &lt;a href=&#34;https://nodejs.org/api/worker_threads.html&#34;&gt;supported&lt;/a&gt;, the code is trivial enough:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const {
  Worker, isMainThread, parentPort, workerData
} = require(&#39;worker_threads&#39;);

if (isMainThread) {
  module.exports = function parseJSAsync(script) {
    return new Promise((resolve, reject) =&amp;gt; {
      const worker = new Worker(__filename, {
        workerData: script
      });
      worker.on(&#39;message&#39;, resolve);
      worker.on(&#39;error&#39;, reject);
      worker.on(&#39;exit&#39;, (code) =&amp;gt; {
        if (code !== 0)
          reject(new Error(`Worker stopped with exit code ${code}`));
      });
    });
  };
} else {
  const { parse } = require(&#39;some-js-parsing-library&#39;);
  const script = workerData;
  parentPort.postMessage(parse(script));
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These workers are useful for performing CPU-intensive tasks, not much effects
for IO operations.&lt;/p&gt;
&lt;h3 id=&#34;3-eventemitter&#34;&gt;3, EventEmitter&lt;/h3&gt;
&lt;p&gt;Who would have thought about &lt;a href=&#34;https://nodejs.org/api/events.html&#34;&gt;that&lt;/a&gt;?&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const EventEmitter = require(&#39;events&#39;);

const myWorker = new EventEmitter();

myWorker.on(&#39;poll&#39;, () =&amp;gt; {
  console.log(&#39;Go and do work&#39;);

  myWorker.emit(&#39;poll&#39;);
});


myWorker.emit(&#39;poll&#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We could fire up as many &lt;code&gt;EventEmitter&lt;/code&gt; as we want and keep them doing the
work for us.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a design system with Tailwind and Storybook</title>
      <link>https://manhtai.github.io/posts/building-design-system-with-tailwind-storybook/</link>
      <pubDate>Fri, 07 May 2021 20:52:25 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/building-design-system-with-tailwind-storybook/</guid>
      <description>&lt;p&gt;If you don&amp;rsquo;t already know what a design system is, Storybook &lt;a href=&#34;https://storybook.js.org/tutorials/design-systems-for-developers/react/en/introduction/&#34;&gt;tutorial&lt;/a&gt;
on design system is a good place to start.&lt;/p&gt;
&lt;p&gt;In short, design systems contain reusable UI components that help teams
build complex, durable, and accessible user interfaces across projects.
Storybook is a tool for us to do just that.&lt;/p&gt;
&lt;p&gt;Our experience in this process as follows:&lt;/p&gt;
&lt;h4 id=&#34;1-generate-full-tailwindcss-configuration-then-matching-it-with-design-tokens&#34;&gt;1, Generate full Tailwindcss configuration, then matching it with design tokens&lt;/h4&gt;
&lt;p&gt;We need to fine tune colors, spacing, font sizes and screens at first hand,
the rest can be updated later. The job is quite boring as we have to input
numbers manually from Figma to &lt;code&gt;tailwind.config.js&lt;/code&gt; file, but it is one-off
job so just do it anyway.&lt;/p&gt;
&lt;h4 id=&#34;2-build-ui-components-in-storybook-one-by-one&#34;&gt;2, Build UI components in Storybook, one by one&lt;/h4&gt;
&lt;p&gt;This can be built in batch if you had the resources or whenever in need.&lt;/p&gt;
&lt;h4 id=&#34;3-publish-storybook-as-private-npm-package&#34;&gt;3, Publish Storybook as private npm package&lt;/h4&gt;
&lt;p&gt;We use GitLab package registry to do that. Every releases will be auto published to
the registry as well as the Storybook web for showcase purpose.&lt;/p&gt;
&lt;h4 id=&#34;4-install-the-package-and-reuse-ui-components-in-other-projects&#34;&gt;4, Install the package and reuse UI components in other projects&lt;/h4&gt;
&lt;p&gt;For local development, you can use &lt;code&gt;npm link&lt;/code&gt; to link local Storybook project with
the project you are working on without having to publish the package consecutively.&lt;/p&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;For any project started out with a design team to spare, TailwindCSS is
pefectly fit for setting up a &amp;ldquo;style API&amp;rdquo; with predefined variables such as colors
or spacing. Along with Storybook for building reusable components and we got
a design system good enough to make our product UI/UX experience become consistent
at scale.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2020 in Review</title>
      <link>https://manhtai.github.io/posts/2020-in-review/</link>
      <pubDate>Thu, 31 Dec 2020 21:10:51 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/2020-in-review/</guid>
      <description>&lt;p&gt;What a year!&lt;/p&gt;
&lt;p&gt;Covid-19 changed the world. We in Vietnam are luckly not in the disaster as in
many countries, and I feel grateful for that. Despite some upshots, I can say
that I have quite a year to remember.&lt;/p&gt;
&lt;h3 id=&#34;as-usual-coding-first&#34;&gt;As usual, coding first.&lt;/h3&gt;
&lt;p&gt;In the beginning of the year, I continue to
improvise my Java skill to take on a technical lead role for a development
team. Although I did some kind of team lead before, this is the first time
I pick up a new language, take on the challenges and pull myself up the
ladders in a short time span, learn many useful things along the way and most
importantly, having funs while doing that! My team was a fun team, I can joke
around and everybody laugh, work my ass off and everybody clap. I will never
forget those good memories I had with these people&amp;hellip;&lt;/p&gt;
&lt;p&gt;In the middle of the year, I changed my job. It was not just any arbitrary
decision, but thoroughly I feel that the kind of work I want to do was not
the work that I was doing at the time. I want something that can make me feel
actual joyful, or, should I say, more meaningful to work with?&lt;/p&gt;
&lt;p&gt;Emotions aside, the new job I took on was kind of the one I would like to be
mine. Yeah, not that &amp;ldquo;aside&amp;rdquo; really, but I found many sparks that I thought
I would never get it before. I learned more about front end development
stuffs, UI/UX patterns, more on how to build and grow a software product,
marketing shits, on and on. That was really awesome. This job would steer me
in the career direction I would never think of before, but now it is more
clearly to conceive.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://manhtai.github.io/posts/2019-in-review&#34;&gt;2019&lt;/a&gt;, I thought that AI/ML would be my things
this year, but it never was. This year I reckon that SaaS would be my best,
but who knows?&lt;/p&gt;
&lt;h3 id=&#34;reading-second&#34;&gt;Reading second.&lt;/h3&gt;
&lt;p&gt;Maybe the same as last year, but now I kept track of it, and know exactly the
estimated number of books I have read in this year: 30 or so. Mostly
technical, the one I liked most is &amp;ldquo;How to Fail at Almost Everything and Still
Win Big&amp;rdquo;. It inspires me a lot and makes me feel better about myself as well
as the decisions that I made.&lt;/p&gt;
&lt;h3 id=&#34;running-third&#34;&gt;Running third.&lt;/h3&gt;
&lt;p&gt;Not so much this year. Only 200+ kilometers. Some lock-downs and the very bad
air quality in Hanoi are to blame, but I gain nothing doing that. In January
1st I had very a breathtaking hiking trip to Ky Quan San mountain. I did not
know it was so hard to climb up the mightly peak, but I did it! We will be
doing this again next year, January 2nd, in another mountain, it would be more
easy but I am more ready now anyway. Wish me luck!&lt;/p&gt;
&lt;h3 id=&#34;some-more-tiny-things-i-want-to-jot-down-anyway&#34;&gt;Some more tiny things I want to jot down anyway&amp;hellip;&lt;/h3&gt;
&lt;p&gt;I practiced some fasting this year, mostly 16/8 intermittent fasting and feel
good about it. I mean I don&amp;rsquo;t feel anything bad about it, so it must be good,
right? I will continue doing that next year to keep myself thin and my stomach
rested.&lt;/p&gt;
&lt;p&gt;I invested some. But I should be focus on bulding something more than to think
about how make my money get bigger by moving it around. I will have to do that
eventually, but maybe not in the right time right now.&lt;/p&gt;
&lt;p&gt;I upgraded my iPhone SE 1st generation to 2nd generation, my macbook pro from
13&amp;quot; early 2015 to 16&amp;quot; 2019. They both served me for 5 years and became too
old. I like the new ones more now, especially the 16, it rocks!&lt;/p&gt;
&lt;p&gt;2021 starts tomorrow. Let&amp;rsquo;s welcome it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup CORS for S3 and Cloudfront</title>
      <link>https://manhtai.github.io/posts/setup-cors-for-s3-and-cloudfront/</link>
      <pubDate>Fri, 04 Dec 2020 20:53:21 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/setup-cors-for-s3-and-cloudfront/</guid>
      <description>&lt;p&gt;CORS problem arises in one of our apps because static files return from
CloudFront do not allow CORS. Specifically, they do not return following
header:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;Access-Control-Allow-Origin: *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem is, we&amp;rsquo;ve setup CloudFront and S3 to support CORS as mentioned in
&lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html&#34;&gt;the docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In S3 bucket rules, we have:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
    {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;AllowedHeaders&amp;#34;&lt;/span&gt;: [
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization&amp;#34;&lt;/span&gt;
        ],
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;AllowedMethods&amp;#34;&lt;/span&gt;: [
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;
        ],
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;AllowedOrigins&amp;#34;&lt;/span&gt;: [
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;
        ],
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ExposeHeaders&amp;#34;&lt;/span&gt;: [],
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;MaxAgeSeconds&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;20000&lt;/span&gt;
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In CloudFront, we have:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;Cache and origin request settings: Use a cache policy and origin request policy
Cache Policy                     : Managed-CachingOptimized
Origin Request Policy            : Managed-CORS-S3Origin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All looks good, but our problem persists.&lt;/p&gt;
&lt;p&gt;Continue following &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html&#34;&gt;the docs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How does Amazon S3 evaluate the CORS configuration on a bucket?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;When Amazon S3 receives a preflight request from a browser, it evaluates the
CORS configuration for the bucket and uses the first CORSRule rule that matches
the incoming browser request to enable a cross-origin request. For a rule to
match, the following conditions must be met:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The request&amp;rsquo;s Origin header must match an AllowedOrigin element.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The request method (for example, GET or PUT) or the Access-Control-Request-Method
header in case of a preflight OPTIONS request must be one of the AllowedMethod elements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Every header listed in the request&amp;rsquo;s Access-Control-Request-Headers header on the
preflight request must match an AllowedHeader element.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We inspect the GET request that the browser makes to get the static files and
observe that the request header does not include &lt;code&gt;Origin&lt;/code&gt; in the first request
send to CloudFront, and CloudFront does not send back
&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header.&lt;/p&gt;
&lt;p&gt;After the first request, CloudFront will cache the response header, and even
if the browser send the &lt;code&gt;Origin&lt;/code&gt; request header next time, it still does not send back
&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; response header.&lt;/p&gt;
&lt;p&gt;The solution is quite simple than we thought, we create a new cache policy with
&lt;code&gt;Origin&lt;/code&gt; be one of the cache keys (the only different one from &lt;code&gt;Managed-CachingOptimized&lt;/code&gt;
policy), then the problem goes away.&lt;/p&gt;
&lt;p&gt;This works fine if the origin number is small as in our case.&lt;/p&gt;
&lt;p&gt;There are two other ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1, Use Lambda@Edge to set the necessary header.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2, Override origin header from CloudFront to a dummy one.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2, feels a little bit hacky but it might be the best solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup TailwindCSS for React</title>
      <link>https://manhtai.github.io/posts/setup-tailwindcss-for-react/</link>
      <pubDate>Sun, 01 Nov 2020 15:10:07 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/setup-tailwindcss-for-react/</guid>
      <description>&lt;h2 id=&#34;1-basic-setup&#34;&gt;1. Basic setup&lt;/h2&gt;
&lt;p&gt;After installing TailwindCSS and doing &lt;a href=&#34;https://tailwindcss.com/docs/installation&#34;&gt;the basic setup&lt;/a&gt;, you need
PostCSS-CLI to build out &lt;code&gt;main.css&lt;/code&gt;, setup some commands in &lt;code&gt;package.json&lt;/code&gt;
to do that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;start&amp;quot;: &amp;quot;npm run watch:css &amp;amp;&amp;amp; react-scripts start&amp;quot;,
    &amp;quot;build&amp;quot;: &amp;quot;npm run build:css &amp;amp;&amp;amp; react-scripts build&amp;quot;,
    &amp;quot;deploy&amp;quot;: &amp;quot;NODE_ENV=production npm run build&amp;quot;,
    &amp;quot;test&amp;quot;: &amp;quot;react-scripts test&amp;quot;,
    &amp;quot;eject&amp;quot;: &amp;quot;react-scripts eject&amp;quot;,
    &amp;quot;watch:css&amp;quot;: &amp;quot;postcss src/css/tailwind.css -o src/css/main.css&amp;quot;,
    &amp;quot;build:css&amp;quot;: &amp;quot;postcss src/css/tailwind.css -o src/css/main.css&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Don&amp;rsquo;t forget to import &lt;code&gt;main.css&lt;/code&gt; in your React index file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &#39;./css/main.css&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2-install-font-family&#34;&gt;2. Install font family&lt;/h2&gt;
&lt;p&gt;Choose your favorite font from a &lt;code&gt;fontsouce-*&lt;/code&gt; package and extend Tailwind
config, I choose &amp;lsquo;Nunito&amp;rsquo;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theme: {
  extend: {
    fontFamily: {
      sans: [&amp;quot;Nunito&amp;quot;, ...defaultTheme.fontFamily.sans]
    }
  },
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remember to include the font in your index file, too:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &#39;fontsource-nunito&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3-set-default-color&#34;&gt;3. Set default color&lt;/h2&gt;
&lt;p&gt;If you don&amp;rsquo;t want black as your default text body color, override it in
plugins config, I choose &lt;code&gt;blue-900&lt;/code&gt; as my default color, so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  plugins: [
    plugin(function({ addBase, config }) {
      addBase({
        &#39;body&#39;: { color: config(&#39;theme.colors.blue.900&#39;) },
      })
    })
  ],
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4-purge-unused-css&#34;&gt;4. Purge unused CSS&lt;/h2&gt;
&lt;p&gt;Full size of TailwindCSS is around 2MB, but you rarely use it all, TailwindCSS
&lt;a href=&#34;https://tailwindcss.com/docs/controlling-file-size&#34;&gt;official guide&lt;/a&gt; recommends not to use string concatenation to create class
names, but if you still want to do that, use whitelist patterns to bypass the
cleaning.&lt;/p&gt;
&lt;p&gt;For example if I want to keep all colors for background and text:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  purge: {
    content: [
      &amp;quot;./src/**/*.{ts,tsx,html}&amp;quot;,
    ],
    options: {
      whitelistPatterns: [/^bg-/, /^text-/],
    },
  },
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can find my full setup for my &lt;a href=&#34;https://metaboard.net&#34;&gt;new React app&lt;/a&gt; in &lt;a href=&#34;https://github.com/manhtai/metaboard&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reset Css Animation</title>
      <link>https://manhtai.github.io/posts/reset-css-animation/</link>
      <pubDate>Tue, 04 Aug 2020 16:46:11 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/reset-css-animation/</guid>
      <description>&lt;p&gt;There is no easy way to reset CSS animation when it starts playing, we have at
least 2 &amp;ldquo;hacky&amp;rdquo; ways though.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1, Nested &lt;code&gt;requestAnimationFrame()&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is the tip from &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Tips&#34;&gt;Mozilla&lt;/a&gt;, use a nested &lt;code&gt;requestAnimationFrame()&lt;/code&gt; to
trigger re-render animation&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function play() {
  document.querySelector(&amp;quot;.box&amp;quot;).className = &amp;quot;box&amp;quot;;
  window.requestAnimationFrame(function(time) {
    window.requestAnimationFrame(function(time) {
      document.querySelector(&amp;quot;.box&amp;quot;).className = &amp;quot;box changing&amp;quot;;
    });
  });
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;2, Trigger reflow using Element APIs et al:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;var el = document.querySelector(&amp;quot;.box&amp;quot;)
el.className = &amp;quot;box&amp;quot;;
el.focus() // Or el.offsetLeft, el.offsetRight, etc
el.className = &amp;quot;box changing&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Have fun with CSS animation!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Flux&lt;Databuffer&gt; to InputStream</title>
      <link>https://manhtai.github.io/posts/flux-databuffer-to-inputstream/</link>
      <pubDate>Sat, 11 Apr 2020 10:08:00 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/flux-databuffer-to-inputstream/</guid>
      <description>&lt;p&gt;How can we convert a &lt;code&gt;Flux&amp;lt;DataBuffer&amp;gt;&lt;/code&gt;, say, in a Spring&amp;rsquo;s &lt;code&gt;FilePart.content()&lt;/code&gt;
when uploading data, into a &lt;code&gt;InputStream&lt;/code&gt; for consuming?&lt;/p&gt;
&lt;p&gt;By using pipes!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;InputStream &lt;span style=&#34;color:#a6e22e&#34;&gt;getInputStreamFromFluxDataBuffer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Flux&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;DataBuffer&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; data&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    PipedOutputStream osPipe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PipedOutputStream&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    PipedInputStream isPipe &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; PipedInputStream&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;osPipe&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;

    DataBufferUtils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;data&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; osPipe&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;subscribeOn&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;Schedulers&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;elastic&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;doOnComplete&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                    osPipe&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;IOException ignored&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;})&lt;/span&gt;
            &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;subscribe&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;DataBufferUtils&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;releaseConsumer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; isPipe&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code is quite trivial, but some notes worth mentioning here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1, We need to subscribe on another Thread by using &lt;code&gt;Schedulers.elastic()&lt;/code&gt; to
avoid blocking.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2, We need to close the &lt;code&gt;PipedOutputStream&lt;/code&gt; when we finished, so downstream
subscriber will know when to stop.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3, &lt;code&gt;DataBufferUtils.write()&lt;/code&gt; start writing as soon as the Flux from output
stream is subscribed to, so we use &lt;code&gt;DataBufferUtils.releaseConsumer()&lt;/code&gt; to
start the writing immediately.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2019 in Review</title>
      <link>https://manhtai.github.io/posts/2019-in-review/</link>
      <pubDate>Wed, 18 Dec 2019 22:04:55 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/2019-in-review/</guid>
      <description>&lt;p&gt;Another year comes to an end. It will finish the race in about 2 weeks, but I
feel that I can wrap up the year today. 2019 isn&amp;rsquo;t really a step up for me but
I can say that it is full of joys and I&amp;rsquo;ve learnt so much.&lt;/p&gt;
&lt;h2 id=&#34;1-coding&#34;&gt;1. Coding&lt;/h2&gt;
&lt;p&gt;Java is the main theme of this year. I started the year with some Java basis
in Data Engineer and now I&amp;rsquo;m confident with Java at work as a Java Backend
Engineer.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve learn so much things about how to structure a Spring Boot project, how
to do JWT authentication, wire beans, how to write unit tests and integration
tests using &lt;a href=&#34;https://site.mockito.org/&#34;&gt;Mockito&lt;/a&gt;, &lt;a href=&#34;https://www.h2database.com&#34;&gt;H2&lt;/a&gt; and &lt;a href=&#34;https://flywaydb.org/&#34;&gt;Flyway&lt;/a&gt;, how to optimize query using
&lt;a href=&#34;https://en.wikipedia.org/wiki/Java_Persistence_Query_Language&#34;&gt;JPQL&lt;/a&gt; in combination with &lt;a href=&#34;https://docs.spring.io/spring-integration/docs/current/reference/html/spel.html&#34;&gt;SPEL&lt;/a&gt;, write &lt;a href=&#34;https://docs.gitlab.com/ee/ci/&#34;&gt;Gitlab CI&lt;/a&gt; config to deploy
Spring boot app to K8s cluster, oh and foremost, write a formal
&lt;a href=&#34;https://en.wikipedia.org/wiki/Software_architecture#Design&#34;&gt;Software Architecture Design&lt;/a&gt; document and request its approval,&amp;hellip;&lt;/p&gt;
&lt;p&gt;All of it happens too fast that I have to try hard to ingest all Java
things and still have time to learn some Rust, Angular and React Hooks on
the side.&lt;/p&gt;
&lt;p&gt;Now I can say that I&amp;rsquo;m fluent in Java, Python and Javascript, and that should
keep me quite competitive in the IT market for a while.&lt;/p&gt;
&lt;p&gt;Next year maybe, I will learn some Kotlin and do some native works on Android.
I&amp;rsquo;ve done some React Native &lt;a href=&#34;https://manhtai.github.io/posts/print-unicode-to-thermal-printer-using-react-native/&#34;&gt;before&lt;/a&gt; but it&amp;rsquo;s just a hybrid stuff, so I
think I can get the real deal this time.&lt;/p&gt;
&lt;p&gt;ML and AI will be on my top choices for things to start again in 2020 and we
will see.&lt;/p&gt;
&lt;h2 id=&#34;2-running&#34;&gt;2. Running&lt;/h2&gt;
&lt;p&gt;Not so much this year, because of extremely bad air quality in Hanoi. I&amp;rsquo;m
disappointed about the authorities but I can&amp;rsquo;t do anything about it. (We will
talk about this later.)&lt;/p&gt;
&lt;h2 id=&#34;3-reading&#34;&gt;3. Reading&lt;/h2&gt;
&lt;p&gt;Mostly technical books, as I can&amp;rsquo;t learn new things in tech without tech
books. I&amp;rsquo;ve read some non-fictions of course. The most interesting books
I find so far is two books of Mark Manson about not giving a fuck and
happiness. They inspire me so much about life and love. That you should only
care about what you love, and happy is just a state of mind. You want to find
the gold buried, keep up the dig.&lt;/p&gt;
&lt;p&gt;Another book about life meaning is Man&amp;rsquo;s Search for Meaning, which is good
and teach you to have at least one big goal in your life all the time, so you
don&amp;rsquo;t die (i.e. give up) till you achieve it.&lt;/p&gt;
&lt;p&gt;I read some business books, too. Shoe Dog, McDonald&amp;rsquo;s: Behind The Arches, they
tell us the way Americans build their dreams.&lt;/p&gt;
&lt;p&gt;It is the 5th year in coding career for me, now the limit is only what I can
dream of.&lt;/p&gt;
&lt;p&gt;Hope for a meaningful 2020 to come!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why I love writing SQL in Spring Boot apps</title>
      <link>https://manhtai.github.io/posts/write-raw-sql-in-spring-boot-app/</link>
      <pubDate>Wed, 30 Oct 2019 23:03:19 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/write-raw-sql-in-spring-boot-app/</guid>
      <description>&lt;p&gt;Why do we have to write raw SQL in the ORM world? Because it&amp;rsquo;s efficient,
elegant and type safety. Who wouldn&amp;rsquo;t want that? Efficient, you may nod
slightly, but elegant and type safety, aren&amp;rsquo;t it? Yes it is, if you use
&lt;a href=&#34;https://en.wikipedia.org/wiki/Java_Persistence_Query_Language&#34;&gt;JPQL&lt;/a&gt; in combination with &lt;a href=&#34;https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#expressions&#34;&gt;SpEL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;JPQL uses the entity object models instead of database tables to define a
query. It is not really raw SQL you might say, but it got all the syntax of
a raw SQL query. And because it is based on entity models, it is strong type
and it ensure type safety for us (i.e it won&amp;rsquo;t start application if we use
wrong type in our query).&lt;/p&gt;
&lt;p&gt;In addition to that, we can use SpEL to write expressions directly in queries
using a subset of Java code. Let&amp;rsquo;s take a look at an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Repository&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;NotificationRepository&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;extends&lt;/span&gt; JpaRepository&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Notification&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Long&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Query&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; SELECT new NotificationResponse(&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;   n.id, n.title,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;   CASE&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;     WHEN (u.id IS NULL) THEN FALSE&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;     ELSE u.isRead END,&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;   n.createTime) &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; FROM Notification n &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; LEFT JOIN UserNotification u ON &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;   u.notificationId = n.id&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;   AND u.userId = :#{#filter.userId}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;   AND u.userType = :#{#filter.receiverType}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; WHERE &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;   n.receiverType = :#{#filter.receiverType}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; GROUP BY n.id&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34; ORDER BY n.createTime DESC&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    Page&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;NotificationResponse&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getNotifications&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;NotificationFilter filter&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; Pageable pageable&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here &lt;strong&gt;Notification&lt;/strong&gt; and &lt;strong&gt;UserNotification&lt;/strong&gt; are two entity models
corresponding to two tables in database and we can join them using ON
condition as in raw SQL. All statements may look familiar to you, except some
weird &lt;code&gt;:#{#filter.fieldName}&lt;/code&gt; annotations. They are SpEL expressions that use
Java reflection to inject field values of notification filter into the query.
You can use either private field names or public get methods to get the values
out of filter param.&lt;/p&gt;
&lt;p&gt;Something else worth noting here is we don&amp;rsquo;t need to specify &lt;code&gt;COUNT&lt;/code&gt; query,
JPA will do that for us, but we can customize it of course, and sometime it is
a must.&lt;/p&gt;
&lt;p&gt;The last parameter of &lt;code&gt;getNotifications()&lt;/code&gt; method is a Pageable instance, JPA
will automatically using &lt;code&gt;LIMIT&lt;/code&gt; and &lt;code&gt;OFFSET&lt;/code&gt; to do pagination for us, hence
the returning type of the query is &lt;code&gt;Page&amp;lt;NotificationResponse&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I am very comfortable with writing queries in SQL so I am very happy with this
setup, and I hope you will enjoy it too: the magic of Spring (and JPA)!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spring Websocket Server</title>
      <link>https://manhtai.github.io/posts/spring-websocket-server/</link>
      <pubDate>Wed, 30 Oct 2019 22:32:20 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/spring-websocket-server/</guid>
      <description>&lt;p&gt;To include a WebSocket endpoint to our Spring Boot application, first you need
to include the starter package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-websocket&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To configure WebSocket server, we need to define a configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;@EnableWebSocketMessageBroker&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;WebSocketConfig&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;implements&lt;/span&gt; WebSocketMessageBrokerConfigurer &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;registerStompEndpoints&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;StompEndpointRegistry registry&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        registry&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addEndpoint&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/websocket&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;addInterceptors&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; HandshakeInterceptor&lt;span style=&#34;color:#f92672&#34;&gt;())&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setAllowedOrigins&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;withSockJS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;configureMessageBroker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MessageBrokerRegistry config&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        config&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;enableSimpleBroker&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/channel&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;configureClientInboundChannel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ChannelRegistration registration&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        registration&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;interceptors&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ChannelInterceptor&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;registerStompEndpoints()&lt;/strong&gt; is the method to register endpoints for our
WebSocket server, in which the first HTTP handshake happens. Here we can use
a &lt;code&gt;HanshakeInterceptor()&lt;/code&gt; to insert some custom attributes for using when
first WebSocket interaction initializes, for example the WebSocket endpoint
path.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;configureMessageBroker()&lt;/strong&gt; is used to add channel paths, so our WebSocket
clients can subscribe to.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;configureClientInboundChannel()&lt;/strong&gt; is where WebSocket connection make first
CONNECT request, then SUBSCRIBE to a channel, etc. &lt;code&gt;ChannelInterceptor()&lt;/code&gt; is
the place for authorization &amp;amp; authentication our users before sending and
receiving messages. In here we can get the attributes we&amp;rsquo;ve set before in
&lt;code&gt;HandshakeInterceptor()&lt;/code&gt; instance. Bear in mind that because we do auth in
first CONNECT request of WebSocket connection, we have to make the WebSocket
endpoints whitelisted in any auth required matchers (Spring Security matchers
for instance).&lt;/p&gt;
&lt;p&gt;Believe or not, that is all we need to setup a WebSocket server, you now can
setup a WebSocket handler and enjoy the magic of Spring.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Spring WebClient Oauth2 with Client Credentials</title>
      <link>https://manhtai.github.io/posts/spring-webclient-oauth2-client-credentials/</link>
      <pubDate>Fri, 18 Oct 2019 20:16:17 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/spring-webclient-oauth2-client-credentials/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/reactive/function/client/WebClient.html&#34;&gt;Spring 5 WebClient&lt;/a&gt; is an excellent web client for Spring that can do
reactive API request. Combining with Spring Security Oauth2 Client we can
handle the heavy jobs (ie. request access token, check expiry time, re-request
access token, etc) to Spring Security Oauth2 Client and still had all the
benefits of the reactive web client.&lt;/p&gt;
&lt;p&gt;First thing first, we need to include the libraries:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-webflux&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.security&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-security-oauth2-client&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then define the beans to use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Oauth2ClientConfig&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;
    ReactiveClientRegistrationRepository &lt;span style=&#34;color:#a6e22e&#34;&gt;getRegistration&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
            &lt;span style=&#34;color:#a6e22e&#34;&gt;@Value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${spring.security.oauth2.client.provider.my-platform.token-uri}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; String tokenUri&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#a6e22e&#34;&gt;@Value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${spring.security.oauth2.client.registration.my-platform.client-id}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; String clientId&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#a6e22e&#34;&gt;@Value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${spring.security.oauth2.client.registration.my-platform.client-secret}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; String clientSecret&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color:#a6e22e&#34;&gt;@Value&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;${spring.security.oauth2.client.registration.my-platform.scopes}&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; String scope
    &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        ClientRegistration registration &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ClientRegistration
                &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;withRegistrationId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my-platform&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;tokenUri&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;tokenUri&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clientId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;clientId&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;clientSecret&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;clientSecret&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;authorizationGrantType&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;AuthorizationGrantType&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;CLIENT_CREDENTIALS&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;scope&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;scope&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; InMemoryReactiveClientRegistrationRepository&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;registration&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Bean&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my-platform&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
    WebClient &lt;span style=&#34;color:#a6e22e&#34;&gt;webClient&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;ReactiveClientRegistrationRepository clientRegistrations&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        ServerOAuth2AuthorizedClientExchangeFilterFunction oauth &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; ServerOAuth2AuthorizedClientExchangeFilterFunction&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;
                clientRegistrations&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; UnAuthenticatedServerOAuth2AuthorizedClientRepository&lt;span style=&#34;color:#f92672&#34;&gt;());&lt;/span&gt;
        oauth&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setDefaultClientRegistrationId&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my-platform&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; WebClient&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;builder&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;oauth&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Some things worth noting here are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1, The parameters in &lt;code&gt;@Value&lt;/code&gt; are default configurations for Spring Security
Oauth2 Client to work (ie. autowiring), so with some luck you can make it work
without define a bean for &lt;code&gt;ReactiveClientRegistrationRepository&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2, &lt;code&gt;WebClient&lt;/code&gt; bean is qualified with &lt;code&gt;&amp;quot;my-platform&amp;quot;&lt;/code&gt; so it will not conflict
with other web clients that you may use in your project.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3, I used &lt;code&gt;AuthorizationGrantType.CLIENT_CREDENTIALS&lt;/code&gt; here, but it should
work with any authorization grant types.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4, I use &lt;strong&gt;constructor injection&lt;/strong&gt; instead of &lt;strong&gt;field injection&lt;/strong&gt; and it
is considered better practice, you should read more about that.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we can use the WebClient as we are used to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Service&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyPlatformServiceClient&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; WebClient webClient&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; String resourceUri&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@Autowired&lt;/span&gt;
    PlatformServiceClientImpl&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Qualifier&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;my-platform&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; WebClient webClient&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;
                              String resourceUri&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;webClient&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; webClient&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;resourceUri&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; resourceUri&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; CompletableFuture&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MyResourceModel&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getResource&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String resourceId&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; webClient&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;uri&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;resourceUri&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X-Resource-ID&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; resourceId&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;header&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;retrieve&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bodyToMono&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;MyResourceModel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;toFuture&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can read more about Spring Security Webflux Oauth2 &lt;a href=&#34;https://docs.spring.io/spring-security/site/docs/current/reference/html/webflux-oauth2.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enjoy the magic of Spring!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debezium Kafka Connect on Kubernetes</title>
      <link>https://manhtai.github.io/posts/debezium-kafka-connect-kubernetes/</link>
      <pubDate>Sat, 15 Jun 2019 18:53:01 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/debezium-kafka-connect-kubernetes/</guid>
      <description>&lt;p&gt;In recent projects we had an usecase about streaming data from MySQL to
Kafka, and from that it can go wherever we want. We choose &lt;a href=&#34;https://debezium.io/docs/connectors/mysql/&#34;&gt;Debezium&lt;/a&gt;
as a MySQL source connector for &lt;a href=&#34;https://docs.confluent.io/current/connect/index.html&#34;&gt;Kafka Connect&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;From Debezium website, we could easily find out what it does:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Debezium&amp;rsquo;s MySQL Connector can monitor and record all of the row-level
changes in the databases on a MySQL server or HA MySQL cluster. The
first time it connects to a MySQL server/cluster, it reads a consistent
snapshot of all of the databases. When that snapshot is complete, the
connector continuously reads the changes that were committed to MySQL
and generates corresponding insert, update and delete events. All of
the events for each table are recorded in a separate Kafka topic, where
they can be easily consumed by applications and services.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now to deploy Debezium connector to Kubernetes, there are 3 things we need to
keep in mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1, Kafka Connect container must join your Kafka cluster to do the work.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2, We can pre-build Debezium connector in Kafka Connect image (or vice
versa), but we have to manually create new Kafka Connect source using REST
API.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3, We can do the 2nd thing automatically when deploying to K8s.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;t get started!&lt;/p&gt;
&lt;p&gt;This is the Dockerfile for Kafka Connect with Debezium MySQL connector:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM debezium/connect-base:0.9

ENV DEBEZIUM_VERSION=&amp;quot;0.9.5.Final&amp;quot; \
    MAVEN_REPO_CORE=&amp;quot;https://repo1.maven.org/maven2&amp;quot; \
    MAVEN_DEP_DESTINATION=$KAFKA_CONNECT_PLUGINS_DIR \
    MYSQL_MD5=720b1396358fbdc59bce953f47d3c53f

RUN docker-maven-download debezium mysql &amp;quot;$DEBEZIUM_VERSION&amp;quot; &amp;quot;$MYSQL_MD5&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you want to use connector with other databases such as MongoDB, Postgresql,
Sqlserver, Oracle,&amp;hellip; find the Dockerfile in &lt;a href=&#34;https://github.com/debezium/docker-images/blob/master/connect/0.9/Dockerfile&#34;&gt;Debezium docker images repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now a sample MySQL source configuration file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# File: mysql-source.json
{
  &amp;quot;name&amp;quot;: &amp;quot;inventory-connector&amp;quot;,
  &amp;quot;config&amp;quot;: {
    &amp;quot;connector.class&amp;quot;: &amp;quot;io.debezium.connector.mysql.MySqlConnector&amp;quot;,
    &amp;quot;database.hostname&amp;quot;: &amp;quot;192.168.99.100&amp;quot;,
    &amp;quot;database.port&amp;quot;: &amp;quot;3306&amp;quot;,
    &amp;quot;database.user&amp;quot;: &amp;quot;debezium&amp;quot;,
    &amp;quot;database.password&amp;quot;: &amp;quot;dbz&amp;quot;,
    &amp;quot;database.server.id&amp;quot;: &amp;quot;184054&amp;quot;,
    &amp;quot;database.server.name&amp;quot;: &amp;quot;fullfillment&amp;quot;,
    &amp;quot;database.whitelist&amp;quot;: &amp;quot;inventory&amp;quot;,
    &amp;quot;database.history.kafka.bootstrap.servers&amp;quot;: &amp;quot;kafka:9092&amp;quot;,
    &amp;quot;database.history.kafka.topic&amp;quot;: &amp;quot;dbhistory.fullfillment&amp;quot;,
    &amp;quot;include.schema.changes&amp;quot;: &amp;quot;true&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To automatically create a new source after starting new K8s pod, we must add
a new init script to our docker image which will wait for our Kafka Connect
service go online before excecuting a &lt;code&gt;curl&lt;/code&gt; request to create a new source:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# File: init.sh
echo &amp;quot;Wait for kafka connect...&amp;quot;
until $(curl --output /dev/null --silent --head --fail http://172.17.0.1:8083); do
    printf &#39;.&#39;
    sleep 5
done

echo &amp;quot;Install connector...&amp;quot;
curl -i -X POST -H &amp;quot;Accept:application/json&amp;quot; -H  &amp;quot;Content-Type:application/json&amp;quot; http://172.17.0.1:8083/connectors/ -d @/kafka/init/mysql-source.json
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Here, &lt;code&gt;172.17.0.1&lt;/code&gt; is default localhost IP address for Docker guest container,
&lt;code&gt;8083&lt;/code&gt; is the listening port of Kafka Connect.&lt;/p&gt;
&lt;p&gt;We create a new entry point file for our image to run the &lt;code&gt;init.sh&lt;/code&gt; script in
the background and waiting for Kafka Connect to go online.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# File: entrypoint.sh
/kafka/init/init.sh &amp;amp;
exec /docker-entrypoint.sh start
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;/docker-entrypoint.sh&lt;/code&gt; is the default entrypoint of Debezium connect image.&lt;/p&gt;
&lt;p&gt;Now all are good, we have the final Dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM debezium/connect-base:0.9

ENV DEBEZIUM_VERSION=&amp;quot;0.9.5.Final&amp;quot; \
    MAVEN_REPO_CORE=&amp;quot;https://repo1.maven.org/maven2&amp;quot; \
    MAVEN_DEP_DESTINATION=$KAFKA_CONNECT_PLUGINS_DIR \
    MYSQL_MD5=720b1396358fbdc59bce953f47d3c53f

RUN docker-maven-download debezium mysql &amp;quot;$DEBEZIUM_VERSION&amp;quot; &amp;quot;$MYSQL_MD5&amp;quot;

# Init script to create mysql source after starting container
RUN mkdir -p /kafka/init
COPY init.sh /kafka/init/
COPY mysql-source.json /kafka/init/

ENTRYPOINT [&amp;quot;/kafka/init/entrypoint.sh&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s it. Write up your k8s config and deploy the Kafka Connect pod to your
cluster!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2018 in Review</title>
      <link>https://manhtai.github.io/posts/2018-in-review/</link>
      <pubDate>Sun, 30 Dec 2018 22:12:09 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/2018-in-review/</guid>
      <description>&lt;p&gt;A year has come to an end, and now is the time to look back.&lt;/p&gt;
&lt;p&gt;This year I&amp;rsquo;ve learned and run a lot, fail some.&lt;/p&gt;
&lt;h2 id=&#34;1-coding&#34;&gt;1. Coding&lt;/h2&gt;
&lt;p&gt;I have found new things to learn through all the year, some of them worth
mentioning here are:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Things I&amp;rsquo;ve learned:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Go&lt;/em&gt;, then build a &lt;a href=&#34;https://manhtai.github.io/posts/chat-app-in-golang/&#34;&gt;chat app&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Cryptography&lt;/em&gt;, taught by a brilliant &lt;a href=&#34;https://manhtai.github.io/posts/8-weeks-crypto-write-up/&#34;&gt;teacher&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Google Cloud Platform&lt;/em&gt;, for work&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Apache Airflow &amp;amp; Apache Beam&lt;/em&gt; for data ingestion (I should write a blog
about these)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Design patterns&lt;/em&gt; in Java&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Go and Java are two more programming languages that are in my belt now, love
to use both of them so far.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Things I&amp;rsquo;ve dropped:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Operating System&lt;/em&gt; class&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Computer Vision&lt;/em&gt; class&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first one is too hard, the second one is not attracted to me anymore, so I
decided to quit early.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Things I am going to learn:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;MOOC&lt;/em&gt;: Create a programming course in Vietnamese&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you may know, I&amp;rsquo;m a self-taught developer, hence it will never be enough for
me to learn how to code. But I think it might come the time that I am
certified to reteach what I&amp;rsquo;ve learned to those people who just be like me
when I started. Hope I will learn new things along the way, too.
&lt;a href=&#34;https://techcamp.vn&#34;&gt;techcamp.vn&lt;/a&gt; is registered and ready to go live. Stay tuned!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Microservices&lt;/em&gt;: Building microservices in Go and Java&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;ve built many monolith applications and none of microservices, so I will try
to build one next year.&lt;/p&gt;
&lt;h2 id=&#34;2-running&#34;&gt;2. Running&lt;/h2&gt;
&lt;p&gt;I love running. This year I completed 2 full marathons, one in Danang and
another one in Hanoi. I trained hard for the first one, not too hard for
the second, because I found out that Hanoi&amp;rsquo;s air quality is extremely bad for
your health. Now I only go to run when &lt;a href=&#34;http://aqicn.org/city/vietnam/hanoi/us-embassy/&#34;&gt;AQI&lt;/a&gt; is bad for sensitive people
group (!?) or lower.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t have much hope for the improvement of air quality in Hanoi next year,
so I may not keep the record up. I really feel bad about this.&lt;/p&gt;
&lt;h2 id=&#34;3-reading&#34;&gt;3. Reading&lt;/h2&gt;
&lt;p&gt;I read technical books a lot, I&amp;rsquo;ve subscribed to &lt;a href=&#34;https://safaribooksonline.com&#34;&gt;Safaribooksonline&lt;/a&gt; so
I can read as many books as I want. Video tutorials are quite good, too.&lt;/p&gt;
&lt;p&gt;Some non-technical books I&amp;rsquo;ve read this year include &amp;ldquo;Sapiens: A Brief
History of Humankind&amp;rdquo;, &amp;ldquo;Zero to One: Notes on Startups, or How to Build the
Future&amp;rdquo;, and some that I can&amp;rsquo;t remember.&lt;/p&gt;
&lt;p&gt;Next year I will keep track of all non-technical books I read in Goodreads so
I will have some things to write in the year end post.&lt;/p&gt;
&lt;p&gt;2018 is a satisfied year for me. More chances in 2019 for me to explore. Can&amp;rsquo;t
wait!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dockerize Django Vue web app</title>
      <link>https://manhtai.github.io/posts/django-vue-docker/</link>
      <pubDate>Fri, 24 Aug 2018 22:42:47 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/django-vue-docker/</guid>
      <description>&lt;p&gt;Recently I&amp;rsquo;ve fired up multiple Django projects for my company. Most of them
follow a typical setup with Nginx + Gunicorn + Supervisord in a big Ubuntu
virtual machine. I must say that the setup works quite well, but sometimes,
when having not much more work to do, I strike for better by trying to
dockerize them.&lt;/p&gt;
&lt;h2 id=&#34;1-dockerize-django-vue-app-with-nginx--gunicorn&#34;&gt;1) Dockerize Django-Vue app with Nginx &amp;amp; Gunicorn&lt;/h2&gt;
&lt;p&gt;I want to start with an app that has Vue as frontend. This method works with
all frontend frameworks, it just happens that we use Vue. The Vue part has a
separate repo so backend and frontend developers can work simultaneously. But
to build the docker image in the easiest way I put them into one by using git
submodule.&lt;/p&gt;
&lt;p&gt;To build frontend part, I use &lt;code&gt;node:8&lt;/code&gt; image:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM node:8 as frontend

RUN mkdir /code
WORKDIR /code
ADD ./frontend /code/
RUN npm install yarn &amp;amp;&amp;amp; yarn &amp;amp;&amp;amp; yarn run build
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I use &lt;code&gt;python:3.7-slim-stretch&lt;/code&gt; to build backend, install &lt;code&gt;nginx&lt;/code&gt;,
&lt;code&gt;supervisord&lt;/code&gt; to the same image. Note that Nginx and Supervisord
configuration must be customized to run inside a Docker container.
You can refer to &lt;a href=&#34;https://github.com/tiangolo/uwsgi-nginx-docker/blob/master/python3.6-alpine3.7/Dockerfile&#34;&gt;uwsgi-nginx-docker&lt;/a&gt; repo for more insights.&lt;/p&gt;
&lt;p&gt;In case you still wonder, I use Supervisord to run Gunicorn and Nginx.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM python:3.7-slim-stretch

# Install wget, gnupg to get nginx
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y wget gnupg

RUN echo &amp;quot;deb http://nginx.org/packages/mainline/debian/ stretch nginx&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list
RUN wget https://nginx.org/keys/nginx_signing.key -O - | apt-key add - &amp;amp;&amp;amp; \
  apt-get update &amp;amp;&amp;amp; \
  apt-get install -y nginx supervisor &amp;amp;&amp;amp; \
  rm -rf /var/lib/apt/lists/*

# Remove wget, gnupg
RUN apt-get purge -y --auto-remove wget gnupg

# Add code folder
RUN mkdir /code
WORKDIR /code
ADD . /code/

# Nginx configuration
RUN echo &amp;quot;daemon off;&amp;quot; &amp;gt;&amp;gt; /etc/nginx/nginx.conf
RUN rm /etc/nginx/conf.d/default.conf
COPY deploy/nginx_docker.conf /etc/nginx/conf.d/nginx_docker.conf

# Supervisor configuration
COPY deploy/supervisor_docker.conf /etc/supervisor/conf.d/supervisor_docker.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I use &lt;a href=&#34;https://pipenv.readthedocs.io/&#34;&gt;pipenv&lt;/a&gt; instead of requirements file to manage dependencies:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Install python lib dep
RUN pip install pipenv
RUN pipenv install --system --deploy
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After that, collect staticfiles and expose them:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Set env to production
ENV DJANGO_SETTINGS_MODULE myapp.settings.production

# Collect static files
RUN (cd myapp; python manage.py collectstatic --noinput)

VOLUME [&amp;quot;/code/myapp/public&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then copy frontend code from frontend build image to our main image:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;COPY --from=frontend /code/dist/ /code/dist/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And lastly, expose port for running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;EXPOSE 80 443

CMD [&amp;quot;/usr/bin/supervisord&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That&amp;rsquo;s it. We&amp;rsquo;ve had a Dockerfile that contains all frontend, backend and
a web server ready to use.&lt;/p&gt;
&lt;p&gt;The reality that we can&amp;rsquo;t build our Docker images by hands takes us to a CD
tool, and which tool should it be?&lt;/p&gt;
&lt;h2 id=&#34;2-cd-pipeline-using-droneio&#34;&gt;2) CD pipeline using Drone.io&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;ve had some experience in writting Jenkinsfile for CD pipeline. It works
most of the time when I already had a Jenkins server running. But it costs me
hours and hours trying to set up a working Jenkins server in AWS, and then
I just quit. Some googling around, I found &lt;a href=&#34;https://drone.io&#34;&gt;Drone.io&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The setup is dead simple, just one &lt;code&gt;docker-compose.yml&lt;/code&gt; file and you got
a https CD server ready in minutes. I just fall in love with it immediately.&lt;/p&gt;
&lt;p&gt;My config file is this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version: &#39;2&#39;

services:
  drone-server:
    image: drone/drone:0.8

    ports:
      - 80:80
      - 443:443
      - 9000:9000
    volumes:
      - ${HOME}/drone-data:/var/lib/drone/
    restart: always
    environment:
      - DRONE_OPEN=true
      - DRONE_ORGS=myteam
      - DRONE_ADMIN=myusername
      - DRONE_HOST=${DRONE_HOST}
      - DRONE_BITBUCKET=true
      - DRONE_BITBUCKET_CLIENT=${DRONE_BITBUCKET_CLIENT}
      - DRONE_BITBUCKET_SECRET=${DRONE_BITBUCKET_SECRET}
      - DRONE_SECRET=${DRONE_SECRET}
      - DRONE_LETS_ENCRYPT=true

  drone-agent:
    image: drone/agent:0.8

    command: agent
    restart: always
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_SERVER=drone-server:9000
      - DRONE_SECRET=${DRONE_SECRET}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You don&amp;rsquo;t need nginx or something like just, just &lt;code&gt;docker-compose up -d&lt;/code&gt; and
it&amp;rsquo;s set. I wish all web applications are just simple as that!&lt;/p&gt;
&lt;p&gt;Now you must define a &lt;code&gt;.drone.yml&lt;/code&gt; file in your web server project, and it is
dead simple, too.&lt;/p&gt;
&lt;p&gt;Here is the script for building the Docker image and then push it to AWS ECR:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;clone:
  git:
    image: plugins/git
    recursive: true
    # Override here so you don&#39;t have to edit it in your repo
    submodule_override:
      frontend: https://bitbucket.org/myteam/myapp.git

pipeline:
  ecr:
    image: plugins/ecr
    repo: &amp;lt;account-id&amp;gt;.dkr.ecr.ap-southeast-1.amazonaws.com/myapp
    registry: &amp;lt;account-id&amp;gt;.dkr.ecr.ap-southeast-1.amazonaws.com
    secrets: [ ecr_access_key, ecr_secret_key ]
    region: ap-southeast-1

  slack:
    image: plugins/slack
    channel: drone
    secrets: [ slack_webhook ]
    when:
      status: [ success, failure ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And now in our server, &lt;code&gt;docker-compose.yml&lt;/code&gt; file is now very simple:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version: &#39;2&#39;

services:
  myapp:
    image: &amp;lt;account-id&amp;gt;.dkr.ecr.ap-southeast-1.amazonaws.com/myapp:latest

    ports:
      - 80:80
      - 443:443
    restart: always
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that to pull images from ECR, you may need an &lt;a href=&#34;https://github.com/awslabs/amazon-ecr-credential-helper&#34;&gt;ECR credential helper&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;3-conclusion&#34;&gt;3) Conclusion&lt;/h2&gt;
&lt;p&gt;Now to start your server, you just need to run &lt;code&gt;docker-compose up -d&lt;/code&gt; and it&amp;rsquo;s
set! Our Django app is just like a typical Golang app: one Docker image and
nothing more.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve crossed out some things here so you can find out for yourself:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;- Add test step to Drone pipeline (if you had some!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;- Add deploy step to Drone pipeline so it can be complete.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;- Use another container scheduling and management system like &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;
instead of Docker compose.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How to print Unicode text to a Thermal printer using React Native</title>
      <link>https://manhtai.github.io/posts/print-unicode-to-thermal-printer-using-react-native/</link>
      <pubDate>Sat, 23 Jun 2018 21:17:15 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/print-unicode-to-thermal-printer-using-react-native/</guid>
      <description>&lt;p&gt;In previous &lt;a href=&#34;https://manhtai.github.io/posts/building-erp-using-django-react-native&#34;&gt;post&lt;/a&gt; about using React Native to build our own ERP app, I&amp;rsquo;ve
mentioned about printing Vietnamese characters to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Thermal_printing&#34;&gt;thermal printer&lt;/a&gt;, in
this post I will show you how to do it.&lt;/p&gt;
&lt;p&gt;Although this post is about printing Vietnamese using React Native, you must
keep in mind that it is not only apply to Vietnamese and React Native, but
for any &lt;em&gt;native&lt;/em&gt; mobile framework to print Unicode characters to a thermal
printer. Just make sure your language is supported in thermal printer &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_page&#34;&gt;code
page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Firstly, you must get a library to print arbitrary characters to a thermal
printer. We used &lt;a href=&#34;https://github.com/rusel1989/react-native-bluetooth-serial&#34;&gt;react-native-bluetooth-serial&lt;/a&gt; for our ERP app.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s API for printing out a message as simple as this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;BluetoothSerial&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;String &lt;span style=&#34;color:#a6e22e&#34;&gt;data&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Secondly, you must know that a thermal printer will support some kind of
ESC/POS commands for parameterizing printed characters, like changing
font family, font size, barcode printing, etc. Depending on what thermal
printer manufacturer you are using, it will have some groups of commands that
we can use, for example, we can find ECS/POS reference about Epson printer
&lt;a href=&#34;http://content.epson.de/fileadmin/content/files/RSD/downloads/escpos.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So all we need to print out Vietnamese characters is to send out some
commands to set up the printer for using Vietnamese font and &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_page&#34;&gt;code page&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Our thermal printer does support only TCVN3 code page, so we must encode our
Unicode message to TCVN3, and then just print it out, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// We use iconv to convert Unicode message to TCVN3
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TCVN3message&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;iconv&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;encode&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;message&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;tcvn&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#75715e&#34;&gt;// [0x1b, 0x74, 48] is POS command for set up TCVN3 code page
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;TCVN3codepage&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;([&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1b&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x74&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;48&lt;/span&gt;]);

&lt;span style=&#34;color:#75715e&#34;&gt;// Push write command to Promise array
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;writePromises&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [];
&lt;span style=&#34;color:#a6e22e&#34;&gt;writePromises&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;BluetoothSerial&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;TCVN3codepage&lt;/span&gt;));
&lt;span style=&#34;color:#a6e22e&#34;&gt;writePromises&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;push&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;BluetoothSerial&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;TCVN3message&lt;/span&gt;));

&lt;span style=&#34;color:#75715e&#34;&gt;// Print out messages
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;Promise.&lt;span style=&#34;color:#a6e22e&#34;&gt;all&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;writePromises&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;
&lt;p&gt;Using ESC/POS commands, we can customize our printing format even more, like
font size, font weight, etc. Another longer ESC/POS reference can be found
&lt;a href=&#34;http://www.aures-support.fr/DATA/utility/Commande%20ESCPOS.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A minor thing to note is that some printer will not default to character font
A for us, so the text might get too little or too large. You can use a command
to set it to character font A, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;characterFontA&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Buffer&lt;/span&gt;([&lt;span style=&#34;color:#ae81ff&#34;&gt;0x1b&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0x21&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Have fun printing things out!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>8 weeks Crypto write up</title>
      <link>https://manhtai.github.io/posts/8-weeks-crypto-write-up/</link>
      <pubDate>Fri, 25 May 2018 20:17:49 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/8-weeks-crypto-write-up/</guid>
      <description>&lt;p&gt;After planing for &lt;a href=&#34;https://manhtai.github.io/posts/12-weeks-onto-crypto&#34;&gt;12 weeks onto Crypto&lt;/a&gt;, I&amp;rsquo;ve tried to read &lt;a href=&#34;https://www.amazon.com/exec/obidos/ASIN/0470474246/counterpane/&#34;&gt;the book&lt;/a&gt;,
but without luck: I don&amp;rsquo;t understand things quite clear, if not nothing at
all. And then I found &lt;a href=&#34;https://www.youtube.com/channel/UC1usFRN4LCMcfIV7UjHNuQg/videos&#34;&gt;this course&lt;/a&gt; by Christof Paar, in companion with his
book: &lt;a href=&#34;https://github.com/manhtai/understanding-cryptography&#34;&gt;Understanding Cryptography&lt;/a&gt;. The course &amp;amp; the book are just
brilliant!&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s very easy to understand hard concepts which are explained by the
professor. The course includes 24 videos, one for each week of study, but
I finish it within 8 weeks. It&amp;rsquo;s extremely intense and I can&amp;rsquo;t say my brain
takes it all, but I&amp;rsquo;ve learned so much, some are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Symmetric cipher: DES, AES&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Three families of asymmetric cryptography: integer factorization (RSA),
discrete log (DH, Elgamal) &amp;amp; elliptic curves (ECDH)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Digital signatures &amp;amp; Hash functions&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;ve done &lt;a href=&#34;https://github.com/manhtai/understanding-cryptography&#34;&gt;some&lt;/a&gt; of the problems using Go. I&amp;rsquo;ve left out many problems
which are related to calculating the time neccessary to brute-force a cipher,
and some more. That is something I am lack of, basic knowledge about
&lt;strong&gt;Operating System&lt;/strong&gt;. It&amp;rsquo;s not just what parts the computer is built from,
it&amp;rsquo;s about how it really works.&lt;/p&gt;
&lt;p&gt;So I guess it&amp;rsquo;s 12 weeks more, to dig down in Operating System.&lt;/p&gt;
&lt;p&gt;See you then :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Drain ECS instances before scaling down in EC2</title>
      <link>https://manhtai.github.io/posts/drain-ecs-before-scaling-in-ec2/</link>
      <pubDate>Mon, 21 May 2018 17:33:18 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/drain-ecs-before-scaling-in-ec2/</guid>
      <description>&lt;h2 id=&#34;the-problem&#34;&gt;The problem&lt;/h2&gt;
&lt;p&gt;We have 2 independent auto scaling systems: EC2 auto scaling groups which
scales instances number &amp;amp; ECS auto scaling which scales tasks number. This
setup may work fine when scaling up. Still, if new tasks need more instances
to start up, it must wait for them, but it&amp;rsquo;s ok to wait a little.&lt;/p&gt;
&lt;p&gt;But things soon become disaster when EC2 instances terminates &lt;strong&gt;before&lt;/strong&gt;
ECS tasks draining out.&lt;/p&gt;
&lt;p&gt;Actually, ECS instances will not auto drain to be ready for terminating
instances in EC2, so don&amp;rsquo;t expect anything. We have to set that up manually.&lt;/p&gt;
&lt;h2 id=&#34;the-solution&#34;&gt;The solution&lt;/h2&gt;
&lt;p&gt;An AWS official &lt;a href=&#34;https://aws.amazon.com/blogs/compute/how-to-automate-container-instance-draining-in-amazon-ecs/&#34;&gt;blog&lt;/a&gt; shows us how to do this, and it has a nice demo for
newly created EC2 &amp;amp; ECS setup. But what if we just want to set up for our
running ECS instances? Here it is.&lt;/p&gt;
&lt;p&gt;Firstly, make sure you know what &lt;a href=&#34;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html&#34;&gt;lifecycle hooks&lt;/a&gt; are. Then follow these
steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1, Create a lambda function using this &lt;a href=&#34;https://gist.github.com/manhtai/66dfdae56ebce7b6270788018516a409&#34;&gt;script&lt;/a&gt;. It is my fork of AWS
sample &lt;a href=&#34;https://github.com/aws-samples/ecs-cid-sample/blob/master/code/index.py&#34;&gt;script&lt;/a&gt;, but sucks less.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2, Set role for our lambda function to have these permissions:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;- autoscaling:CompleteLifecycleAction
- logs:CreateLogGroup
- logs:CreateLogStream
- logs:PutLogEvents
- ec2:DescribeInstances
- ec2:DescribeInstanceAttribute
- ec2:DescribeInstanceStatus
- ec2:DescribeHosts
- ecs:ListContainerInstances
- ecs:SubmitContainerStateChange
- ecs:SubmitTaskStateChange
- ecs:DescribeContainerInstances
- ecs:UpdateContainerInstancesState
- ecs:ListTasks
- ecs:DescribeTasks
- sns:Publish
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;3, Setup an SNS trigger for the function, choose a name for it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;4, Setup a service role so Auto Scaling Groups can push to SNS, using &lt;a href=&#34;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html#sns-notifications&#34;&gt;this
guide&lt;/a&gt;. (This is quite interesting because you have to set up a role so
that a service will have some kind of permission).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;5, Create a lifecycle hook by CLI, since the &lt;strong&gt;GUI is not fully supported
yet&lt;/strong&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;aws autoscaling put-lifecycle-hook
  --lifecycle-hook-name EcsWebScaleDown
  --auto-scaling-group-name ecs-web
  --lifecycle-transition autoscaling:EC2_INSTANCE_TERMINATING
  --heartbeat-timeout 900
  --notification-target-arn arn:aws:sns:ap-southeast-1:XXXXXXXXXXXX:EcsInstanceDrain
  --role-arn arn:aws:iam::XXXXXXXXXXXX:role/AutoScalingNotificationRole
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It should be good now, as advertised :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python 2to3 Transition</title>
      <link>https://manhtai.github.io/posts/python-2to3-transition/</link>
      <pubDate>Sat, 21 Apr 2018 12:05:19 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/python-2to3-transition/</guid>
      <description>&lt;p&gt;Recently I&amp;rsquo;ve upgraded one of our biggest projects from Python2.7 to Python3.6,
and the process is quite smooth. It tooks me almost 2 days to complete all
conversion needed, while other developers were still doing their dail jobs in
the project.&lt;/p&gt;
&lt;p&gt;Steps I made:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1, Run &lt;code&gt;2to3&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2, Fix the code so that all the tests passes again.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;3, Handle outlier cases &amp;amp; write tests for them. Those cases are somewhat
related to the diffirences between &lt;code&gt;unicode&lt;/code&gt; &amp;amp; &lt;code&gt;str&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some key notes here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1, Having a solid unit tests system is critical.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2, &lt;code&gt;2to3&lt;/code&gt; did all the heavy works, but you need to know the stuffs to get all
the shit done.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Memory Leak in Celery</title>
      <link>https://manhtai.github.io/posts/memory-leak-in-celery/</link>
      <pubDate>Sun, 15 Apr 2018 10:51:06 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/memory-leak-in-celery/</guid>
      <description>&lt;p&gt;Turn out Celery has &lt;a href=&#34;https://github.com/celery/celery/issues/1427&#34;&gt;some memory leaks&lt;/a&gt;. We don&amp;rsquo;t know that beforehand.
After deploying some Celery servers using AWS ECS we notice that all Celery
tasks will consume most of the server memory and then become idle.&lt;/p&gt;
&lt;p&gt;My first attempt was set &lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html&#34;&gt;hard limit&lt;/a&gt; for container memory to 1GiB. And
guess what? Celery will consume 99.9% of that limit then become idle after
some times. It&amp;rsquo;s good for the server but doesn&amp;rsquo;t solve our problem.&lt;/p&gt;
&lt;p&gt;My second attempt was set &lt;code&gt;CELERYD_TASK_TIME_LIMIT&lt;/code&gt; to 300, so celery tasks
will be killed after 5 minutes no matter what. This time Celery continue to
take memory percentage as much as it can and then become inactive, but after
5 minutes it kills all the tasks to release memory and then back to work
normally.&lt;/p&gt;
&lt;p&gt;I thought it worked, but it didn&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;After running for some periods, Celery still hung. So it&amp;rsquo;s not due to the leak
anymore. Continue digging around, I found out the main reason Celery hangs is
due to &lt;a href=&#34;https://github.com/celery/celery/issues/2917&#34;&gt;some thread locks&lt;/a&gt; caused by &lt;a href=&#34;https://github.com/neo4j/neo4j-python-driver&#34;&gt;neo4j python driver&lt;/a&gt;. And that can
only be solved completely by changing the way neo4j driver save &amp;amp; fetch data
to async, which is still &lt;a href=&#34;https://github.com/neo4j/neo4j-python-driver/issues/180&#34;&gt;an open issue&lt;/a&gt; on GitHub. Although people gave
some temporary solutions to the problem, it&amp;rsquo;s only apply for Python3, and our
project is still Python2. Hence, a &lt;a href=&#34;https://manhtai.github.io/posts/python-2to3-transition&#34;&gt;transition&lt;/a&gt; from Python2 to Python3 is
needed.&lt;/p&gt;
&lt;p&gt;In the mean time, I set up a cronjob to restart Celery after some times to
remove the lock.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>12 weeks onto Crypto</title>
      <link>https://manhtai.github.io/posts/12-weeks-onto-crypto/</link>
      <pubDate>Sun, 25 Mar 2018 20:51:25 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/12-weeks-onto-crypto/</guid>
      <description>&lt;p&gt;I now commit 12 weeks to learn about Cryptography. That&amp;rsquo;s minimum time needed to
prepare for a marathon, and I think it should apply to crypto, too. My plan is
based on 12 weeks to read &lt;a href=&#34;https://www.amazon.com/exec/obidos/ASIN/0470474246/counterpane/&#34;&gt;Cryptography Engineering&lt;/a&gt; chapter by chapter.&lt;/p&gt;
&lt;p&gt;And after that, who &lt;a href=&#34;https://www.amazon.com/Mastering-Bitcoin-Programming-Open-Blockchain/dp/1491954388/&#34;&gt;knows&lt;/a&gt;?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django rate limit (and monkey patching)</title>
      <link>https://manhtai.github.io/posts/django-rate-limit/</link>
      <pubDate>Sat, 03 Mar 2018 10:08:15 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/django-rate-limit/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/jsocol/django-ratelimit&#34;&gt;Django Ratelimit&lt;/a&gt; is a good rate limiter for Django. It has a convenient
decorator for views, so we can do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@ratelimit&lt;/span&gt;(key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;post:username&amp;#39;&lt;/span&gt;, rate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;5/m&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;login&lt;/span&gt;(request):
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; HttpResponse()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to limit the times we can try to login with one specific username to
5 requests per minute.&lt;/p&gt;
&lt;p&gt;The decorator can be used with function-based views and class-based views, but
if we want to use it with built-in views, e.g. admin login view, we have to
monkey patch them.&lt;/p&gt;
&lt;p&gt;Django allows us to patch any function from any module when init app.
I usually do this in &lt;code&gt;AppConfig&lt;/code&gt; class, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyAppConfig&lt;/span&gt;(AppConfig):
    name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;my_app&amp;#39;&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ready&lt;/span&gt;(self):
        &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; my_app.monkey_patching &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; patch
        patch()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And this is the &lt;code&gt;patch()&lt;/code&gt; function, for admin login view:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;patch&lt;/span&gt;():
    &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.contrib.admin.sites &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AdminSite
    AdminSite&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;login &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new_login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where &lt;code&gt;new_login()&lt;/code&gt; is our patched function and &lt;code&gt;login()&lt;/code&gt; is original function
that handles requests for logging user in.&lt;/p&gt;
&lt;p&gt;The thing is we don&amp;rsquo;t want to rewrite &lt;code&gt;new_login()&lt;/code&gt; to be exactly like the old
&lt;code&gt;login()&lt;/code&gt; function with the &lt;code&gt;ratelimit&lt;/code&gt; decorator. We only want to &amp;ldquo;magically&amp;rdquo;
attach the decorator to the original function. How can we do that?&lt;/p&gt;
&lt;p&gt;One idea is to write a function to input function &lt;code&gt;login()&lt;/code&gt; and return function
&lt;code&gt;new_login()&lt;/code&gt; with &lt;code&gt;ratelimit&lt;/code&gt; decorator, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;limit_login&lt;/span&gt;(login):

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@ratelimit&lt;/span&gt;(key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;post:username&amp;#39;&lt;/span&gt;, rate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10/m&amp;#39;&lt;/span&gt;, method&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;, block&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new_login&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; login(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; new_login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So now we can do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;patch&lt;/span&gt;():
    &lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; django.contrib.admin.sites &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AdminSite
    AdminSite&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;login &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; limit_login(AdminSite&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;login)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can make &lt;code&gt;limit_login()&lt;/code&gt; function even more generic, with some defaults:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;limit_rate&lt;/span&gt;(func, group&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;None, key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;post:username&amp;#39;&lt;/span&gt;, rate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;10/m&amp;#39;&lt;/span&gt;, method&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;, block&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;True):

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@ratelimit&lt;/span&gt;(group&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;group, key&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;key, rate&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;rate, method&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;method, block&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;block)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new_func&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs):
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; func(&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;args, &lt;span style=&#34;color:#f92672&#34;&gt;**&lt;/span&gt;kwargs)

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; new_func
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now we can patch any view easily with our short &lt;code&gt;limit_rate()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Have good time limiting around!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Marathon plan</title>
      <link>https://manhtai.github.io/posts/marathon-12-weeks-plan/</link>
      <pubDate>Sun, 25 Feb 2018 21:45:30 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/marathon-12-weeks-plan/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve generated a two-12-weeks &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1EGDOGJBFqMY-nIQkyLcGU0YRrwygnGIP-zq_AZjrXNM&#34;&gt;marathon plan&lt;/a&gt; using &lt;a href=&#34;https://runkeeper.com&#34;&gt;Runkeeper&lt;/a&gt; app for
my race in this summer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Happy Lunnar New Year</title>
      <link>https://manhtai.github.io/posts/happy-lunnar-new-year/</link>
      <pubDate>Fri, 16 Feb 2018 18:56:22 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/happy-lunnar-new-year/</guid>
      <description>&lt;p&gt;Today is the first day of Vietnamese lunar new year. It is national holiday in
Vietnam and is used for marking the start of another spring season.&lt;/p&gt;
&lt;p&gt;Last year was such a year for me, professionally. This year I&amp;rsquo;ve got some plans
in mind and will try my best to achieve them. Two most challenging things are
to rebuild a big monolith system to microservices and to run a full marathon
in the summer. I&amp;rsquo;m expecting an interesting journey in the end of the year, too.&lt;/p&gt;
&lt;p&gt;Wish you all have a successful year ahead!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wish our colleagues a happy birthday</title>
      <link>https://manhtai.github.io/posts/wish-our-colleagues-a-happy-birthday/</link>
      <pubDate>Mon, 12 Feb 2018 22:04:15 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/wish-our-colleagues-a-happy-birthday/</guid>
      <description>&lt;p&gt;We build an intranet app using Django to help HR manage people at work. And
since we use Metabase for all our analysis tasks, we got the HR database to
query all the things about our colleagues (not the salary though, it&amp;rsquo;s
accounting&amp;rsquo;s matter).&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not interested in my colleagues&#39; days of leave, but I wish they got a happy
birthday, so why don&amp;rsquo;t we send out a wish, automatically?&lt;/p&gt;
&lt;p&gt;I write a question in SQL, it&amp;rsquo;s just as simple as list out all people who
have date and month equal to today&amp;rsquo;s date and month. And use a &lt;a href=&#34;https://manhtai.github.io/posts/metabase-alerts&#34;&gt;bot&lt;/a&gt; to
check the question everyday at 10am, then send out a wish if the question is
not empty.&lt;/p&gt;
&lt;p&gt;The tricky part is we don&amp;rsquo;t know firsthand what should be included in the
message, like our colleagues&#39; name, slack id, etc. So I have to evaluate them
at running time. The solution is to pass a string to alert message and then
convert it to string interpolation later. Like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// When creating alert
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;originalMessage&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Happy birthday to ${rows.join(&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;)}!&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#75715e&#34;&gt;// At running time
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;some&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;theMessage&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; eval(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;`&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;originalMessage&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;`&amp;#39;&lt;/span&gt;);
&lt;span style=&#34;color:#a6e22e&#34;&gt;sendMessageToSlack&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;theMessage&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I know it&amp;rsquo;s extremely risky to use &lt;code&gt;eval()&lt;/code&gt; anywhere, so I use &lt;a href=&#34;https://github.com/hacksparrow/safe-eval&#34;&gt;safe-eval&lt;/a&gt;
instead. Although at the moment it has a security &lt;a href=&#34;https://github.com/hacksparrow/safe-eval/issues/5&#34;&gt;bug&lt;/a&gt;, it should be fine
for our internal use, at least for now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Webpack critical CSS plugin</title>
      <link>https://manhtai.github.io/posts/webpack-critical-css/</link>
      <pubDate>Thu, 01 Feb 2018 19:17:48 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/webpack-critical-css/</guid>
      <description>&lt;p&gt;If you don&amp;rsquo;t already know what critical CSS is, then do &lt;a href=&#34;https://developers.google.com/speed/pagespeed/insights/&#34;&gt;get some insights&lt;/a&gt;
for your web, read the reference about &lt;a href=&#34;https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery&#34;&gt;optimizing CSS delivery&lt;/a&gt;, and I&amp;rsquo;ll
meet you here after. Really, just do it.&lt;/p&gt;
&lt;p&gt;We use Django for some of our web projects for the server side. And with
support from &lt;a href=&#34;https://github.com/ezhome/django-webpack-loader&#34;&gt;django-webpack-loader&lt;/a&gt;, now we can use Webpack in the client
side, using massive libraries from Nodejs world to power our frontend part.
We feel very happy about this integration.&lt;/p&gt;
&lt;p&gt;And now I have to find a library support generate critical CSS from our CSS
bundler, and put only that to &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, not all our CSS build.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/addyosmani/critical&#34;&gt;Some&lt;/a&gt; &lt;a href=&#34;https://github.com/anthonygore/html-critical-webpack-plugin&#34;&gt;of&lt;/a&gt; &lt;a href=&#34;https://github.com/pocketjoso/penthouse&#34;&gt;them&lt;/a&gt; do exists. But it may do more work than I want:
modify HTML / exact CSS file out of Webpack build process, or it is just
a library that can output a critical CSS file. Yeah, time for me to write the
plugin I want myself.&lt;/p&gt;
&lt;p&gt;So what do I want?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I want a plugin that can get the CSS output from latest Webpack build step, do
some magic to get critical CSS from that, then output an additional CSS file
for me, then I&amp;rsquo;ll decide what to do with it later.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can do exactly that with a plugin that wrap around a serious critical CSS
extractor. I choose &lt;a href=&#34;https://github.com/pocketjoso/penthouse&#34;&gt;penthouse&lt;/a&gt; to do the heavy work, follow the &lt;a href=&#34;https://github.com/webpack/docs/wiki/how-to-write-a-plugin&#34;&gt;guide&lt;/a&gt;
on how to write a Webpack plugin, I create &lt;a href=&#34;https://github.com/manhtai/webpack-critical-css-plugin&#34;&gt;webpack-critical-css-plugin&lt;/a&gt;
for you to use.&lt;/p&gt;
&lt;p&gt;Take a look, and send some PRs!&lt;/p&gt;
&lt;p&gt;Now for it to work with &lt;strong&gt;django-webpack-loader&lt;/strong&gt;, put your second CSS build
(the critical CSS) in the head, and put the first one (the original CSS) in
the body.&lt;/p&gt;
&lt;p&gt;Try it, then re-check your web score in Google PageSpeed Insights!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django staticfiles</title>
      <link>https://manhtai.github.io/posts/django-staticfiles/</link>
      <pubDate>Tue, 30 Jan 2018 22:31:54 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/django-staticfiles/</guid>
      <description>&lt;p&gt;Recently we move our sass &amp;amp; js complier from good ol&#39; &lt;a href=&#34;https://django-compressor.readthedocs.io/en/latest/&#34;&gt;django-compressor&lt;/a&gt;
and &lt;a href=&#34;https://github.com/etianen/django-require/&#34;&gt;django-require&lt;/a&gt; (one for compile sass, one for bundle js), to
&lt;a href=&#34;https://webpack.js.org/&#34;&gt;webpack&lt;/a&gt;, a client-side bundler (it will do both sass &amp;amp; js for us). It&amp;rsquo;s
a long process, I admit, but things go smoothly eventually. Till something
pops up.&lt;/p&gt;
&lt;p&gt;Before that, we use django-require&amp;rsquo;s &lt;code&gt;OptimizedStaticFilesStorage&lt;/code&gt; to generate
bundlers offline. This storage will generate a cache buster files side by
side with original staticfiles in our &lt;code&gt;STATIC_ROOT&lt;/code&gt; folder. Some folder will
look like this after collectstatic:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# public/&lt;/span&gt;

cms/header.css
cms/header.0847d6eff302.css
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After that, we must use &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;aws cli&lt;/a&gt; to sync staticfiles manually to our S3
bucket, then set &lt;code&gt;STATIC_URL&lt;/code&gt; to our Cloudfront endpoint. It works, till now.&lt;/p&gt;
&lt;p&gt;I now remove both django-compressor and django-require, and use Django&amp;rsquo;s
&lt;code&gt;ManifestFilesMixin&lt;/code&gt; storage instead, with combination with &lt;code&gt;S3BotoStorage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We must change default &lt;code&gt;manifest_name&lt;/code&gt; a little bit using git commit digest
to support multiple deployments in the same bucket. The storage we use now
looks like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;S3ManifestStaticFilesStorage&lt;/span&gt;(ManifestFilesMixin, S3BotoStorage):
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    This storage uses S3 as backend and having cache busting property of
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    ManifestStaticFilesStorage
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    &amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    manifest_strict &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; False

    &lt;span style=&#34;color:#a6e22e&#34;&gt;@property&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;manifest_name&lt;/span&gt;(self):
        filename &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;staticfiles-{version}.json&amp;#39;&lt;/span&gt;
        version &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; subprocess&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;check_output([&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;git&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;rev-parse&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;HEAD&amp;#39;&lt;/span&gt;])&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; filename&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;format(version&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;version&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;decode(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now whenever we call &lt;code&gt;collectstatic&lt;/code&gt;, it will collect all our staticfiles to
S3, no need another step to sync them manually.&lt;/p&gt;
&lt;p&gt;Things will work beautifully if Django collect all files, instead it
&lt;strong&gt;WILL NOT&lt;/strong&gt; collect anything which are collected before, even when we&amp;rsquo;ve
changed our storage backend.&lt;/p&gt;
&lt;p&gt;I have done many twists back and forth but the &lt;code&gt;static&lt;/code&gt; template tags got wrong
urls all the time. Then after checking &lt;code&gt;last-modified&lt;/code&gt; in one of response
header, I find out that the file hasn&amp;rsquo;t change for very long time. Hence
Django mustn&amp;rsquo;t touch these files when I change staticfiles backend storage.&lt;/p&gt;
&lt;p&gt;Voyla!&lt;/p&gt;
&lt;p&gt;Just copy all staticfiles form old folder into the new one, and problem
solved, new files would work as expected.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build a distributed chat app in Golang</title>
      <link>https://manhtai.github.io/posts/chat-app-in-golang/</link>
      <pubDate>Mon, 29 Jan 2018 21:19:23 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/chat-app-in-golang/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve built a &lt;a href=&#34;https://github.com/manhtai/golang-mongodb-chat&#34;&gt;demo&lt;/a&gt; chat app in Go before, using Go channels to broadcast
messages, data is saved to MongoDB. It&amp;rsquo;s quite a fun learning experience,
but when you want a chat app at scale, you need more. Yes I am looking at
you: &lt;strong&gt;microservices&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now I know one thing or two about microservices and distributed systems,
I think at least these three are in need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;A service for saving messages to DB&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;A service for handling messages from clients&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;A proper message queue, for the talkings between services&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we&amp;rsquo;ll start to build one.&lt;/p&gt;
&lt;p&gt;(Some time after&amp;hellip;)&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s on &lt;a href=&#34;https://github.com/manhtai/golang-nsq-chat&#34;&gt;GitHub&lt;/a&gt; now. The README should be enough to explain the idea.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How we build a working ERP system using Django and React Native in 3 months</title>
      <link>https://manhtai.github.io/posts/building-erp-using-django-react-native/</link>
      <pubDate>Sun, 28 Jan 2018 16:53:15 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/building-erp-using-django-react-native/</guid>
      <description>&lt;p&gt;The title may seem too promising, and but it is a working ERP, not a complete
one, we are still having many things to build and improve.&lt;/p&gt;
&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;Within 3 months, 2 developers, we managed to build a web UI (using &lt;a href=&#34;https://www.djangoproject.com&#34;&gt;Django&lt;/a&gt;) and
a mobile app (using &lt;a href=&#34;https://facebook.github.io/react-native/&#34;&gt;React Native&lt;/a&gt;), with this core business flow:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Quotation &amp;gt; Sales Order &amp;gt; Purchase Order&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A little bit about above flow looks like this.&lt;/p&gt;
&lt;p&gt;The sales staffs create Quotations when they are selling Products to Customers,
usually over telephones. They make an assignment to services staff in the same
screen they create the quotation. This services staff will instantly receive a
notification about this new quotation assigned for them through an app, and
know when and where they should meet the customer.&lt;/p&gt;
&lt;p&gt;When the services staff delivers service to customer, they will make a sales
order in their app, print an invoice using a thermal printer and get the money.
They can do all of that offline, and do it fast.&lt;/p&gt;
&lt;p&gt;After that, they must be online to sync the sales orders back to our server.
In there, some purchase orders will be created automatically base on the products
customers bought from us. Those purchase orders will be sent to corresponding
suppliers for purchasing.&lt;/p&gt;
&lt;h2 id=&#34;the-fail&#34;&gt;The fail&lt;/h2&gt;
&lt;p&gt;I am the technical lead of this new ERP project, and the first task is to do
research about ERP frameworks that already out there in the market. We don&amp;rsquo;t
think about create one from scratch at first because it must be too big for us
to handle. We are only a small startup team after all.&lt;/p&gt;
&lt;p&gt;After a day or two playing around, two most promising ones I found are &lt;a href=&#34;https://www.odoo.com/&#34;&gt;Odoo&lt;/a&gt;
and &lt;a href=&#34;https://erpnext.com/&#34;&gt;ERPNext&lt;/a&gt;. But soon I drop Oddo because it&amp;rsquo;s too big and not very
&amp;ldquo;open&amp;rdquo; anymore in the sense of open source softwares.&lt;/p&gt;
&lt;p&gt;And then, after that, there was 2 sweaty weeks of trying to fit our business
model in to ERPNext. Finally, I must give up. It&amp;rsquo;s not our business flow is too
complex, but the devil is in the details. I need freedom to create models and
calculations for the system that ERPNext just does not allow.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We must create all from scratch&lt;/em&gt;, I told our CTO. And he agreed.&lt;/p&gt;
&lt;h2 id=&#34;the-web&#34;&gt;The web&lt;/h2&gt;
&lt;p&gt;I choose Django mainly for its battery-included features: ORM &amp;amp; admin interfaces.
All we need to do is to declare models, and it will generate migration files
and fire up an admin page for us, so we can create and change things fast.&lt;/p&gt;
&lt;p&gt;We use &lt;a href=&#34;http://grappelliproject.com/&#34;&gt;Grappelli&lt;/a&gt; for admin style instead of default one, and use admin UI as
default UI for our staffs. It does not look fancy, but simple and configurable.&lt;/p&gt;
&lt;h2 id=&#34;the-api&#34;&gt;The API&lt;/h2&gt;
&lt;p&gt;The first thing in mind when we start the project is the mobile app, not the
web UI, hence the API, and Django with its famous &lt;a href=&#34;http://www.django-rest-framework.org/&#34;&gt;REST framework&lt;/a&gt; suits our
need very well. At least I thought that, because I have many experiences working
with this.&lt;/p&gt;
&lt;p&gt;But then, something pop up in my eyes: &lt;a href=&#34;http://graphql.org/learn/&#34;&gt;Graphql&lt;/a&gt;, and it looks shiny!
After digging around, I found this &lt;a href=&#34;http://graphene-python.org/&#34;&gt;Graphene&lt;/a&gt; for Python, give it a try, and
the choice has been made.&lt;/p&gt;
&lt;p&gt;Graphql help us build API faster &amp;amp; easier than REST, just declare your schema
and boom, you got a full-fledged API!&lt;/p&gt;
&lt;h2 id=&#34;the-app&#34;&gt;The app&lt;/h2&gt;
&lt;p&gt;At first our team has only one mobile dev, and he is using &lt;a href=&#34;https://ionicframework.com/&#34;&gt;Ionic&lt;/a&gt; for some
of our apps. I myself am a backend developer most of the time, so I need
another man for the project. I can&amp;rsquo;t take the only mobile developer we had because
he is very busy himself. Our CTO suggests that I should use the same mobile framework
we already use, i.e. Ionic, so I can get support from the experienced one.&lt;/p&gt;
&lt;p&gt;I also thought that myself, but then, you know, many things pop up in our
little eyes these days. You already know what it is this time: React Native.
As I just said, our team only had one mobile developer, but fortunately, all
our frontend dev already use a frontend framework at another project of ours:
&lt;a href=&#34;https://vuejs.org/&#34;&gt;Vuejs&lt;/a&gt;. And React Native is just &lt;a href=&#34;https://reactjs.org/&#34;&gt;Reactjs&lt;/a&gt; in the mobile world, and it
must be the same!&lt;/p&gt;
&lt;p&gt;When I mention React Native, one of our dev shows the interest, so I invited
him to join, and it turns out he and I made an awesome team! He
builds most parts of the app, I only help for some. And the most tricky thing
I face is to print Vietnamese characters to thermal printer. I really should write
a post about that later.&lt;/p&gt;
&lt;h2 id=&#34;the-result&#34;&gt;The result&lt;/h2&gt;
&lt;p&gt;We had a working ERP system for recording our core business activities that we
can take advantages of by using other data centric tools for making reports,
alerts, forecast, etc. All fancy things that we imagined we can do with the data,
now we can do it.&lt;/p&gt;
&lt;h2 id=&#34;the-ongoing&#34;&gt;The ongoing&lt;/h2&gt;
&lt;p&gt;There are many parts of the system need to be added: CRM, Call center, etc.
But really, choosing the right tools from the start is the key for any success
later. Good tools are all around, just pick one for your need!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django transactions</title>
      <link>https://manhtai.github.io/posts/django-transactions/</link>
      <pubDate>Sat, 27 Jan 2018 17:39:26 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/django-transactions/</guid>
      <description>&lt;p&gt;Django &lt;a href=&#34;https://docs.djangoproject.com/en/dev/topics/db/transactions/&#34;&gt;documentation&lt;/a&gt; about transaction points out:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Django uses transactions or savepoints automatically to guarantee the integrity
of ORM operations that require multiple queries, especially &lt;code&gt;delete()&lt;/code&gt; and
&lt;code&gt;update()&lt;/code&gt; queries.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This means whenever we call &lt;code&gt;save()&lt;/code&gt; or &lt;code&gt;create()&lt;/code&gt;, it&amp;rsquo;s already wrapped in
a transaction. And usually new data is not in the database yet when we try to
get that again somewhere after.&lt;/p&gt;
&lt;p&gt;To make sure it&amp;rsquo;s commited, we have to use &lt;code&gt;transaction.on_commit()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are 2 popular cases I find that we must use &lt;code&gt;on_commit()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The first one&lt;/em&gt; is when we send task to a Celery queue. The error we usually made
here is to put that on a &lt;code&gt;post_save&lt;/code&gt; signal and hope for the best. Remember that
&lt;code&gt;post_save&lt;/code&gt; is in the same transaction with &lt;code&gt;save()&lt;/code&gt;, so there is no guarantee
that new data will be in the database when Celery task get it from there.&lt;/p&gt;
&lt;p&gt;We must use put the task to &lt;code&gt;on_commit()&lt;/code&gt; function like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;transaction&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;on_commit(&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt;: celery_task_with_id(id))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;The second case&lt;/em&gt; is when we want to do something after all inline forms in
admin page is saved. But the thing we actually want is data is commited to
database. You already know how to do it, just like the case above.&lt;/p&gt;
&lt;p&gt;The catch here is we can put &lt;code&gt;on_commit()&lt;/code&gt; function in many places, as long as
it&amp;rsquo;s in the transaction. I usually put that on &lt;code&gt;save_model()&lt;/code&gt; or &lt;code&gt;save_related()&lt;/code&gt;,
depend on what extra infomation I need for further processing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metabase alerts</title>
      <link>https://manhtai.github.io/posts/metabase-alerts/</link>
      <pubDate>Sat, 27 Jan 2018 16:26:24 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/metabase-alerts/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://metabase.com&#34;&gt;Metabase&lt;/a&gt; is a simple and powerful BI tool for business. We use it to get
insights about almost everything that happens in our system. In &lt;a href=&#34;https://metabase.com/blog/Metabase-0.27/index.html&#34;&gt;recent&lt;/a&gt;
version it added alerts feature to question, but has some limitations.&lt;/p&gt;
&lt;p&gt;Firstly, the shortest time it allows checking for something bad may happen is
one hour. It may seem acceptable in some business model but not ours. We need
at most 5 minutes delay time in alerting.&lt;/p&gt;
&lt;p&gt;Secondly, we can&amp;rsquo;t customize Slack alert format, and it sucks most of the
time.&lt;/p&gt;
&lt;p&gt;Lastly, I don&amp;rsquo;t know whether it&amp;rsquo;s a bug or not, but sometime the alerts just
stop working!&lt;/p&gt;
&lt;p&gt;Fortunately, Metabase has a &lt;a href=&#34;https://github.com/metabase/metabase/blob/master/docs/api-documentation.md&#34;&gt;rich&lt;/a&gt; API for frontend part, and we can use
that to make our own alert system.&lt;/p&gt;
&lt;p&gt;So our solution is use a Slack bot to call the question API periodically, and
send a message to a choosen channel if the response is not empty.&lt;/p&gt;
&lt;p&gt;Checkout the sample code &lt;a href=&#34;https://github.com/manhtai/mimi/blob/master/metabase.js&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2018</title>
      <link>https://manhtai.github.io/posts/2018/</link>
      <pubDate>Fri, 26 Jan 2018 23:52:49 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/2018/</guid>
      <description>&lt;p&gt;A new year has come, guess what, I made a new blog. Yay!&lt;/p&gt;
&lt;p&gt;This blog is powered by &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; and hosted by &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt;. I modified the
&lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/#github-user-or-organization-pages&#34;&gt;deployment script&lt;/a&gt; a little bit to use 2 braches in 1 repo instead of
2 repos. It looks like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; We got &lt;a href=&#34;https://github.com/manhtai/manhtai.github.io/tree/develop/.github/workflows/main.yml&#34;&gt;GitHub actions&lt;/a&gt; now.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 0. Notify &amp;amp; get message&lt;/span&gt;
echo -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\033[0;32mDeploying updates to GitHub...\033[0m&amp;#34;&lt;/span&gt;
msg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rebuilding site `date`&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $# -eq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 1. Commit changes to develop first&lt;/span&gt;
git add .
git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$msg&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 2. Build the project in develop&lt;/span&gt;
hugo

&lt;span style=&#34;color:#75715e&#34;&gt;# 3. Checkout to master&lt;/span&gt;
git checkout master

&lt;span style=&#34;color:#75715e&#34;&gt;# 4. Add changes to master&lt;/span&gt;
cp -r public/* .
rm -rf public
git add .
git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$msg&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# 5. Push to develop &amp;amp; master&lt;/span&gt;
git push origin master develop

&lt;span style=&#34;color:#75715e&#34;&gt;# 6. Come back to develop&lt;/span&gt;
git checkout develop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can checkout the source code &lt;a href=&#34;https://github.com/manhtai/manhtai.github.io&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>