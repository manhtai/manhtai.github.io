<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS on Go slowly</title>
    <link>https://manhtai.github.io/tags/aws/</link>
    <description>Recent content in AWS on Go slowly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Jul 2021 16:27:58 +0700</lastBuildDate>
    
        <atom:link href="https://manhtai.github.io/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Design DynamoDB Tables</title>
      <link>https://manhtai.github.io/posts/design-dynamodb-tables/</link>
      <pubDate>Mon, 05 Jul 2021 16:27:58 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/design-dynamodb-tables/</guid>
      <description>&lt;h2 id=&#34;primary-key--indexes&#34;&gt;Primary key &amp;amp; Indexes&lt;/h2&gt;
&lt;p&gt;DynamoDB is a NoSQL database, so in reality you can store all kind of
objects. The catch is you can specifiy the key to partition the data,
so you can scale out your applications horizontally, proportion to the
numbers of partition.&lt;/p&gt;
&lt;p&gt;There are 2 kinds of primary key in a DynamoDB table, you can only choose
implement one:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Hash key only&lt;/strong&gt;: The hash key is also the partition key, it must be globally
unique.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hash key with a range key combination&lt;/strong&gt;: The hash key is the partition key, it
is not required to be unique, but the combination, i.e. the primary key must
be.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Whichever kind of primary key you choose, the scalability is the same. To make
it really work, make sure your hash keys are distributed equally in all
partitions.&lt;/p&gt;
&lt;p&gt;Beside the primary key, DynamoDB supports global secondary indexes and local
secondary indexes, so you can make your queries run fast in another dimentions
also.&lt;/p&gt;
&lt;h2 id=&#34;an-example-in-go&#34;&gt;An example in Go&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/guregu/dynamo/&#34;&gt;dynamo&lt;/a&gt; is a Golang library that makes extremely easy to define the primary
key and indexes.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s define a &lt;code&gt;Job&lt;/code&gt; table with primary key is the combination of &lt;code&gt;ShardId&lt;/code&gt;
and &lt;code&gt;Token&lt;/code&gt;, in which &lt;code&gt;ShardId&lt;/code&gt; is a hash key, and &lt;code&gt;Token&lt;/code&gt; is a range key:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Job&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
	&lt;span style=&#34;color:#a6e22e&#34;&gt;ShardId&lt;/span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;               &lt;span style=&#34;color:#e6db74&#34;&gt;`dynamo:&amp;#34;shard_id,hash&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Token&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;`dynamo:&amp;#34;date_token,range&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;         &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;            &lt;span style=&#34;color:#e6db74&#34;&gt;`dynamo:&amp;#34;name&amp;#34;`&lt;/span&gt;
	&lt;span style=&#34;color:#a6e22e&#34;&gt;CreatedAt&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Time&lt;/span&gt;         &lt;span style=&#34;color:#e6db74&#34;&gt;`dynamo:&amp;#34;created_at&amp;#34;`&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now to create the table, we init a DynamoDB session and create the table:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewSession&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;aws&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewConfig&lt;/span&gt;()
&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dynamo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;New&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;session&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;config&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CreateTable&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Job`&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Job&lt;/span&gt;{}).&lt;span style=&#34;color:#a6e22e&#34;&gt;Run&lt;/span&gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To query the jobs in a specific shard:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;jobs&lt;/span&gt; []&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Job&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;client&lt;/span&gt;.
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Table&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;`Job`&lt;/span&gt;).
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;shard_id&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;shardId&lt;/span&gt;).
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Filter&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#39;token&amp;#39; &amp;lt; ?&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;tokenId&lt;/span&gt;).
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Limit&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;).
    &lt;span style=&#34;color:#a6e22e&#34;&gt;All&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;jobs&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Setup CORS for S3 and Cloudfront</title>
      <link>https://manhtai.github.io/posts/setup-cors-for-s3-and-cloudfront/</link>
      <pubDate>Fri, 04 Dec 2020 20:53:21 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/setup-cors-for-s3-and-cloudfront/</guid>
      <description>&lt;p&gt;CORS problem arises in one of our apps because static files return from
CloudFront do not allow CORS. Specifically, they do not return following
header:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;Access-Control-Allow-Origin: *
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem is, we&amp;rsquo;ve setup CloudFront and S3 to support CORS as mentioned in
&lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html&#34;&gt;the docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In S3 bucket rules, we have:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
    {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;AllowedHeaders&amp;#34;&lt;/span&gt;: [
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Authorization&amp;#34;&lt;/span&gt;
        ],
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;AllowedMethods&amp;#34;&lt;/span&gt;: [
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;GET&amp;#34;&lt;/span&gt;
        ],
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;AllowedOrigins&amp;#34;&lt;/span&gt;: [
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;
        ],
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;ExposeHeaders&amp;#34;&lt;/span&gt;: [],
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;MaxAgeSeconds&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;20000&lt;/span&gt;
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In CloudFront, we have:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;Cache and origin request settings: Use a cache policy and origin request policy
Cache Policy                     : Managed-CachingOptimized
Origin Request Policy            : Managed-CORS-S3Origin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All looks good, but our problem persists.&lt;/p&gt;
&lt;p&gt;Continue following &lt;a href=&#34;https://docs.aws.amazon.com/AmazonS3/latest/dev/cors.html&#34;&gt;the docs&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How does Amazon S3 evaluate the CORS configuration on a bucket?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;When Amazon S3 receives a preflight request from a browser, it evaluates the
CORS configuration for the bucket and uses the first CORSRule rule that matches
the incoming browser request to enable a cross-origin request. For a rule to
match, the following conditions must be met:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The request&amp;rsquo;s Origin header must match an AllowedOrigin element.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The request method (for example, GET or PUT) or the Access-Control-Request-Method
header in case of a preflight OPTIONS request must be one of the AllowedMethod elements.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Every header listed in the request&amp;rsquo;s Access-Control-Request-Headers header on the
preflight request must match an AllowedHeader element.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We inspect the GET request that the browser makes to get the static files and
observe that the request header does not include &lt;code&gt;Origin&lt;/code&gt; in the first request
send to CloudFront, and CloudFront does not send back
&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header.&lt;/p&gt;
&lt;p&gt;After the first request, CloudFront will cache the response header, and even
if the browser send the &lt;code&gt;Origin&lt;/code&gt; request header next time, it still does not send back
&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; response header.&lt;/p&gt;
&lt;p&gt;The solution is quite simple than we thought, we create a new cache policy with
&lt;code&gt;Origin&lt;/code&gt; be one of the cache keys (the only different one from &lt;code&gt;Managed-CachingOptimized&lt;/code&gt;
policy), then the problem goes away.&lt;/p&gt;
&lt;p&gt;This works fine if the origin number is small as in our case.&lt;/p&gt;
&lt;p&gt;There are two other ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1, Use Lambda@Edge to set the necessary header.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;2, Override origin header from CloudFront to a dummy one.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2, feels a little bit hacky but it might be the best solution.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>