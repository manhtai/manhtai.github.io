<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Postgres on Go slowly</title>
    <link>https://manhtai.github.io/tags/postgres/</link>
    <description>Recent content in Postgres on Go slowly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Jun 2022 07:32:27 +0700</lastBuildDate>
    
        <atom:link href="https://manhtai.github.io/tags/postgres/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Upgrade Postgres major version with near-zero-downtime</title>
      <link>https://manhtai.github.io/posts/upgrade-postgres-major-version-with-near-zero-downtime/</link>
      <pubDate>Mon, 20 Jun 2022 07:32:27 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/upgrade-postgres-major-version-with-near-zero-downtime/</guid>
      <description>&lt;p&gt;Our system have a typical facing API and some workers which do jobs on the
background. All of them have read/write access to the Postgres instance. Our
instance is not very big, but when we try to upgrade using AWS console on the
clone, it takes more than 20 minutes and that&amp;rsquo;s not acceptable.
Hence we were looking elsewhere, and find &lt;a href=&#34;https://aws.amazon.com/blogs/database/achieving-minimum-downtime-for-major-version-upgrades-in-amazon-aurora-for-postgresql-using-aws-dms/&#34;&gt;a solution&lt;/a&gt; from AWS using DMS.
It worked out pretty well for us.&lt;/p&gt;
&lt;h2 id=&#34;step-by-step&#34;&gt;Step by step&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Clone a new instance from our current database, truncate all tables and
upgrade the new database to the latest version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full load and then CDC sync between the old database and the new one.
Monitor the latency as well as table statistics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stop all writing tasks (API &amp;amp; workers) to old database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stop DMS job.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Switch database connection to the new one and restart all writing tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify, then clean up old resources.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;catches&#34;&gt;Catches&lt;/h2&gt;
&lt;p&gt;Current DMS engine (3.4.6) has some problems with some column types. But we
can resolve them quickly thanks to clear error logs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;varchar&lt;/code&gt; (without n), we have to convert it to &lt;code&gt;text&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jsonb not null&lt;/code&gt;, we have to make it nullable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But in overall the upgrade process is smooth, we still got some downtime but
it&amp;rsquo;s insignificant.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Postgres: Update object items on JSONB array</title>
      <link>https://manhtai.github.io/posts/postgres-update-object-item-on-jsonb-array/</link>
      <pubDate>Mon, 25 Apr 2022 17:12:38 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/postgres-update-object-item-on-jsonb-array/</guid>
      <description>&lt;h2 id=&#34;problem&#34;&gt;Problem:&lt;/h2&gt;
&lt;p&gt;We have a table with a JSONB array column &lt;code&gt;data&lt;/code&gt; which contains many objects:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
  {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dog&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dog-1&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cat&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cat-1&amp;#34;&lt;/span&gt;}
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How do we change the name field from &lt;code&gt;&amp;quot;type&amp;quot;&lt;/code&gt; into &lt;code&gt;&amp;quot;kind&amp;quot;&lt;/code&gt; and keep all related data?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s assume table &lt;code&gt;animals&lt;/code&gt; has 2 columns: &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;answer&#34;&gt;Answer:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; animals
&lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; (
         &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; id,
                jsonb_agg(
                        jsonb_build_object(
                                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;, elem &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;,
                                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kind&amp;#39;&lt;/span&gt;, elem &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;
                            )
                    ) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt;
         &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; animals,
              jsonb_array_elements(&lt;span style=&#34;color:#66d9ef&#34;&gt;CASE&lt;/span&gt; jsonb_typeof(&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;WHEN&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;array&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;THEN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[]&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; elem
         &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kind&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;
         &lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; animals.id
     ) &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; animals.id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;.id;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Update partially and return fully in Go</title>
      <link>https://manhtai.github.io/posts/golang-update-partially-and-return-fully/</link>
      <pubDate>Fri, 31 Dec 2021 20:25:07 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/golang-update-partially-and-return-fully/</guid>
      <description>&lt;p&gt;In typical CRUD applications, it&amp;rsquo;s common these days that your update
APIs work properly on objects in a partial way. You should not enforcing
the client to send the whole object to update just a field anymore. And with
Postgres &lt;code&gt;returning&lt;/code&gt; clause, we can return all object data despite being
updated only some of them.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say you have to update a Student object, we will define all its fields
as pointers so when the client doesn&amp;rsquo;t send up anything, it will be nil:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Student&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;Age&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We must use pointers here because otherwise, we can&amp;rsquo;t differ default zero values
with not-set values that are sent from the client. To update the record, we
come up with two answers.&lt;/p&gt;
&lt;h2 id=&#34;1-case-when-with-returning&#34;&gt;1. CASE WHEN&amp;hellip; with RETURNING&lt;/h2&gt;
&lt;p&gt;In the database interface, we will choose the fields that need to update and
return all object data when done, we use &lt;code&gt;pgx&lt;/code&gt; and &lt;code&gt;scany&lt;/code&gt; package here for
executing query and scanning data back to Go struct:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/jackc/pgx/v4&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/georgysavva/scany/pgxscan&amp;#34;&lt;/span&gt;
)


&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pgx&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Connect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Background&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DATABASE_URL&amp;#34;&lt;/span&gt;))

      &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      UPDATE students
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      SET
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          name = CASE WHEN $1 = true THEN $2 ELSE name END,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          age = CASE WHEN $3 = true THEN $4 ELSE age END
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      RETURNING
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          name, age`&lt;/span&gt;

      &lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Query&lt;/span&gt;(
         &lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;,
         &lt;span style=&#34;color:#a6e22e&#34;&gt;student&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;student&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;,
         &lt;span style=&#34;color:#a6e22e&#34;&gt;student&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Age&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;student&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Age&lt;/span&gt;
      )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()

      &lt;span style=&#34;color:#a6e22e&#34;&gt;stud&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Student&lt;/span&gt;{}

      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;() {
          &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;pgxscan&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ScanRow&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stud&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt;)
      }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This solution looks OK, but we can&amp;rsquo;t validate the object with all fields
available at the same time before updating into the database. Hence the
second approach.&lt;/p&gt;
&lt;h2 id=&#34;2-select-first-update-later&#34;&gt;2. SELECT first, UPDATE later&lt;/h2&gt;
&lt;p&gt;No code is needed to explain this method. First you retrieve the object from
the database, then change those fields that need updating (non-nil fields),
do whatever validation required, and then write the whole object back.&lt;/p&gt;
&lt;p&gt;Despite we must always do a SELECT before an UPDATE, this should be the
preferred solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Benchmark Postgres Index Performance</title>
      <link>https://manhtai.github.io/posts/benchmark-postgres-index-performance/</link>
      <pubDate>Tue, 02 Nov 2021 14:42:35 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/benchmark-postgres-index-performance/</guid>
      <description>&lt;h2 id=&#34;the-question&#34;&gt;The question&lt;/h2&gt;
&lt;p&gt;We had a table contains 150.000 rows and 6 text columns. We do some &lt;code&gt;select&lt;/code&gt;
query using exact match by each of the columns. 150k rows is not too much for
indexing all the 6 columns, right? Let&amp;rsquo;s do a benchmark!&lt;/p&gt;
&lt;h2 id=&#34;the-benchmark&#34;&gt;The benchmark&lt;/h2&gt;
&lt;h3 id=&#34;1-create-table&#34;&gt;1. Create table&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; bench &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;
    md5(random()::text) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; a,
    md5(random()::text) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; b,
    md5(random()::text) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;,
    md5(random()::text) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; d,
    md5(random()::text) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; e,
    md5(random()::text) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; f
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;
    generate_series(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;150000&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-select-without-index&#34;&gt;2. Select without index&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select * from bench where a = &amp;#39;a&amp;#39; and b = &amp;#39;b&amp;#39; and c = &amp;#39;c&amp;#39; and d = &amp;#39;d&amp;#39; and e = &amp;#39;e&amp;#39; order by f limit 1;&amp;#34;&lt;/span&gt; | pgbench -d postgres -t &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; -P &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -f -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;latency average = 23.562 ms
latency stddev = 0.946 ms
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3-create-index&#34;&gt;3. Create index&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;index&lt;/span&gt; bench_a &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; bench(a);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The way you choose indexes here depends on the cardinality or uniqueness of the data.
We use random data here so one index is enough, and it will perform almost exactly as
when you index all 6 columns!&lt;/p&gt;
&lt;h3 id=&#34;4-select-with-index&#34;&gt;4. Select with index&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select * from bench where a = &amp;#39;a&amp;#39; and b = &amp;#39;b&amp;#39; and c = &amp;#39;c&amp;#39; and d = &amp;#39;d&amp;#39; and e = &amp;#39;e&amp;#39; order by f limit 1;&amp;#34;&lt;/span&gt; | pgbench -d postgres -t &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; -P &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -f -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;latency average = 0.357 ms
latency stddev = 0.354 ms
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;the-answer&#34;&gt;The answer&amp;hellip;&lt;/h2&gt;
&lt;p&gt;&amp;hellip;is yes. Indexing makes your queries 66 times faster!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>