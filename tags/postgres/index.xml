<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Postgres on Go slowly</title>
    <link>https://manhtai.github.io/tags/postgres/</link>
    <description>Recent content in Postgres on Go slowly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 09 May 2023 15:53:36 +0700</lastBuildDate>
    
        <atom:link href="https://manhtai.github.io/tags/postgres/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SQL: Aggregation by Date</title>
      <link>https://manhtai.github.io/posts/sql-aggregation-by-date/</link>
      <pubDate>Tue, 09 May 2023 15:53:36 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/sql-aggregation-by-date/</guid>
      <description>&lt;p&gt;In previous post about &lt;a href=&#34;https://manhtai.github.io/posts/sql-group-by-top-5&#34;&gt;group by top 5&lt;/a&gt;, we&amp;rsquo;re trying to find the top
5 buyers on a daily basis and we&amp;rsquo;re using the date bucket technique to
aggregate data for each day, like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; buckets &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-01T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; date
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-02T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-03T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-04T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-05T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-06T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-07T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-08T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-09T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-10T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;),
[...]
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; buckets b
         &lt;span style=&#34;color:#66d9ef&#34;&gt;LEFT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; groups &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; b.date &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt;.date &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; b.date &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; INTERVAL &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-1 day&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt;.date
&lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; b.date, &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt;.email
&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; date;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This query works. But the problem is we have to do a JOIN between &lt;code&gt;buckets&lt;/code&gt;
and &lt;code&gt;groups&lt;/code&gt;. If &lt;code&gt;groups&lt;/code&gt; is a very big table then the query will be too slow
to run. For big data in general, not moving data around is the key to boost
the query performance.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s make the above query better by not JOINing the big table with others
(hence not moving it). Instead try to aggregate the data in-place.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; dates &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; id,
                      DATE_TRUNC(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;day&amp;#39;&lt;/span&gt;, date) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; date,
                      email,
                      amount
               &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; orders),
     ranks &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; email                                       &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; email,
                      ROW_NUMBER() OVER (&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;COUNT&lt;/span&gt;(id) &lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; email_rank
               &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; dates
               &lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; email),
     groups &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; id,
                       &lt;span style=&#34;color:#66d9ef&#34;&gt;CASE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHEN&lt;/span&gt; r.email_rank &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;THEN&lt;/span&gt; o.email &lt;span style=&#34;color:#66d9ef&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Other&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; email,
                       date
                &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; dates o
                         &lt;span style=&#34;color:#66d9ef&#34;&gt;LEFT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; ranks r &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; o.email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r.email)
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; date,
       email,
       &lt;span style=&#34;color:#66d9ef&#34;&gt;COUNT&lt;/span&gt;(id) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; groups
&lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; date, email
&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; date;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The result should be the &lt;a href=&#34;https://manhtai.github.io/posts/sql-group-by-top-5&#34;&gt;same&lt;/a&gt;, but without any JOINs, hence it runs way faster.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SQL: Group by Top 5</title>
      <link>https://manhtai.github.io/posts/sql-group-by-top-5/</link>
      <pubDate>Wed, 22 Feb 2023 17:31:03 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/sql-group-by-top-5/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s say we want to aggregate some data to make a trending bar chart of
orders made in the last month on the daily basis. Along with that, show the
top 5 most spent buyers, i.e. group by the top 5 buyers, with top 6 onward are
considered the &amp;ldquo;Other&amp;rdquo; group.&lt;/p&gt;
&lt;h2 id=&#34;data-seeding&#34;&gt;Data Seeding&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; orders
(
    id     BIGINT       &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;KEY&lt;/span&gt;,
    email  VARCHAR(&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
    amount BIGINT       &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
    date   &lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;
);

&lt;span style=&#34;color:#66d9ef&#34;&gt;INSERT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INTO&lt;/span&gt; orders (id, email, amount, date)
&lt;span style=&#34;color:#66d9ef&#34;&gt;VALUES&lt;/span&gt; (&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email1@example.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-01T00:00:00Z&amp;#39;&lt;/span&gt;),
       (&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email2@example.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-02T00:00:00Z&amp;#39;&lt;/span&gt;),
       (&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email3@example.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-03T00:00:00Z&amp;#39;&lt;/span&gt;),
       (&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email4@example.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-04T00:00:00Z&amp;#39;&lt;/span&gt;),
       (&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email5@example.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-05T00:00:00Z&amp;#39;&lt;/span&gt;),
       (&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email6@example.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-06T00:00:00Z&amp;#39;&lt;/span&gt;),
       (&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email7@example.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-07T00:00:00Z&amp;#39;&lt;/span&gt;),
       (&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email8@example.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3000&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-08T00:00:00Z&amp;#39;&lt;/span&gt;),
       (&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email9@example.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-09T00:00:00Z&amp;#39;&lt;/span&gt;),
       &lt;span style=&#34;color:#75715e&#34;&gt;-- 3 orders of &amp;#34;Other&amp;#34; group
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;       (&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email10@example.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-10T00:00:00Z&amp;#39;&lt;/span&gt;),
       (&lt;span style=&#34;color:#ae81ff&#34;&gt;11&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email11@example.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-10T00:00:00Z&amp;#39;&lt;/span&gt;),
       (&lt;span style=&#34;color:#ae81ff&#34;&gt;12&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email12@example.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-10T00:00:00Z&amp;#39;&lt;/span&gt;),
       &lt;span style=&#34;color:#75715e&#34;&gt;-- 5 extra orders to make Top 5
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;       (&lt;span style=&#34;color:#ae81ff&#34;&gt;13&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email1@example.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-05T00:00:00Z&amp;#39;&lt;/span&gt;),
       (&lt;span style=&#34;color:#ae81ff&#34;&gt;14&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email2@example.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-06T00:00:00Z&amp;#39;&lt;/span&gt;),
       (&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email3@example.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-07T00:00:00Z&amp;#39;&lt;/span&gt;),
       (&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email4@example.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-08T00:00:00Z&amp;#39;&lt;/span&gt;),
       (&lt;span style=&#34;color:#ae81ff&#34;&gt;17&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;email5@example.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;300&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-09T00:00:00Z&amp;#39;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;From the seeding data, we can see that the top 5 is from email1@example to
email5@example. And the Other group has 3 orders on a specific day.&lt;/p&gt;
&lt;h2 id=&#34;query-steps&#34;&gt;Query Steps&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Find the Top 5 using the &lt;code&gt;ROW_NUMBER()&lt;/code&gt; query, then join back with the
original Orders table to change the email column: Top 5 emails stay as it
is. Top 6 onward change to &amp;ldquo;Other&amp;rdquo;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Init the date buckets to join with grouped orders to count the orders by
date.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And the final query is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;WITH&lt;/span&gt; buckets &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-01T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; date
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-02T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-03T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-04T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-05T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-06T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-07T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-08T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-09T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;UNION&lt;/span&gt;
                 &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;2023-01-10T00:00:00Z&amp;#39;&lt;/span&gt;::&lt;span style=&#34;color:#66d9ef&#34;&gt;TIMESTAMP&lt;/span&gt;),
     ranks &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; email                                       &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; email,
                      ROW_NUMBER() OVER (&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;COUNT&lt;/span&gt;(id) &lt;span style=&#34;color:#66d9ef&#34;&gt;DESC&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; email_rank
               &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; orders
               &lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; email),
     groups &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; id,
                       &lt;span style=&#34;color:#66d9ef&#34;&gt;CASE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;WHEN&lt;/span&gt; r.email_rank &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;THEN&lt;/span&gt; o.email &lt;span style=&#34;color:#66d9ef&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Other&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; email,
                       date
                &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; orders o
                         &lt;span style=&#34;color:#66d9ef&#34;&gt;LEFT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; ranks r &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; o.email &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r.email)
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; b.date      &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; date,
       &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt;.email     &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; email,
       &lt;span style=&#34;color:#66d9ef&#34;&gt;COUNT&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt;.id) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;count&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; buckets b
         &lt;span style=&#34;color:#66d9ef&#34;&gt;LEFT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;JOIN&lt;/span&gt; groups &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt; b.date &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt;.date &lt;span style=&#34;color:#66d9ef&#34;&gt;AND&lt;/span&gt; b.date &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; INTERVAL &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-1 day&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt;.date
&lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; b.date, &lt;span style=&#34;color:#66d9ef&#34;&gt;g&lt;/span&gt;.email
&lt;span style=&#34;color:#66d9ef&#34;&gt;ORDER&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; date;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;the-result&#34;&gt;The Result&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;date,email,count
2023-01-01 00:00:00.000000,email1@example.com,1
2023-01-02 00:00:00.000000,email2@example.com,1
2023-01-03 00:00:00.000000,email3@example.com,1
2023-01-04 00:00:00.000000,email4@example.com,1
2023-01-05 00:00:00.000000,email1@example.com,1
2023-01-05 00:00:00.000000,email5@example.com,1
2023-01-06 00:00:00.000000,email2@example.com,1
2023-01-06 00:00:00.000000,Other,1
2023-01-07 00:00:00.000000,email3@example.com,1
2023-01-07 00:00:00.000000,Other,1
2023-01-08 00:00:00.000000,email4@example.com,1
2023-01-08 00:00:00.000000,Other,1
2023-01-09 00:00:00.000000,email5@example.com,1
2023-01-09 00:00:00.000000,Other,1
2023-01-10 00:00:00.000000,Other,3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As same as we expected it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Create unique index on non-unique data</title>
      <link>https://manhtai.github.io/posts/sql-create-unique-index-on-non-unique-data/</link>
      <pubDate>Fri, 21 Oct 2022 09:27:59 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/sql-create-unique-index-on-non-unique-data/</guid>
      <description>&lt;p&gt;The title is a clickbait. You can&amp;rsquo;t do that unless some data migrations were
done.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say we have a font variant table with below schema:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; font_variants (
  family  VARCHAR(&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;)  &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
  weight  INT           &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
  style   VARCHAR(&lt;span style=&#34;color:#ae81ff&#34;&gt;255&lt;/span&gt;)  &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,
  user_id UUID          &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All is good until after a while, we realize that a variant is unique by
(&lt;code&gt;family&lt;/code&gt;, &lt;code&gt;weight&lt;/code&gt;, &lt;code&gt;style&lt;/code&gt;) and we should enforce that on database level.
The problem is old data were filled up with not unique rows, when we try to
create an unique index like this, it will fail:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;UNIQUE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;INDEX&lt;/span&gt; font_variants_family_weight_style_idx &lt;span style=&#34;color:#66d9ef&#34;&gt;ON&lt;/span&gt;
font_variants(user_id, family, weight, style);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can&amp;rsquo;t make those rows unique unless we change the row data. Fortunately,
browsers are &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight#fallback_weights&#34;&gt;handling&lt;/a&gt; font-weight gracefully and we can do the migration
by changing the weight without huge impact on font display, even if you using
the weight on database for rendering font CSS directly.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s increase weight by the duplication number on each duplicated row:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; font_variants
&lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; weight &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; weight &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; rn &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; id, row_number() OVER (PARTITION &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; user_id, family, weight, style) rn
      &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; font_variants) fv
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; font_variants.id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fv.id;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;re good to do the unique index creation now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Upgrade Postgres major version with near-zero-downtime</title>
      <link>https://manhtai.github.io/posts/upgrade-postgres-major-version-with-near-zero-downtime/</link>
      <pubDate>Mon, 20 Jun 2022 07:32:27 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/upgrade-postgres-major-version-with-near-zero-downtime/</guid>
      <description>&lt;p&gt;Our system have a typical facing API and some workers which do jobs on the
background. All of them have read/write access to the Postgres instance. Our
instance is not very big, but when we try to upgrade using AWS console on the
clone, it takes more than 20 minutes and that&amp;rsquo;s not acceptable.
Hence we were looking elsewhere, and find &lt;a href=&#34;https://aws.amazon.com/blogs/database/achieving-minimum-downtime-for-major-version-upgrades-in-amazon-aurora-for-postgresql-using-aws-dms/&#34;&gt;a solution&lt;/a&gt; from AWS using DMS.
It worked out pretty well for us.&lt;/p&gt;
&lt;h2 id=&#34;step-by-step&#34;&gt;Step by step&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Clone a new instance from our current database, truncate all tables and
upgrade the new database to the latest version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Full load and then CDC sync between the old database and the new one.
Monitor the latency as well as table statistics.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stop all writing tasks (API &amp;amp; workers) to old database.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stop DMS job.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Switch database connection to the new one and restart all writing tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Verify, then clean up old resources.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;catches&#34;&gt;Catches&lt;/h2&gt;
&lt;p&gt;Current DMS engine (3.4.6) has some problems with some column types. But we
can resolve them quickly thanks to clear error logs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;varchar&lt;/code&gt; (without n), we have to convert it to &lt;code&gt;text&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;jsonb not null&lt;/code&gt;, we have to make it nullable&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But in overall the upgrade process is smooth, we still got some downtime but
it&amp;rsquo;s insignificant.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Postgres: Update object items on JSONB array</title>
      <link>https://manhtai.github.io/posts/postgres-update-object-item-on-jsonb-array/</link>
      <pubDate>Mon, 25 Apr 2022 17:12:38 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/postgres-update-object-item-on-jsonb-array/</guid>
      <description>&lt;h2 id=&#34;problem&#34;&gt;Problem:&lt;/h2&gt;
&lt;p&gt;We have a table with a JSONB array column &lt;code&gt;data&lt;/code&gt; which contains many objects:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
  {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dog&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dog-1&amp;#34;&lt;/span&gt;},
  {&lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cat&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cat-1&amp;#34;&lt;/span&gt;}
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;How do we change the name field from &lt;code&gt;&amp;quot;type&amp;quot;&lt;/code&gt; into &lt;code&gt;&amp;quot;kind&amp;quot;&lt;/code&gt; and keep all related data?&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s assume table &lt;code&gt;animals&lt;/code&gt; has 2 columns: &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;answer&#34;&gt;Answer:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;UPDATE&lt;/span&gt; animals
&lt;span style=&#34;color:#66d9ef&#34;&gt;SET&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; (
         &lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; id,
                jsonb_agg(
                        jsonb_build_object(
                                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;, elem &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;id&amp;#39;&lt;/span&gt;,
                                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kind&amp;#39;&lt;/span&gt;, elem &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;
                            )
                    ) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt;
         &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; animals,
              jsonb_array_elements(&lt;span style=&#34;color:#66d9ef&#34;&gt;CASE&lt;/span&gt; jsonb_typeof(&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;WHEN&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;array&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;THEN&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ELSE&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;[]&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;END&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; elem
         &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;kind&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;
         &lt;span style=&#34;color:#66d9ef&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BY&lt;/span&gt; animals.id
     ) &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; animals.id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;new&lt;/span&gt;.id;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Update partially and return fully in Go</title>
      <link>https://manhtai.github.io/posts/golang-update-partially-and-return-fully/</link>
      <pubDate>Fri, 31 Dec 2021 20:25:07 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/golang-update-partially-and-return-fully/</guid>
      <description>&lt;p&gt;In typical CRUD applications, it&amp;rsquo;s common these days that your update
APIs work properly on objects in a partial way. You should not enforcing
the client to send the whole object to update just a field anymore. And with
Postgres &lt;code&gt;returning&lt;/code&gt; clause, we can return all object data despite being
updated only some of them.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s say you have to update a Student object, we will define all its fields
as pointers so when the client doesn&amp;rsquo;t send up anything, it will be nil:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Student&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
      &lt;span style=&#34;color:#a6e22e&#34;&gt;Age&lt;/span&gt;  &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We must use pointers here because otherwise, we can&amp;rsquo;t differ default zero values
with not-set values that are sent from the client. To update the record, we
come up with two answers.&lt;/p&gt;
&lt;h2 id=&#34;1-case-when-with-returning&#34;&gt;1. CASE WHEN&amp;hellip; with RETURNING&lt;/h2&gt;
&lt;p&gt;In the database interface, we will choose the fields that need to update and
return all object data when done, we use &lt;code&gt;pgx&lt;/code&gt; and &lt;code&gt;scany&lt;/code&gt; package here for
executing query and scanning data back to Go struct:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;os&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/jackc/pgx/v4&amp;#34;&lt;/span&gt;
      &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;github.com/georgysavva/scany/pgxscan&amp;#34;&lt;/span&gt;
)


&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
      &lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;pgx&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Connect&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;context&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Background&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Getenv&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;DATABASE_URL&amp;#34;&lt;/span&gt;))

      &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;`
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      UPDATE students
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      SET
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          name = CASE WHEN $1 = true THEN $2 ELSE name END,
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          age = CASE WHEN $3 = true THEN $4 ELSE age END
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;      RETURNING
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;          name, age`&lt;/span&gt;

      &lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;conn&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Query&lt;/span&gt;(
         &lt;span style=&#34;color:#a6e22e&#34;&gt;ctx&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;query&lt;/span&gt;,
         &lt;span style=&#34;color:#a6e22e&#34;&gt;student&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;student&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt;,
         &lt;span style=&#34;color:#a6e22e&#34;&gt;student&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Age&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;student&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Age&lt;/span&gt;
      )
      &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()

      &lt;span style=&#34;color:#a6e22e&#34;&gt;stud&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Student&lt;/span&gt;{}

      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Next&lt;/span&gt;() {
          &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;pgxscan&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ScanRow&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stud&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;rows&lt;/span&gt;)
      }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This solution looks OK, but we can&amp;rsquo;t validate the object with all fields
available at the same time before updating into the database. Hence the
second approach.&lt;/p&gt;
&lt;h2 id=&#34;2-select-first-update-later&#34;&gt;2. SELECT first, UPDATE later&lt;/h2&gt;
&lt;p&gt;No code is needed to explain this method. First you retrieve the object from
the database, then change those fields that need updating (non-nil fields),
do whatever validation required, and then write the whole object back.&lt;/p&gt;
&lt;p&gt;Despite we must always do a SELECT before an UPDATE, this should be the
preferred solution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Benchmark Postgres Index Performance</title>
      <link>https://manhtai.github.io/posts/benchmark-postgres-index-performance/</link>
      <pubDate>Tue, 02 Nov 2021 14:42:35 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/benchmark-postgres-index-performance/</guid>
      <description>&lt;h2 id=&#34;the-question&#34;&gt;The question&lt;/h2&gt;
&lt;p&gt;We had a table contains 150.000 rows and 6 text columns. We do some &lt;code&gt;select&lt;/code&gt;
query using exact match by each of the columns. 150k rows is not too much for
indexing all the 6 columns, right? Let&amp;rsquo;s do a benchmark!&lt;/p&gt;
&lt;h2 id=&#34;the-benchmark&#34;&gt;The benchmark&lt;/h2&gt;
&lt;h3 id=&#34;1-create-table&#34;&gt;1. Create table&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; bench &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt;
    md5(random()::text) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; a,
    md5(random()::text) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; b,
    md5(random()::text) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;c&lt;/span&gt;,
    md5(random()::text) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; d,
    md5(random()::text) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; e,
    md5(random()::text) &lt;span style=&#34;color:#66d9ef&#34;&gt;AS&lt;/span&gt; f
&lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt;
    generate_series(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;150000&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;2-select-without-index&#34;&gt;2. Select without index&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select * from bench where a = &amp;#39;a&amp;#39; and b = &amp;#39;b&amp;#39; and c = &amp;#39;c&amp;#39; and d = &amp;#39;d&amp;#39; and e = &amp;#39;e&amp;#39; order by f limit 1;&amp;#34;&lt;/span&gt; | pgbench -d postgres -t &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; -P &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -f -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;latency average = 23.562 ms
latency stddev = 0.946 ms
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;3-create-index&#34;&gt;3. Create index&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;index&lt;/span&gt; bench_a &lt;span style=&#34;color:#66d9ef&#34;&gt;on&lt;/span&gt; bench(a);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The way you choose indexes here depends on the cardinality or uniqueness of the data.
We use random data here so one index is enough, and it will perform almost exactly as
when you index all 6 columns!&lt;/p&gt;
&lt;h3 id=&#34;4-select-with-index&#34;&gt;4. Select with index&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;select * from bench where a = &amp;#39;a&amp;#39; and b = &amp;#39;b&amp;#39; and c = &amp;#39;c&amp;#39; and d = &amp;#39;d&amp;#39; and e = &amp;#39;e&amp;#39; order by f limit 1;&amp;#34;&lt;/span&gt; | pgbench -d postgres -t &lt;span style=&#34;color:#ae81ff&#34;&gt;50&lt;/span&gt; -P &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; -f -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Result:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;latency average = 0.357 ms
latency stddev = 0.354 ms
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;the-answer&#34;&gt;The answer&amp;hellip;&lt;/h2&gt;
&lt;p&gt;&amp;hellip;is yes. Indexing makes your queries 66 times faster!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>