<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>react on Go slowly</title>
    <link>https://manhtai.github.io/tags/react/</link>
    <description>Recent content in react on Go slowly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Jul 2021 11:00:04 +0700</lastBuildDate>
    
        <atom:link href="https://manhtai.github.io/tags/react/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Electron with React: How to open a native dialog</title>
      <link>https://manhtai.github.io/posts/electron-react-open-native-dialog/</link>
      <pubDate>Sat, 24 Jul 2021 11:00:04 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/electron-react-open-native-dialog/</guid>
      <description>&lt;p&gt;Recently I&amp;rsquo;m building a desktop app for developers who are working with
plain text: &lt;a href=&#34;https://github.com/plainbelt/plainbelt&#34;&gt;PlainBelt&lt;/a&gt;. It uses Electron with React &lt;a href=&#34;https://github.com/electron-react-boilerplate/electron-react-boilerplate&#34;&gt;boilerplate&lt;/a&gt;
(ERB), and the old mighty &lt;strong&gt;remote&lt;/strong&gt; module &lt;a href=&#34;https://github.com/electron/electron/issues/21408&#34;&gt;won&amp;rsquo;t work&lt;/a&gt; anymore.&lt;/p&gt;
&lt;p&gt;So how can we open a native dialog without the &lt;strong&gt;remote&lt;/strong&gt; module?&lt;/p&gt;
&lt;h3 id=&#34;register-event-handler-on-the-main-process&#34;&gt;Register event handler on the Main process&lt;/h3&gt;
&lt;p&gt;In ERB, the Main filename happens to be &lt;code&gt;main.dev.ts&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ipcMain&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;handle&lt;/span&gt;(
  &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;open-file&amp;#39;&lt;/span&gt;,
  &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;_event&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;IpcMainInvokeEvent&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;filters&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;FileFilter&lt;/span&gt;[]) &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dialog&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;showOpenDialog&lt;/span&gt;({
      &lt;span style=&#34;color:#a6e22e&#34;&gt;properties&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;openFile&amp;#39;&lt;/span&gt;],
      &lt;span style=&#34;color:#a6e22e&#34;&gt;filters&lt;/span&gt;,
    });

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt;) {
      &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buffer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;promisify&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;fs&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;readFile&lt;/span&gt;)(&lt;span style=&#34;color:#a6e22e&#34;&gt;files&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;filePaths&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]);
      &lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;buffer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;toString&lt;/span&gt;();
    }
    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;;
  }
);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This function will open a native dialog with options that you define on
&lt;code&gt;filters&lt;/code&gt; and return an object that contains a list of file paths.
We just read the first file content and return it to the renderer.&lt;/p&gt;
&lt;h3 id=&#34;invoke-from-renderer-process&#34;&gt;Invoke from Renderer process&lt;/h3&gt;
&lt;p&gt;From a React component, we can invoke the registered handler in Main:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; [&lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;setContent&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;useState&lt;/span&gt;()

  &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleOpen&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;async&lt;/span&gt; () &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;filters&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [{ &lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Text Files&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;extensions&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;txt&amp;#39;&lt;/span&gt;] }];
    &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;await&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ipcRenderer&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;invoke&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;open-file&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;filters&lt;/span&gt;);
    &lt;span style=&#34;color:#a6e22e&#34;&gt;setContent&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;content&lt;/span&gt;);
  };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We get the content back, now do whatever you want with it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setup TailwindCSS for React</title>
      <link>https://manhtai.github.io/posts/setup-tailwindcss-for-react/</link>
      <pubDate>Sun, 01 Nov 2020 15:10:07 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/setup-tailwindcss-for-react/</guid>
      <description>&lt;h2 id=&#34;1-basic-setup&#34;&gt;1. Basic setup&lt;/h2&gt;
&lt;p&gt;After installing TailwindCSS and doing &lt;a href=&#34;https://tailwindcss.com/docs/installation&#34;&gt;the basic setup&lt;/a&gt;, you need
PostCSS-CLI to build out &lt;code&gt;main.css&lt;/code&gt;, setup some commands in &lt;code&gt;package.json&lt;/code&gt;
to do that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &amp;quot;scripts&amp;quot;: {
    &amp;quot;start&amp;quot;: &amp;quot;npm run watch:css &amp;amp;&amp;amp; react-scripts start&amp;quot;,
    &amp;quot;build&amp;quot;: &amp;quot;npm run build:css &amp;amp;&amp;amp; react-scripts build&amp;quot;,
    &amp;quot;deploy&amp;quot;: &amp;quot;NODE_ENV=production npm run build&amp;quot;,
    &amp;quot;test&amp;quot;: &amp;quot;react-scripts test&amp;quot;,
    &amp;quot;eject&amp;quot;: &amp;quot;react-scripts eject&amp;quot;,
    &amp;quot;watch:css&amp;quot;: &amp;quot;postcss src/css/tailwind.css -o src/css/main.css&amp;quot;,
    &amp;quot;build:css&amp;quot;: &amp;quot;postcss src/css/tailwind.css -o src/css/main.css&amp;quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Don&amp;rsquo;t forget to import &lt;code&gt;main.css&lt;/code&gt; in your React index file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &#39;./css/main.css&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2-install-font-family&#34;&gt;2. Install font family&lt;/h2&gt;
&lt;p&gt;Choose your favorite font from a &lt;code&gt;fontsouce-*&lt;/code&gt; package and extend Tailwind
config, I choose &amp;lsquo;Nunito&amp;rsquo;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;theme: {
  extend: {
    fontFamily: {
      sans: [&amp;quot;Nunito&amp;quot;, ...defaultTheme.fontFamily.sans]
    }
  },
},
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Remember to include the font in your index file, too:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import &#39;fontsource-nunito&#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;3-set-default-color&#34;&gt;3. Set default color&lt;/h2&gt;
&lt;p&gt;If you don&amp;rsquo;t want black as your default text body color, override it in
plugins config, I choose &lt;code&gt;blue-900&lt;/code&gt; as my default color, so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  plugins: [
    plugin(function({ addBase, config }) {
      addBase({
        &#39;body&#39;: { color: config(&#39;theme.colors.blue.900&#39;) },
      })
    })
  ],
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;4-purge-unused-css&#34;&gt;4. Purge unused CSS&lt;/h2&gt;
&lt;p&gt;Full size of TailwindCSS is around 2MB, but you rarely use it all, TailwindCSS
&lt;a href=&#34;https://tailwindcss.com/docs/controlling-file-size&#34;&gt;official guide&lt;/a&gt; recommends not to use string concatenation to create class
names, but if you still want to do that, use whitelist patterns to bypass the
cleaning.&lt;/p&gt;
&lt;p&gt;For example if I want to keep all colors for background and text:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  purge: {
    content: [
      &amp;quot;./src/**/*.{ts,tsx,html}&amp;quot;,
    ],
    options: {
      whitelistPatterns: [/^bg-/, /^text-/],
    },
  },
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can find my full setup for my &lt;a href=&#34;https://metaboard.net&#34;&gt;new React app&lt;/a&gt; in &lt;a href=&#34;https://github.com/manhtai/metaboard&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>