<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go slowly</title>
    <link>https://manhtai.github.io/</link>
    <description>Recent content on Go slowly</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Dec 2018 22:12:09 +0700</lastBuildDate>
    
        <atom:link href="https://manhtai.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>2018 in Review</title>
      <link>https://manhtai.github.io/posts/2018-in-review/</link>
      <pubDate>Sun, 30 Dec 2018 22:12:09 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/2018-in-review/</guid>
      <description>

&lt;p&gt;A year has come to an end, and now is the time to throw back.&lt;/p&gt;

&lt;p&gt;This year I&amp;rsquo;ve learned a lot, run a lot and fail some.&lt;/p&gt;

&lt;h2 id=&#34;1-coding&#34;&gt;1. Coding&lt;/h2&gt;

&lt;p&gt;I have found new things to learn through all the year, some of them worth
mentioning here are:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Things I&amp;rsquo;ve learned:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;- &lt;em&gt;Go&lt;/em&gt;, then build a &lt;a href=&#34;https://manhtai.github.io/posts/chat-app-in-golang/&#34;&gt;chat app&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;- &lt;em&gt;Cryptography&lt;/em&gt;, taught by a brilliant &lt;a href=&#34;https://manhtai.github.io/posts/8-weeks-crypto-write-up/&#34;&gt;teacher&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;- &lt;em&gt;Google Cloud Platform&lt;/em&gt;, for work&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;- &lt;em&gt;Apache Airflow &amp;amp; Apache Beam&lt;/em&gt; for data ingestion (I should write a blog
about these)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;- &lt;em&gt;Design patterns&lt;/em&gt; in Java&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Go and Java are two more programming languages that are in my belt now, love
to use both of them so far.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Things I&amp;rsquo;ve dropped:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;- &lt;em&gt;Operating System&lt;/em&gt; class&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;- &lt;em&gt;Computer Vision&lt;/em&gt; class&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first one is too hard, the second one is not attracted me anymore, so I&amp;rsquo;ve
decided to quit early.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Things I am going to learn:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;- &lt;em&gt;MOOC&lt;/em&gt;: Create a programming course in Vietnamese&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As you may know, I&amp;rsquo;m a self-taught developer, hence it will never be enough for
me to learn how to code. But I think it might come the time that I am
certified to reteach what I&amp;rsquo;ve learned to those people who just be like me
when I was started. Hope I will learn new things along the way, too.
&lt;a href=&#34;https://techcamp.vn&#34;&gt;techcamp.vn&lt;/a&gt; is registered and ready to go live. Wait for it!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;- &lt;em&gt;Microservices&lt;/em&gt;: Building microservices in Go and Java&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve build many monolith applications and none of microservices, so I will try
to build one next year.&lt;/p&gt;

&lt;h2 id=&#34;2-running&#34;&gt;2. Running&lt;/h2&gt;

&lt;p&gt;I love running. This year I&amp;rsquo;ve completed 2 full marathons, one in Danang and
another one in Hanoi. I&amp;rsquo;ve trained hard for the first one, not too hard for
the second, because I found out that Hanoi&amp;rsquo;s air quality is extremely bad for
your health. Now I only go to run when &lt;a href=&#34;http://aqicn.org/city/vietnam/hanoi/us-embassy/&#34;&gt;AQI&lt;/a&gt; is bad for sensitive people
group (!?) or lower.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t have much hope for improvement of air quality in Hanoi next year, so
I may not keep the record up. I really feel bad about this.&lt;/p&gt;

&lt;h2 id=&#34;3-reading&#34;&gt;3. Reading&lt;/h2&gt;

&lt;p&gt;I read technical books a lot, I&amp;rsquo;ve subscribed to &lt;a href=&#34;https://safaribooksonline.com&#34;&gt;Safaribooksonline&lt;/a&gt; so
I can read as many books as I want. Video tutorials are quite good, too.&lt;/p&gt;

&lt;p&gt;Some none technical books I&amp;rsquo;ve read this year include &amp;ldquo;Sapiens: A Brief
History of Humankind&amp;rdquo;, &amp;ldquo;Zero to One: Notes on Startups, or How to Build the
Future&amp;rdquo;, and some that I can&amp;rsquo;t remember.&lt;/p&gt;

&lt;p&gt;Next year I will keep track of all none technical books I read in Goodreads so
I will have some things to write in the year end post.&lt;/p&gt;

&lt;p&gt;2018 is a satisfied year for me. More chances in 2019 for me to explore. Can&amp;rsquo;t
wait!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Dockerize Django Vue web app</title>
      <link>https://manhtai.github.io/posts/django-vue-docker/</link>
      <pubDate>Fri, 24 Aug 2018 22:42:47 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/django-vue-docker/</guid>
      <description>

&lt;p&gt;Recently I&amp;rsquo;ve fired up multiple Django projects for my company. Most of them
follow a typical setup with Nginx + Gunicorn + Supervisord in a big Ubuntu
virtual machine. I must say that the setup works quite well, but sometimes,
when having not much more work to do, I strike for better by trying to
dockerize them.&lt;/p&gt;

&lt;h2 id=&#34;1-dockerize-django-vue-app-with-nginx-gunicorn&#34;&gt;1) Dockerize Django-Vue app with Nginx &amp;amp; Gunicorn&lt;/h2&gt;

&lt;p&gt;I want to start with an app that has Vue as frontend. This method works with
all frontend frameworks, it just happens that we use Vue. The Vue part has a
separate repo so backend and frontend developers can work simultaneously. But
to build the docker image in the easiest way I put them into one by using git
submodule.&lt;/p&gt;

&lt;p&gt;To build frontend part, I use &lt;code&gt;node:8&lt;/code&gt; image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM node:8 as frontend

RUN mkdir /code
WORKDIR /code
ADD ./frontend /code/
RUN npm install yarn &amp;amp;&amp;amp; yarn &amp;amp;&amp;amp; yarn run build
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I use &lt;code&gt;python:3.7-slim-stretch&lt;/code&gt; to build backend, install &lt;code&gt;nginx&lt;/code&gt;,
&lt;code&gt;supervisord&lt;/code&gt; to the same image. Note that Nginx and Supervisord
configuration must be customized to run inside a Docker container.
You can refer to &lt;a href=&#34;https://github.com/tiangolo/uwsgi-nginx-docker/blob/master/python3.6-alpine3.7/Dockerfile&#34;&gt;uwsgi-nginx-docker&lt;/a&gt; repo for more insights.&lt;/p&gt;

&lt;p&gt;In case you still wonder, I use Supervisord to run Gunicorn and Nginx.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM python:3.7-slim-stretch

# Install wget, gnupg to get nginx
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y wget gnupg

RUN echo &amp;quot;deb http://nginx.org/packages/mainline/debian/ stretch nginx&amp;quot; &amp;gt;&amp;gt; /etc/apt/sources.list
RUN wget https://nginx.org/keys/nginx_signing.key -O - | apt-key add - &amp;amp;&amp;amp; \
  apt-get update &amp;amp;&amp;amp; \
  apt-get install -y nginx supervisor &amp;amp;&amp;amp; \
  rm -rf /var/lib/apt/lists/*

# Remove wget, gnupg
RUN apt-get purge -y --auto-remove wget gnupg

# Add code folder
RUN mkdir /code
WORKDIR /code
ADD . /code/

# Nginx configuration
RUN echo &amp;quot;daemon off;&amp;quot; &amp;gt;&amp;gt; /etc/nginx/nginx.conf
RUN rm /etc/nginx/conf.d/default.conf
COPY deploy/nginx_docker.conf /etc/nginx/conf.d/nginx_docker.conf

# Supervisor configuration
COPY deploy/supervisor_docker.conf /etc/supervisor/conf.d/supervisor_docker.conf
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I use &lt;a href=&#34;https://pipenv.readthedocs.io/&#34;&gt;pipenv&lt;/a&gt; instead of requirements file to manage dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Install python lib dep
RUN pip install pipenv
RUN pipenv install --system --deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that, collect staticfiles and expose them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Set env to production
ENV DJANGO_SETTINGS_MODULE myapp.settings.production

# Collect static files
RUN (cd myapp; python manage.py collectstatic --noinput)

VOLUME [&amp;quot;/code/myapp/public&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then copy frontend code from frontend build image to our main image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;COPY --from=frontend /code/dist/ /code/dist/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And lastly, expose port for running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;EXPOSE 80 443

CMD [&amp;quot;/usr/bin/supervisord&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it. We&amp;rsquo;ve had a Dockerfile that contains all frontend, backend and
a web server ready to use.&lt;/p&gt;

&lt;p&gt;The reality that we can&amp;rsquo;t build our Docker images by hands takes us to a CD
tool, and which tool should it be?&lt;/p&gt;

&lt;h2 id=&#34;2-cd-pipeline-using-drone-io&#34;&gt;2) CD pipeline using Drone.io&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve had some experience in writting Jenkinsfile for CD pipeline. It works
most of the time when I already had a Jenkins server running. But it costs me
hours and hours trying to set up a working Jenkins server in AWS, and then
I just quit. Some googling around, I found &lt;a href=&#34;https://drone.io&#34;&gt;Drone.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The setup is dead simple, just one &lt;code&gt;docker-compose.yml&lt;/code&gt; file and you got
a https CD server ready in minutes. I just fall in love with it immediately.&lt;/p&gt;

&lt;p&gt;My config file is this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: &#39;2&#39;

services:
  drone-server:
    image: drone/drone:0.8

    ports:
      - 80:80
      - 443:443
      - 9000:9000
    volumes:
      - ${HOME}/drone-data:/var/lib/drone/
    restart: always
    environment:
      - DRONE_OPEN=true
      - DRONE_ORGS=myteam
      - DRONE_ADMIN=myusername
      - DRONE_HOST=${DRONE_HOST}
      - DRONE_BITBUCKET=true
      - DRONE_BITBUCKET_CLIENT=${DRONE_BITBUCKET_CLIENT}
      - DRONE_BITBUCKET_SECRET=${DRONE_BITBUCKET_SECRET}
      - DRONE_SECRET=${DRONE_SECRET}
      - DRONE_LETS_ENCRYPT=true

  drone-agent:
    image: drone/agent:0.8

    command: agent
    restart: always
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DRONE_SERVER=drone-server:9000
      - DRONE_SECRET=${DRONE_SECRET}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You don&amp;rsquo;t need nginx or something like just, just &lt;code&gt;docker-compose up -d&lt;/code&gt; and
it&amp;rsquo;s set. I wish all web applications are just simple as that!&lt;/p&gt;

&lt;p&gt;Now you must define a &lt;code&gt;.drone.yml&lt;/code&gt; file in your web server project, and it is
dead simple, too.&lt;/p&gt;

&lt;p&gt;Here is the script for building the Docker image and then push it to AWS ECR:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;clone:
  git:
    image: plugins/git
    recursive: true
    # Override here so you don&#39;t have to edit it in your repo
    submodule_override:
      frontend: https://bitbucket.org/myteam/myapp.git

pipeline:
  ecr:
    image: plugins/ecr
    repo: &amp;lt;account-id&amp;gt;.dkr.ecr.ap-southeast-1.amazonaws.com/myapp
    registry: &amp;lt;account-id&amp;gt;.dkr.ecr.ap-southeast-1.amazonaws.com
    secrets: [ ecr_access_key, ecr_secret_key ]
    region: ap-southeast-1

  slack:
    image: plugins/slack
    channel: drone
    secrets: [ slack_webhook ]
    when:
      status: [ success, failure ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And now in our server, &lt;code&gt;docker-compose.yml&lt;/code&gt; file is now very simple:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;version: &#39;2&#39;

services:
  myapp:
    image: &amp;lt;account-id&amp;gt;.dkr.ecr.ap-southeast-1.amazonaws.com/myapp:latest

    ports:
      - 80:80
      - 443:443
    restart: always
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that to pull images from ECR, you may need an &lt;a href=&#34;https://github.com/awslabs/amazon-ecr-credential-helper&#34;&gt;ECR credential helper&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;3-conclusion&#34;&gt;3) Conclusion&lt;/h2&gt;

&lt;p&gt;Now to start your server, you just need to run &lt;code&gt;docker-compose up -d&lt;/code&gt; and it&amp;rsquo;s
set! Our Django app is just like a typical Golang app: one Docker image and
nothing more.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve crossed out some things here so you can find out for yourself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;- Add test step to Drone pipeline (if you had some!).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;- Add deploy step to Drone pipeline so it can be complete.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;- Use another container scheduling and management system like &lt;a href=&#34;https://kubernetes.io/&#34;&gt;Kubernetes&lt;/a&gt;
instead of Docker compose.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How to print Unicode text to a Thermal printer using React Native</title>
      <link>https://manhtai.github.io/posts/print-unicode-to-thermal-printer-using-react-native/</link>
      <pubDate>Sat, 23 Jun 2018 21:17:15 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/print-unicode-to-thermal-printer-using-react-native/</guid>
      <description>&lt;p&gt;In previous &lt;a href=&#34;https://manhtai.github.io/posts/building-erp-using-django-react-native&#34;&gt;post&lt;/a&gt; about using React Native to build our own ERP app, I&amp;rsquo;ve
mentioned about printing Vietnamese characters to a &lt;a href=&#34;https://en.wikipedia.org/wiki/Thermal_printing&#34;&gt;thermal printer&lt;/a&gt;, in
this post I will show you how to do it.&lt;/p&gt;

&lt;p&gt;Although this post is about printing Vietnamese using React Native, you must
keep in mind that it is not only apply to Vietnamese and React Native, but
for any &lt;em&gt;native&lt;/em&gt; mobile framework to print Unicode characters to a thermal
printer. Just make sure your language is supported in thermal printer &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_page&#34;&gt;code
page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Firstly, you must get a library to print arbitrary characters to a thermal
printer. We used &lt;a href=&#34;https://github.com/rusel1989/react-native-bluetooth-serial&#34;&gt;react-native-bluetooth-serial&lt;/a&gt; for our ERP app.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s API for printing out a message as simple as this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;BluetoothSerial.write(Buffer|String data)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Secondly, you must know that a thermal printer will support some kind of
ESC/POS commands for parameterizing printed characters, like changing
font family, font size, barcode printing, etc. Depending on what thermal
printer manufacturer you are using, it will have some groups of commands that
we can use, for example, we can find ECS/POS reference about Epson printer
&lt;a href=&#34;http://content.epson.de/fileadmin/content/files/RSD/downloads/escpos.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So all we need to print out Vietnamese characters is to send out some
commands to set up the printer for using Vietnamese font and &lt;a href=&#34;https://en.wikipedia.org/wiki/Code_page&#34;&gt;code page&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Our thermal printer does support only TCVN3 code page, so we must encode our
Unicode message to TCVN3, and then just print it out, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// We use iconv to convert Unicode message to TCVN3
const TCVN3message = iconv.encode(message, &#39;tcvn&#39;);

// [0x1b, 0x74, 48] is POS command for set up TCVN3 code page
const TCVN3codepage = new Buffer([0x1b, 0x74, 48]);

// Push write command to Promise array
const writePromises = [];
writePromises.push(BluetoothSerial.write(TCVN3codepage));
writePromises.push(BluetoothSerial.write(TCVN3message));

// Print out messages
Promise.all(writePromises);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That&amp;rsquo;s it!&lt;/p&gt;

&lt;p&gt;Using ESC/POS commands, we can customize our printing format even more, like
font size, font weight, etc. Another longer ESC/POS reference can be found
&lt;a href=&#34;http://www.aures-support.fr/DATA/utility/Commande%20ESCPOS.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A minor thing to note is that some printer will not default to character font
A for us, so the text might get too little or too large. You can use a command
to set it to character font A, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const characterFontA = new Buffer([0x1b, 0x21, 0]);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Have fun printing things out!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>8 weeks Crypto write up</title>
      <link>https://manhtai.github.io/posts/8-weeks-crypto-write-up/</link>
      <pubDate>Fri, 25 May 2018 20:17:49 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/8-weeks-crypto-write-up/</guid>
      <description>&lt;p&gt;After planing for &lt;a href=&#34;https://manhtai.github.io/posts/12-weeks-onto-crypto&#34;&gt;12 weeks onto Crypto&lt;/a&gt;, I&amp;rsquo;ve tried to read &lt;a href=&#34;https://www.amazon.com/exec/obidos/ASIN/0470474246/counterpane/&#34;&gt;the book&lt;/a&gt;,
but without luck: I don&amp;rsquo;t understand things quite clear, if not nothing at
all. And then I found &lt;a href=&#34;https://www.youtube.com/channel/UC1usFRN4LCMcfIV7UjHNuQg/videos&#34;&gt;this course&lt;/a&gt; by Christof Paar, in companion with his
book: &lt;a href=&#34;https://github.com/manhtai/understanding-cryptography&#34;&gt;Understanding Cryptography&lt;/a&gt;. The course &amp;amp; the book are just
brilliant!&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s very easy to understand hard concepts which are explained by the
professor. The course includes 24 videos, one for each week of study, but
I finish it within 8 weeks. It&amp;rsquo;s extremely intense and I can&amp;rsquo;t say my brain
takes it all, but I&amp;rsquo;ve learned so much, some are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Symmetric cipher: DES, AES&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Three families of asymmetric cryptography: integer factorization (RSA),
discrete log (DH, Elgamal) &amp;amp; elliptic curves (ECDH)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Digital signatures &amp;amp; Hash functions&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;ve done &lt;a href=&#34;https://github.com/manhtai/understanding-cryptography&#34;&gt;some&lt;/a&gt; of the problems using Go. I&amp;rsquo;ve left out many problems
which are related to calculating the time neccessary to brute-force a cipher,
and some more. That is something I am lack of, basic knowledge about
&lt;strong&gt;Operating System&lt;/strong&gt;. It&amp;rsquo;s not just what parts the computer is built from,
it&amp;rsquo;s about how it really works.&lt;/p&gt;

&lt;p&gt;So I guess it&amp;rsquo;s 12 weeks more, to dig down in Operating System.&lt;/p&gt;

&lt;p&gt;See you then :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Drain ECS instances before scaling down in EC2</title>
      <link>https://manhtai.github.io/posts/drain-ecs-before-scaling-in-ec2/</link>
      <pubDate>Mon, 21 May 2018 17:33:18 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/drain-ecs-before-scaling-in-ec2/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problem&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;We have 2 independent auto scaling systems: EC2 auto scaling groups which
scales instances number &amp;amp; ECS auto scaling which scales tasks number. This
setup may work fine when scaling up. Still, if new tasks need more instances
to start up, it must wait for them, but it&amp;rsquo;s ok to wait a little.&lt;/p&gt;

&lt;p&gt;But things soon become disaster when EC2 instances terminates &lt;strong&gt;before&lt;/strong&gt;
ECS tasks draining out.&lt;/p&gt;

&lt;p&gt;Actually, ECS instances will not auto drain to be ready for terminating
instances in EC2, so don&amp;rsquo;t expect anything. We have to set that up manually.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Solution&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;An AWS official &lt;a href=&#34;https://aws.amazon.com/blogs/compute/how-to-automate-container-instance-draining-in-amazon-ecs/&#34;&gt;blog&lt;/a&gt; shows us how to do this, and it has a nice demo for
newly created EC2 &amp;amp; ECS setup. But what if we just want to set up for our
running ECS instances? Here it is.&lt;/p&gt;

&lt;p&gt;Firstly, make sure you know what &lt;a href=&#34;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html&#34;&gt;lifecycle hooks&lt;/a&gt; are. Then follow these
steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1) Create a lambda function using this &lt;a href=&#34;https://gist.github.com/manhtai/66dfdae56ebce7b6270788018516a409&#34;&gt;script&lt;/a&gt;. It is my fork of AWS
sample &lt;a href=&#34;https://github.com/aws-samples/ecs-cid-sample/blob/master/code/index.py&#34;&gt;script&lt;/a&gt;, but sucks less.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2) Set role for our lambda function to have these permissions:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;- autoscaling:CompleteLifecycleAction
- logs:CreateLogGroup
- logs:CreateLogStream
- logs:PutLogEvents
- ec2:DescribeInstances
- ec2:DescribeInstanceAttribute
- ec2:DescribeInstanceStatus
- ec2:DescribeHosts
- ecs:ListContainerInstances
- ecs:SubmitContainerStateChange
- ecs:SubmitTaskStateChange
- ecs:DescribeContainerInstances
- ecs:UpdateContainerInstancesState
- ecs:ListTasks
- ecs:DescribeTasks
- sns:Publish
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;3) Setup an SNS trigger for the function, choose a name for it.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;4) Setup a service role so Auto Scaling Groups can push to SNS, using &lt;a href=&#34;https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html#sns-notifications&#34;&gt;this
guide&lt;/a&gt;. (This is quite interesting because you have to set up a role so
that a service will have some kind of permission).&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;5) Create a lifecycle hook by CLI, since the &lt;strong&gt;GUI is not fully supported
yet&lt;/strong&gt;:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;aws autoscaling put-lifecycle-hook
  --lifecycle-hook-name EcsWebScaleDown
  --auto-scaling-group-name ecs-web
  --lifecycle-transition autoscaling:EC2_INSTANCE_TERMINATING
  --heartbeat-timeout 900
  --notification-target-arn arn:aws:sns:ap-southeast-1:XXXXXXXXXXXX:EcsInstanceDrain
  --role-arn arn:aws:iam::XXXXXXXXXXXX:role/AutoScalingNotificationRole
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should be good now, as advertised :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python 2to3 Transition</title>
      <link>https://manhtai.github.io/posts/python-2to3-transition/</link>
      <pubDate>Sat, 21 Apr 2018 12:05:19 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/python-2to3-transition/</guid>
      <description>&lt;p&gt;Recently I&amp;rsquo;ve upgraded one of our biggest projects from Python2.7 to Python3.6,
and the process is quite smooth. It tooks me almost 2 days to complete all
conversion needed, while other developers were still doing their dail jobs in
the project.&lt;/p&gt;

&lt;p&gt;Steps I made:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1, Run &lt;code&gt;2to3&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2, Fix the code so that all the tests passes again.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;3, Handle outlier cases &amp;amp; write tests for them. Those cases are somewhat
related to the diffirences between &lt;code&gt;unicode&lt;/code&gt; &amp;amp; &lt;code&gt;str&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some key notes here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;1, Having a solid unit tests system is critical.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;2, &lt;code&gt;2to3&lt;/code&gt; did all the heavy works, but you need to know the stuffs to get all
the shit done.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Memory Leak in Celery</title>
      <link>https://manhtai.github.io/posts/memory-leak-in-celery/</link>
      <pubDate>Sun, 15 Apr 2018 10:51:06 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/memory-leak-in-celery/</guid>
      <description>&lt;p&gt;Turn out Celery has &lt;a href=&#34;https://github.com/celery/celery/issues/1427&#34;&gt;some memory leaks&lt;/a&gt;. We don&amp;rsquo;t know that beforehand.
After deploying some Celery servers using AWS ECS we notice that all Celery
tasks will consume most of the server memory and then become idle.&lt;/p&gt;

&lt;p&gt;My first attempt was set &lt;a href=&#34;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html&#34;&gt;hard limit&lt;/a&gt; for container memory to 1GiB. And
guess what? Celery will consume 99.9% of that limit then become idle after
some times. It&amp;rsquo;s good for the server but doesn&amp;rsquo;t solve our problem.&lt;/p&gt;

&lt;p&gt;My second attempt was set &lt;code&gt;CELERYD_TASK_TIME_LIMIT&lt;/code&gt; to 300, so celery tasks
will be killed after 5 minutes no matter what. This time Celery continue to
take memory percentage as much as it can and then become inactive, but after
5 minutes it kills all the tasks to release memory and then back to work
normally.&lt;/p&gt;

&lt;p&gt;I thought it worked, but it didn&amp;rsquo;t.&lt;/p&gt;

&lt;p&gt;After running for some periods, Celery still hung. So it&amp;rsquo;s not due to the leak
anymore. Continue digging around, I found out the main reason Celery hangs is
due to &lt;a href=&#34;https://github.com/celery/celery/issues/2917&#34;&gt;some thread locks&lt;/a&gt; caused by &lt;a href=&#34;https://github.com/neo4j/neo4j-python-driver&#34;&gt;neo4j python driver&lt;/a&gt;. And that can
only be solved completely by changing the way neo4j driver save &amp;amp; fetch data
to async, which is still &lt;a href=&#34;https://github.com/neo4j/neo4j-python-driver/issues/180&#34;&gt;an open issue&lt;/a&gt; on GitHub. Although people gave
some temporary solutions to the problem, it&amp;rsquo;s only apply for Python3, and our
project is still Python2. Hence, a &lt;a href=&#34;https://manhtai.github.io/posts/python-2to3-transition&#34;&gt;transition&lt;/a&gt; from Python2 to Python3 is
needed.&lt;/p&gt;

&lt;p&gt;In the mean time, I set up a cronjob to restart Celery after some times to
remove the lock.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>12 weeks onto Crypto</title>
      <link>https://manhtai.github.io/posts/12-weeks-onto-crypto/</link>
      <pubDate>Sun, 25 Mar 2018 20:51:25 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/12-weeks-onto-crypto/</guid>
      <description>&lt;p&gt;I now commit 12 weeks to learn about Cryptography. That&amp;rsquo;s minimum time needed to
prepare for a marathon, and I think it should apply to crypto, too. My plan is
based on 12 weeks to read &lt;a href=&#34;https://www.amazon.com/exec/obidos/ASIN/0470474246/counterpane/&#34;&gt;Cryptography Engineering&lt;/a&gt; chapter by chapter.&lt;/p&gt;

&lt;p&gt;And after that, who &lt;a href=&#34;https://www.amazon.com/Mastering-Bitcoin-Programming-Open-Blockchain/dp/1491954388/&#34;&gt;knows&lt;/a&gt;?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django rate limit (and monkey patching)</title>
      <link>https://manhtai.github.io/posts/django-rate-limit/</link>
      <pubDate>Sat, 03 Mar 2018 10:08:15 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/django-rate-limit/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/jsocol/django-ratelimit&#34;&gt;Django Ratelimit&lt;/a&gt; is a good rate limiter for Django. It has a convenient
decorator for views, so we can do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;@ratelimit(key=&#39;post:username&#39;, rate=&#39;5/m&#39;)
def login(request):
    return HttpResponse()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to limit the times we can try to login with one specific username to
5 requests per minute.&lt;/p&gt;

&lt;p&gt;The decorator can be used with function-based views and class-based views, but
if we want to use it with built-in views, e.g. admin login view, we have to
monkey patch them.&lt;/p&gt;

&lt;p&gt;Django allows us to patch any function from any module when init app.
I usually do this in &lt;code&gt;AppConfig&lt;/code&gt; class, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class MyAppConfig(AppConfig):
    name = &#39;my_app&#39;

    def ready(self):
        from my_app.monkey_patching import patch
        patch()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And this is the &lt;code&gt;patch()&lt;/code&gt; function, for admin login view:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def patch():
    from django.contrib.admin.sites import AdminSite
    AdminSite.login = new_login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;new_login()&lt;/code&gt; is our patched function and &lt;code&gt;login()&lt;/code&gt; is original function
that handles requests for logging user in.&lt;/p&gt;

&lt;p&gt;The thing is we don&amp;rsquo;t want to rewrite &lt;code&gt;new_login()&lt;/code&gt; to be exactly like the old
&lt;code&gt;login()&lt;/code&gt; function with the &lt;code&gt;ratelimit&lt;/code&gt; decorator. We only want to &amp;ldquo;magically&amp;rdquo;
attach the decorator to the original function. How can we do that?&lt;/p&gt;

&lt;p&gt;One idea is to write a function to input function &lt;code&gt;login()&lt;/code&gt; and return function
&lt;code&gt;new_login()&lt;/code&gt; with &lt;code&gt;ratelimit&lt;/code&gt; decorator, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def limit_login(login):

    @ratelimit(key=&#39;post:username&#39;, rate=&#39;10/m&#39;, method=&#39;POST&#39;, block=True)
    def new_login(*args, **kwargs):
        return login(*args, **kwargs)

    return new_login
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now we can do this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def patch():
    from django.contrib.admin.sites import AdminSite
    AdminSite.login = limit_login(AdminSite.login)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can make &lt;code&gt;limit_login()&lt;/code&gt; function even more generic, with some defaults:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def limit_rate(func, group=None, key=&#39;post:username&#39;, rate=&#39;10/m&#39;, method=&#39;POST&#39;, block=True):

    @ratelimit(group=group, key=key, rate=rate, method=method, block=block)
    def new_func(*args, **kwargs):
        return func(*args, **kwargs)

    return new_func
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we can patch any view easily with our short &lt;code&gt;limit_rate()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Have good time limiting around!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Marathon plan</title>
      <link>https://manhtai.github.io/posts/marathon-12-weeks-plan/</link>
      <pubDate>Sun, 25 Feb 2018 21:45:30 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/marathon-12-weeks-plan/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve generated a two-12-weeks &lt;a href=&#34;https://docs.google.com/spreadsheets/d/1EGDOGJBFqMY-nIQkyLcGU0YRrwygnGIP-zq_AZjrXNM&#34;&gt;marathon plan&lt;/a&gt; using &lt;a href=&#34;https://runkeeper.com&#34;&gt;Runkeeper&lt;/a&gt; app for
my race in this summer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Happy Lunnar New Year</title>
      <link>https://manhtai.github.io/posts/happy-lunnar-new-year/</link>
      <pubDate>Fri, 16 Feb 2018 18:56:22 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/happy-lunnar-new-year/</guid>
      <description>&lt;p&gt;Today is the first day of Vietnamese lunar new year. It is national holiday in
Vietnam and is used for marking the start of another spring season.&lt;/p&gt;

&lt;p&gt;Last year was such a year for me, professionally. This year I&amp;rsquo;ve got some plans
in mind and will try my best to achieve them. Two most challenging things are
to rebuild a big monolith system to microservices and to run a full marathon
in the summer. I&amp;rsquo;m expecting an interesting journey in the end of the year, too.&lt;/p&gt;

&lt;p&gt;Wish you all have a successful year ahead!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Wish our colleagues a happy birthday</title>
      <link>https://manhtai.github.io/posts/wish-our-colleagues-a-happy-birthday/</link>
      <pubDate>Mon, 12 Feb 2018 22:04:15 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/wish-our-colleagues-a-happy-birthday/</guid>
      <description>&lt;p&gt;We build an intranet app using Django to help HR manage people at work. And
since we use Metabase for all our analysis tasks, we got the HR database to
query all the things about our colleagues (not the salary though, it&amp;rsquo;s
accounting&amp;rsquo;s matter).&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not interested in my colleagues&amp;rsquo; days of leave, but I wish they got a happy
birthday, so why don&amp;rsquo;t we send out a wish, automatically?&lt;/p&gt;

&lt;p&gt;I write a question in SQL, it&amp;rsquo;s just as simple as list out all people who
have date and month equal to today&amp;rsquo;s date and month. And use a &lt;a href=&#34;https://manhtai.github.io/posts/metabase-alerts&#34;&gt;bot&lt;/a&gt; to
check the question everyday at 10am, then send out a wish if the question is
not empty.&lt;/p&gt;

&lt;p&gt;The tricky part is we don&amp;rsquo;t know firsthand what should be included in the
message, like our colleagues&amp;rsquo; name, slack id, etc. So I have to evaluate them
at running time. The solution is to pass a string to alert message and then
convert it to string interpolation later. Like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// When creating alert
const originalMessage = &amp;quot;Happy birthday to ${rows.join(&amp;quot;, &amp;quot;)}!&amp;quot;;

// At running time
const rows = [&amp;quot;some&amp;quot;, &amp;quot;data&amp;quot;];
const theMessage = eval(&#39;`&#39; + originalMessage + &#39;`&#39;);
sendMessageToSlack(theMessage);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I know it&amp;rsquo;s extremely risky to use &lt;code&gt;eval()&lt;/code&gt; anywhere, so I use &lt;a href=&#34;https://github.com/hacksparrow/safe-eval&#34;&gt;safe-eval&lt;/a&gt;
instead. Although at the moment it has a security &lt;a href=&#34;https://github.com/hacksparrow/safe-eval/issues/5&#34;&gt;bug&lt;/a&gt;, it should be fine
for our internal use, at least for now.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Webpack critical CSS plugin</title>
      <link>https://manhtai.github.io/posts/webpack-critical-css/</link>
      <pubDate>Thu, 01 Feb 2018 19:17:48 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/webpack-critical-css/</guid>
      <description>&lt;p&gt;If you don&amp;rsquo;t already know what critical CSS is, then do &lt;a href=&#34;https://developers.google.com/speed/pagespeed/insights/&#34;&gt;get some insights&lt;/a&gt;
for your web, read the reference about &lt;a href=&#34;https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery&#34;&gt;optimizing CSS delivery&lt;/a&gt;, and I&amp;rsquo;ll
meet you here after. Really, just do it.&lt;/p&gt;

&lt;p&gt;We use Django for some of our web projects for the server side. And with
support from &lt;a href=&#34;https://github.com/ezhome/django-webpack-loader&#34;&gt;django-webpack-loader&lt;/a&gt;, now we can use Webpack in the client
side, using massive libraries from Nodejs world to power our frontend part.
We feel very happy about this integration.&lt;/p&gt;

&lt;p&gt;And now I have to find a library support generate critical CSS from our CSS
bundler, and put only that to &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, not all our CSS build.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/addyosmani/critical&#34;&gt;Some&lt;/a&gt; &lt;a href=&#34;https://github.com/anthonygore/html-critical-webpack-plugin&#34;&gt;of&lt;/a&gt; &lt;a href=&#34;https://github.com/pocketjoso/penthouse&#34;&gt;them&lt;/a&gt; do exists. But it may do more work than I want:
modify HTML / exact CSS file out of Webpack build process, or it is just
a library that can output a critical CSS file. Yeah, time for me to write the
plugin I want myself.&lt;/p&gt;

&lt;p&gt;So what do I want?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I want a plugin that can get the CSS output from latest Webpack build step, do
some magic to get critical CSS from that, then output an additional CSS file
for me, then I&amp;rsquo;ll decide what to do with it later.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can do exactly that with a plugin that wrap around a serious critical CSS
extractor. I choose &lt;a href=&#34;https://github.com/pocketjoso/penthouse&#34;&gt;penthouse&lt;/a&gt; to do the heavy work, follow the &lt;a href=&#34;https://github.com/webpack/docs/wiki/how-to-write-a-plugin&#34;&gt;guide&lt;/a&gt;
on how to write a Webpack plugin, I create &lt;a href=&#34;https://github.com/manhtai/webpack-critical-css-plugin&#34;&gt;webpack-critical-css-plugin&lt;/a&gt;
for you to use.&lt;/p&gt;

&lt;p&gt;Take a look, and send some PRs!&lt;/p&gt;

&lt;p&gt;Now for it to work with &lt;strong&gt;django-webpack-loader&lt;/strong&gt;, put your second CSS build
(the critical CSS) in the head, and put the first one (the original CSS) in
the body.&lt;/p&gt;

&lt;p&gt;Try it, then re-check your web score in Google PageSpeed Insights!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django staticfiles</title>
      <link>https://manhtai.github.io/posts/django-staticfiles/</link>
      <pubDate>Tue, 30 Jan 2018 22:31:54 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/django-staticfiles/</guid>
      <description>&lt;p&gt;Recently we move our sass &amp;amp; js complier from good ol&amp;rsquo; &lt;a href=&#34;https://django-compressor.readthedocs.io/en/latest/&#34;&gt;django-compressor&lt;/a&gt;
and &lt;a href=&#34;https://github.com/etianen/django-require/&#34;&gt;django-require&lt;/a&gt; (one for compile sass, one for bundle js), to
&lt;a href=&#34;https://webpack.js.org/&#34;&gt;webpack&lt;/a&gt;, a client-side bundler (it will do both sass &amp;amp; js for us). It&amp;rsquo;s
a long process, I admit, but things go smoothly eventually. Till something
pops up.&lt;/p&gt;

&lt;p&gt;Before that, we use django-require&amp;rsquo;s &lt;code&gt;OptimizedStaticFilesStorage&lt;/code&gt; to generate
bundlers offline. This storage will generate a cache buster files side by
side with original staticfiles in our &lt;code&gt;STATIC_ROOT&lt;/code&gt; folder. Some folder will
look like this after collectstatic:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# public/

cms/header.css
cms/header.0847d6eff302.css
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;After that, we must use &lt;a href=&#34;https://aws.amazon.com/cli/&#34;&gt;aws cli&lt;/a&gt; to sync staticfiles manually to our S3
bucket, then set &lt;code&gt;STATIC_URL&lt;/code&gt; to our Cloudfront endpoint. It works, till now.&lt;/p&gt;

&lt;p&gt;I now remove both django-compressor and django-require, and use Django&amp;rsquo;s
&lt;code&gt;ManifestFilesMixin&lt;/code&gt; storage instead, with combination with &lt;code&gt;S3BotoStorage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We must change default &lt;code&gt;manifest_name&lt;/code&gt; a little bit using git commit digest
to support multiple deployments in the same bucket. The storage we use now
looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class S3ManifestStaticFilesStorage(ManifestFilesMixin, S3BotoStorage):
    &amp;quot;&amp;quot;&amp;quot;
    This storage uses S3 as backend and having cache busting property of
    ManifestStaticFilesStorage
    &amp;quot;&amp;quot;&amp;quot;
    manifest_strict = False

    @property
    def manifest_name(self):
        filename = &#39;staticfiles-{version}.json&#39;
        version = subprocess.check_output([&#39;git&#39;, &#39;rev-parse&#39;, &#39;HEAD&#39;]).strip()
        return filename.format(version=version.decode(&#39;utf-8&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now whenever we call &lt;code&gt;collectstatic&lt;/code&gt;, it will collect all our staticfiles to
S3, no need another step to sync them manually.&lt;/p&gt;

&lt;p&gt;Things will work beautifully if Django collect all files, instead it
&lt;strong&gt;WILL NOT&lt;/strong&gt; collect anything which are collected before, even when we&amp;rsquo;ve
changed our storage backend.&lt;/p&gt;

&lt;p&gt;I have done many twists back and forth but the &lt;code&gt;static&lt;/code&gt; template tags got wrong
urls all the time. Then after checking &lt;code&gt;last-modified&lt;/code&gt; in one of response
header, I find out that the file hasn&amp;rsquo;t change for very long time. Hence
Django mustn&amp;rsquo;t touch these files when I change staticfiles backend storage.&lt;/p&gt;

&lt;p&gt;Voyla!&lt;/p&gt;

&lt;p&gt;Just copy all staticfiles form old folder into the new one, and problem
solved, new files would work as expected.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build a distributed chat app in Golang</title>
      <link>https://manhtai.github.io/posts/chat-app-in-golang/</link>
      <pubDate>Mon, 29 Jan 2018 21:19:23 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/chat-app-in-golang/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve built a &lt;a href=&#34;https://github.com/manhtai/golang-mongodb-chat&#34;&gt;demo&lt;/a&gt; chat app in Go before, using Go channels to broadcast
messages, data is saved to MongoDB. It&amp;rsquo;s quite a fun learning experience,
but when you want a chat app at scale, you need more. Yes I am looking at
you: &lt;strong&gt;microservices&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Now I know one thing or two about microservices and distributed systems,
I think at least these three are in need:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1. A service for saving messages to DB&lt;/li&gt;
&lt;li&gt;2. A service for handling messages from clients&lt;/li&gt;
&lt;li&gt;3. A proper message queue, for the talkings between services&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we&amp;rsquo;ll start to build one.&lt;/p&gt;

&lt;p&gt;(Some time after&amp;hellip;)&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s on &lt;a href=&#34;https://github.com/manhtai/golang-nsq-chat&#34;&gt;GitHub&lt;/a&gt; now. The README should be enough to explain the idea.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How we build a working ERP system using Django and React Native in 3 months</title>
      <link>https://manhtai.github.io/posts/building-erp-using-django-react-native/</link>
      <pubDate>Sun, 28 Jan 2018 16:53:15 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/building-erp-using-django-react-native/</guid>
      <description>

&lt;p&gt;The title may seem too promising, and but it is a working ERP, not a complete
one, we are still having many things to build and improve.&lt;/p&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;Within 3 months, 2 developers, we managed to build a web UI (using &lt;a href=&#34;https://www.djangoproject.com&#34;&gt;Django&lt;/a&gt;) and
a mobile app (using &lt;a href=&#34;https://facebook.github.io/react-native/&#34;&gt;React Native&lt;/a&gt;), with this core business flow:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Quotation &amp;gt; Sales Order &amp;gt; Purchase Order&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A little bit about above flow looks like this.&lt;/p&gt;

&lt;p&gt;The sales staffs create Quotations when they are selling Products to Customers,
usually over telephones. They make an assignment to services staff in the same
screen they create the quotation. This services staff will instantly receive a
notification about this new quotation assigned for them through an app, and
know when and where they should meet the customer.&lt;/p&gt;

&lt;p&gt;When the services staff delivers service to customer, they will make a sales
order in their app, print an invoice using a thermal printer and get the money.
They can do all of that offline, and do it fast.&lt;/p&gt;

&lt;p&gt;After that, they must be online to sync the sales orders back to our server.
In there, some purchase orders will be created automatically base on the products
customers bought from us. Those purchase orders will be sent to corresponding
suppliers for purchasing.&lt;/p&gt;

&lt;h2 id=&#34;the-fail&#34;&gt;The fail&lt;/h2&gt;

&lt;p&gt;I am the technical lead of this new ERP project, and the first task is to do
research about ERP frameworks that already out there in the market. We don&amp;rsquo;t
think about create one from scratch at first because it must be too big for us
to handle. We are only a small startup team after all.&lt;/p&gt;

&lt;p&gt;After a day or two playing around, two most promising ones I found are &lt;a href=&#34;https://www.odoo.com/&#34;&gt;Odoo&lt;/a&gt;
and &lt;a href=&#34;https://erpnext.com/&#34;&gt;ERPNext&lt;/a&gt;. But soon I drop Oddo because it&amp;rsquo;s too big and not very
&amp;ldquo;open&amp;rdquo; anymore in the sense of open source softwares.&lt;/p&gt;

&lt;p&gt;And then, after that, there was 2 sweaty weeks of trying to fit our business
model in to ERPNext. Finally, I must give up. It&amp;rsquo;s not our business flow is too
complex, but the devil is in the details. I need freedom to create models and
calculations for the system that ERPNext just does not allow.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;We must create all from scratch&lt;/em&gt;, I told our CTO. And he agreed.&lt;/p&gt;

&lt;h2 id=&#34;the-web&#34;&gt;The web&lt;/h2&gt;

&lt;p&gt;I choose Django mainly for its battery-included features: ORM &amp;amp; admin interfaces.
All we need to do is to declare models, and it will generate migration files
and fire up an admin page for us, so we can create and change things fast.&lt;/p&gt;

&lt;p&gt;We use &lt;a href=&#34;http://grappelliproject.com/&#34;&gt;Grappelli&lt;/a&gt; for admin style instead of default one, and use admin UI as
default UI for our staffs. It does not look fancy, but simple and configurable.&lt;/p&gt;

&lt;h2 id=&#34;the-api&#34;&gt;The API&lt;/h2&gt;

&lt;p&gt;The first thing in mind when we start the project is the mobile app, not the
web UI, hence the API, and Django with its famous &lt;a href=&#34;http://www.django-rest-framework.org/&#34;&gt;REST framework&lt;/a&gt; suits our
need very well. At least I thought that, because I have many experiences working
with this.&lt;/p&gt;

&lt;p&gt;But then, something pop up in my eyes: &lt;a href=&#34;http://graphql.org/learn/&#34;&gt;Graphql&lt;/a&gt;, and it looks shiny!
After digging around, I found this &lt;a href=&#34;http://graphene-python.org/&#34;&gt;Graphene&lt;/a&gt; for Python, give it a try, and
the choice has been made.&lt;/p&gt;

&lt;p&gt;Graphql help us build API faster &amp;amp; easier than REST, just declare your schema
and boom, you got a full-fledged API!&lt;/p&gt;

&lt;h2 id=&#34;the-app&#34;&gt;The app&lt;/h2&gt;

&lt;p&gt;At first our team has only one mobile dev, and he is using &lt;a href=&#34;https://ionicframework.com/&#34;&gt;Ionic&lt;/a&gt; for some
of our apps. I myself am a backend developer most of the time, so I need
another man for the project. I can&amp;rsquo;t take the only mobile developer we had because
he is very busy himself. Our CTO suggests that I should use the same mobile framework
we already use, i.e. Ionic, so I can get support from the experienced one.&lt;/p&gt;

&lt;p&gt;I also thought that myself, but then, you know, many things pop up in our
little eyes these days. You already know what it is this time: React Native.
As I just said, our team only had one mobile developer, but fortunately, all
our frontend dev already use a frontend framework at another project of ours:
&lt;a href=&#34;https://vuejs.org/&#34;&gt;Vuejs&lt;/a&gt;. And React Native is just &lt;a href=&#34;https://reactjs.org/&#34;&gt;Reactjs&lt;/a&gt; in the mobile world, and it
must be the same!&lt;/p&gt;

&lt;p&gt;When I mention React Native, one of our dev shows the interest, so I invited
him to join, and it turns out he and I made an awesome team! He
builds most parts of the app, I only help for some. And the most tricky thing
I face is to print Vietnamese characters to thermal printer. I really should write
a post about that later.&lt;/p&gt;

&lt;h2 id=&#34;the-result&#34;&gt;The result&lt;/h2&gt;

&lt;p&gt;We had a working ERP system for recording our core business activities that we
can take advantages of by using other data centric tools for making reports,
alerts, forecast, etc. All fancy things that we imagined we can do with the data,
now we can do it.&lt;/p&gt;

&lt;h2 id=&#34;the-ongoing&#34;&gt;The ongoing&lt;/h2&gt;

&lt;p&gt;There are many parts of the system need to be added: CRM, Call center, etc.
But really, choosing the right tools from the start is the key for any success
later. Good tools are all around, just pick one for your need!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Django transactions</title>
      <link>https://manhtai.github.io/posts/django-transactions/</link>
      <pubDate>Sat, 27 Jan 2018 17:39:26 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/django-transactions/</guid>
      <description>&lt;p&gt;Django &lt;a href=&#34;https://docs.djangoproject.com/en/dev/topics/db/transactions/&#34;&gt;documentation&lt;/a&gt; about transaction points out:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Django uses transactions or savepoints automatically to guarantee the integrity
of ORM operations that require multiple queries, especially &lt;code&gt;delete()&lt;/code&gt; and
&lt;code&gt;update()&lt;/code&gt; queries.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This means whenever we call &lt;code&gt;save()&lt;/code&gt; or &lt;code&gt;create()&lt;/code&gt;, it&amp;rsquo;s already wrapped in
a transaction. And usually new data is not in the database yet when we try to
get that again somewhere after.&lt;/p&gt;

&lt;p&gt;To make sure it&amp;rsquo;s commited, we have to use &lt;code&gt;transaction.on_commit()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are 2 popular cases I find that we must use &lt;code&gt;on_commit()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The first one&lt;/em&gt; is when we send task to a Celery queue. The error we usually made
here is to put that on a &lt;code&gt;post_save&lt;/code&gt; signal and hope for the best. Remember that
&lt;code&gt;post_save&lt;/code&gt; is in the same transaction with &lt;code&gt;save()&lt;/code&gt;, so there is no guarantee
that new data will be in the database when Celery task get it from there.&lt;/p&gt;

&lt;p&gt;We must use put the task to &lt;code&gt;on_commit()&lt;/code&gt; function like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;transaction.on_commit(lambda: celery_task_with_id(id))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;The second case&lt;/em&gt; is when we want to do something after all inline forms in
admin page is saved. But the thing we actually want is data is commited to
database. You already know how to do it, just like the case above.&lt;/p&gt;

&lt;p&gt;The catch here is we can put &lt;code&gt;on_commit()&lt;/code&gt; function in many places, as long as
it&amp;rsquo;s in the transaction. I usually put that on &lt;code&gt;save_model()&lt;/code&gt; or &lt;code&gt;save_related()&lt;/code&gt;,
depend on what extra infomation I need for further processing.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metabase alerts</title>
      <link>https://manhtai.github.io/posts/metabase-alerts/</link>
      <pubDate>Sat, 27 Jan 2018 16:26:24 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/metabase-alerts/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://metabase.com&#34;&gt;Metabase&lt;/a&gt; is a simple and powerful BI tool for business. We use it to get
insights about almost everything that happens in our system. In &lt;a href=&#34;https://metabase.com/blog/Metabase-0.27/index.html&#34;&gt;recent&lt;/a&gt;
version it added alerts feature to question, but has some limitations.&lt;/p&gt;

&lt;p&gt;Firstly, the shortest time it allows checking for something bad may happen is
one hour. It may seem acceptable in some business model but not ours. We need
at most 5 minutes delay time in alerting.&lt;/p&gt;

&lt;p&gt;Secondly, we can&amp;rsquo;t customize Slack alert format, and it sucks most of the
time.&lt;/p&gt;

&lt;p&gt;Lastly, I don&amp;rsquo;t know whether it&amp;rsquo;s a bug or not, but sometime the alerts just
stop working!&lt;/p&gt;

&lt;p&gt;Fortunately, Metabase has a &lt;a href=&#34;https://github.com/metabase/metabase/blob/master/docs/api-documentation.md&#34;&gt;rich&lt;/a&gt; API for frontend part, and we can use
that to make our own alert system.&lt;/p&gt;

&lt;p&gt;So our solution is use a Slack bot to call the question API periodically, and
send a message to a choosen channel if the response is not empty.&lt;/p&gt;

&lt;p&gt;Checkout the sample code &lt;a href=&#34;https://github.com/manhtai/mimi/blob/master/metabase.js&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contact</title>
      <link>https://manhtai.github.io/contact/</link>
      <pubDate>Sat, 27 Jan 2018 15:50:26 +0700</pubDate>
      
      <guid>https://manhtai.github.io/contact/</guid>
      <description>&lt;p&gt;I have some social accounts but I don&amp;rsquo;t use them much. The fastest way is to
reach me at me@manhtai.com.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2018</title>
      <link>https://manhtai.github.io/posts/2018/</link>
      <pubDate>Fri, 26 Jan 2018 23:52:49 +0700</pubDate>
      
      <guid>https://manhtai.github.io/posts/2018/</guid>
      <description>&lt;p&gt;A new year has come, guess what, I made a new blog. Yay!&lt;/p&gt;

&lt;p&gt;This blog is powered by &lt;a href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; and hosted by &lt;a href=&#34;https://github.com&#34;&gt;GitHub&lt;/a&gt;. I modified the
&lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/#github-user-or-organization-pages&#34;&gt;deployment script&lt;/a&gt; a little bit to use 2 braches in 1 repo instead of
2 repos. It looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash

# 0. Notify &amp;amp; get message
echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;
msg=&amp;quot;Rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi

# 1. Commit changes to develop first
git add .
git commit -m &amp;quot;$msg&amp;quot;

# 2. Build the project in develop
hugo

# 3. Checkout to master
git checkout master

# 4. Add changes to master
cp -r public/* .
rm -rf public
git add .
git commit -m &amp;quot;$msg&amp;quot;

# 5. Push to develop &amp;amp; master
git push origin master develop

# 6. Come back to develop
git checkout develop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can checkout the source code &lt;a href=&#34;https://github.com/manhtai/manhtai.github.io&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://manhtai.github.io/about/</link>
      <pubDate>Fri, 26 Jan 2018 23:51:08 +0700</pubDate>
      
      <guid>https://manhtai.github.io/about/</guid>
      <description>&lt;p&gt;A place to write down interesting things that I found, mainly about coding and
stuffs.&lt;/p&gt;

&lt;p&gt;This blog is hosted from my &lt;a href=&#34;https://github.com/manhtai/&#34;&gt;GitHub&lt;/a&gt;, do check it out!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Archives</title>
      <link>https://manhtai.github.io/archives/</link>
      <pubDate>Fri, 26 Jan 2018 23:49:57 +0700</pubDate>
      
      <guid>https://manhtai.github.io/archives/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>